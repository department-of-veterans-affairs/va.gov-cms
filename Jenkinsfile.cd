def shouldBail() {
  // abort the job if there's a newer build going now
  return currentBuild.nextBuild
}

pipeline {
  agent any

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    stage('Build new AMI') {

      when {
        expression {
          !shouldBail()
        }
      }

      steps {
        script {
          commit = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
        }

        build job: "builds/${params.app}", parameters: [
          booleanParam(name: 'release', value: false),
          booleanParam(name: 'notify_slack', value: true),
          stringParam(name: 'ref', value: commit),
          booleanParam(name: 'force_rebuild', value: false)
        ], wait: true
      }
    }

    stage('Deploy to dev') {
      when {
        expression {
          !shouldBail()
        }
      }
      steps {
        sh 'echo SUCCESS, we are in DEV step'
        build job: "deploys/${params.app}-vagov-dev", parameters: [
          stringParam(name: 'app', value: 'cms'),
          booleanParam(name: 'notify_slack', value: true),
          stringParam(name: 'ref', value: commit),
          booleanParam(name: 'migration_status', value: false)
        ] , wait: false
      }
    }

    stage('Deploy to staging') {
      when {
        expression {
          !shouldBail()
        }
      }
      steps {
        build job: "deploys/${params.app}-vagov-staging", parameters: [
          stringParam(name: 'app', value: 'cms'),
          booleanParam(name: 'notify_slack', value: true),
          stringParam(name: 'ref', value: commit),
          booleanParam(name: 'migration_status', value: false)
        ] , wait: false
      }
    }
  }
  post {
    always {
      cleanWs()
    }
    failure {
      slackSend(channel: params.slack_channel, color: 'danger', message: "Deployment for ${env.JOB_NAME} failed ${env.BUILD_URL}, please leave a checkmark emoji here to indicate ownership of failure. ")
    }
  }
}
