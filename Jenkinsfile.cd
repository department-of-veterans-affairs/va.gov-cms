@Library('va.gov-devops-jenkins-lib') _

DEV_BRANCH     = 'master'
STAGING_BRANCH = 'master'

IS_DEV_BRANCH     = env.BRANCH_NAME == DEV_BRANCH
IS_STAGING_BRANCH = env.BRANCH_NAME == STAGING_BRANCH

def shouldBail() {
  // abort the job if we're not on deployable branch (usually master) and there's a newer build going now
  return !IS_DEV_BRANCH &&
         !IS_STAGING_BRANCH &&
         !env.CHANGE_TARGET &&
         currentBuild.nextBuild
}

pipeline {
  agent any
  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    stage('Build new AMI') {
      steps {
        when {
          expression {
            !shouldBail()
          }
        }

        script {
          commit = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
        }

        build job: "builds/cms", parameters: [
          booleanParam(name: 'release', value: false),
          booleanParam(name: 'notify_slack', value: true),
          stringParam(name: 'ref', value: commit),
          booleanParam(name: 'force_rebuild', value: false)
        ], wait: true
      }
    }

    stage('Deploy to dev') {
      if (IS_DEV_BRANCH && !shouldBail()) {
        steps {
          build job: "deploys/cms-vagov-dev", parameters: [
            stringParam(name: 'app', value: 'cms'),
            booleanParam(name: 'notify_slack', value: true),
            stringParam(name: 'ref', value: commit),
            booleanParam(name: 'migration_status', value: false)
          ] , wait: false
        }
      }
    }

    stage('Deploy to staging') {
      if (IS_STAGING_BRANCH && !shouldBail()) {
        steps {
          build job: "deploys/cms-vagov-staging", parameters: [
            stringParam(name: 'app', value: 'cms'),
            booleanParam(name: 'notify_slack', value: true),
            stringParam(name: 'ref', value: commit),
            booleanParam(name: 'migration_status', value: false)
          ] , wait: false
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
    failure {
      slackSend(channel: '#cms-engineering', color: 'danger', message: "${env.JOB_NAME} failed ${env.BUILD_URL}")
    }
  }
}
