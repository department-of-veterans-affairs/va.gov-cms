# If any of these test names get updated they need to be updated here too
# https://github.com/department-of-veterans-affairs/va.gov-cms/settings/branches

version: '3'

dotenv: ['.env']

output: 'group'

tasks:

  # Any changes to test names or additions or removals must be updated in 
  # .github/workflows/set-tugboat-tests-pending.yml as well for the 
  # test to be required effectively.
  va/tests/behat:
    desc: Behat Tests
    cmds:
      - |
        cat <<EOF | bash
          : "${SKIP_REPORTING:=0}"
          : "${RETURN_EXIT_CODE:=0}"
          set -o pipefail
          output="\$(mktemp -d)/output"
          mkfifo \$output
          (cat \$output&)
          cd tests/behat
          result="\$(time behat --strict --colors 2>&1 | tee \$output)"
          exit_code=\$?
          if [ "$SKIP_REPORTING" -ne 1 ]; then
            if [ "\$exit_code" -eq 0 ]; then
              github-status-updater -action=update_state -state=success -context='{{ .TASK }}' -description='Success'
            else
              github-status-updater -action=update_state -state=failure -context='{{ .TASK }}' -description='Failed'
            fi
          fi
          if [ "$RETURN_EXIT_CODE" -ne 0 ]; then
            exit "\$exit_code";
          fi
        EOF

  va/tests/cypress:
    desc: Accessibility and Behavioral tests with Cypress
    cmds:
      - |
        cat <<EOF | bash
          : "${SKIP_REPORTING:=0}"
          : "${RETURN_EXIT_CODE:=0}"
          set -o pipefail
          output="\$(mktemp -d)/output"
          mkfifo \$output
          (cat \$output&)
          result="\$(time composer va:test:cypress 2>&1 | tee \$output)"
          exit_code=\$?
          if [ "$SKIP_REPORTING" -ne 1 ]; then
            if [ "\$exit_code" -eq 0 ]; then
              github-status-updater -action=update_state -state=success -context='{{ .TASK }}' -description='Success'
            else
              github-status-updater -action=update_state -state=failure -context='{{ .TASK }}' -description='Failed'
              node tests/report_cypress_accessibility_errors.js
            fi
          fi
          if [ "$RETURN_EXIT_CODE" -ne 0 ]; then
            exit "\$exit_code";
          fi
        EOF

  va/tests/phplint:
    desc: PHP Lint
    cmds:
      - |
        cat <<EOF | bash
          : "${SKIP_REPORTING:=0}"
          : "${RETURN_EXIT_CODE:=0}"
          exit_code=0
          result="{{ .TASK }}<br/><br/>"
          trap '{ (( exit_code |=\$? )); result+="\$output_text<br/>"; }' ERR
          output_text=\$(find docroot/modules/custom docroot/themes -name '*.inc' -o -name '*.php' -o -name '*.module' -o -name '*.install' -print0 | xargs -0 -n1 php -l 2>&1)
          trap - ERR
          if [ "$SKIP_REPORTING" -ne 1 ]; then
            if [ "\$exit_code" -eq 0 ]; then
              github-status-updater -action=update_state -state=success -context='{{ .TASK }}' -description='Success'
            else
              github-status-updater -action=update_state -state=failure -context='{{ .TASK }}' -description='Failed'
              [ "\${GITHUB_COMMENT_TYPE}" == "pr" ] && github-commenter -delete-comment-regex="{{ .TASK }}" -comment="\${result}"
            fi
          fi
          if [ "$RETURN_EXIT_CODE" -ne 0 ]; then
            exit "\$exit_code";
          fi
        EOF

  va/tests/phpunit:
    desc: PHPUnit
    cmds:
      - |
        cat <<EOF | bash
          : "${SKIP_REPORTING:=0}"
          : "${RETURN_EXIT_CODE:=0}"
          set -o pipefail
          output="\$(mktemp -d)/output"
          mkfifo \$output
          (cat \$output&)
          result="\$(time phpunit --group functional --exclude-group disabled tests/phpunit --colors=always 2>&1 | tee \$output)"
          exit_code=\$?
          if [ "$SKIP_REPORTING" -ne 1 ]; then
            if [ "\$exit_code" -eq 0 ]; then
              github-status-updater -action=update_state -state=success -context='{{ .TASK }}' -description='Success'
            else
              github-status-updater -action=update_state -state=failure -context='{{ .TASK }}' -description='Failed'
            fi
          fi
          if [ "$RETURN_EXIT_CODE" -ne 0 ]; then
            exit "\$exit_code";
          fi
        EOF

  va/tests/status-error:
    desc: Check for Drupal status errors
    cmds:
      - |
        cat <<EOF | bash
          : "${SKIP_REPORTING:=0}"
          : "${RETURN_EXIT_CODE:=0}"
          set -o pipefail
          output="\$(mktemp -d)/output"
          mkfifo \$output
          (cat \$output&)
          lines=\$(drush $DRUSH_ALIAS core-requirements --format=list --ignore='update_core,update_contrib,"update status"' --severity=2 2>&1 | tee \$output)
          line_count=\$(grep -c "\S" <<< \$lines)
          if [ "$SKIP_REPORTING" -ne 1 ]; then
            if [ "\$line_count" -eq 0 ]; then
              github-status-updater -action=update_state -state=success -context='{{ .TASK }}' -description='Success: No Drupal status requirement errors were found.'
            else
              github-status-updater -action=update_state -state=failure -context='{{ .TASK }}' -description="Failed: \${line_count} Drupal status requirements found."
              [ "\${GITHUB_COMMENT_TYPE}" == "pr" ] && github-commenter -delete-comment-regex="{{ .TASK }}" -comment="{{ .TASK }}:<br /><br /><pre>\$(drush $DRUSH_ALIAS core-requirements --severity=2)</pre>"
            fi
          fi
          if [ "$RETURN_EXIT_CODE" -ne 0 ]; then
            exit "\$line_count";
          fi
        EOF

  va/tests/content-build-gql:
    desc: Ensure that the content build graphql queries succeed
    cmds:
      - |
        cat <<EOF | bash
          : "${SKIP_REPORTING:=0}"
          : "${RETURN_EXIT_CODE:=0}"
          set -o pipefail
          output="\$(mktemp -d)/output"
          mkfifo \$output
          (cat \$output&)
          result="\$(composer va:test:content-build-gql 2>&1 | tee \$output)"
          exit_code=\$?
          if [ "$SKIP_REPORTING" -ne 1 ]; then
            if [ "\$exit_code" -eq 0 ]; then
              github-status-updater -action=update_state -state=success -context='{{ .TASK }}' -description='Success'
            else
              github-status-updater -action=update_state -state=failure -context='{{ .TASK }}' -description='Failed'
            fi
          fi
          if [ "$RETURN_EXIT_CODE" -ne 0 ]; then
            exit "\$exit_code";
          fi
        EOF

  default:
    desc:
    deps:
      - va/tests/behat
      - va/tests/cypress
      - va/tests/phplint
      - va/tests/phpunit
      - va/tests/status-error
      - va/tests/content-build-gql
