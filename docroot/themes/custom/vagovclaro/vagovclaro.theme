<?php

/**
 * @file
 * Vagovclaro.theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_html().
 */
function vagovclaro_preprocess_html(&$variables) {
  $is_admin = \Drupal::service('va_gov_user.user_perms')->hasAdminRole(TRUE) ? 'admin' : 'not-admin';
  $variables['attributes']['class'][] = 'role-' . $is_admin;

  // For css that is different per environment (admin toolbar color, etc.)
  $environment_name = getenv('CMS_ENVIRONMENT_TYPE');
  $variables['attributes']['class'][] = 'cms-' . $environment_name;
  $variables['attributes']['class'][] = 'vagovclaro';
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function vagovclaro_theme_suggestions_page_alter(&$suggestions, $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Revisions pages load $node as a nid string instead of a node entity.
    if (!is_object($node)) {
      $node = Node::load($node);
    }
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function vagovclaro_preprocess_block(&$variables) {
  $block = $variables['elements'];
  $theme_prefix = 'vagovclaro-';

  // Some blocks gained a theme prefix when switching themes.
  // IDs need adjusted in order to pass tests in both themes.
  if (isset($block['#id']) && $block['#id'] === 'vagovclaro_entitymetadisplay') {
    $variables['attributes']['id'] = str_replace($theme_prefix, '', $variables['attributes']['id']);
  }
}

/**
 * Implements suggestions_block_alter().
 */
function vagovclaro_theme_suggestions_block_alter(array &$suggestions, array $vars) {
  if (isset($vars['elements']['content']['#block_content'])) {
    $suggestions[] = 'block__custom__' . $vars['elements']['content']['#block_content']->bundle();
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function vagovclaro_preprocess_form_element(&$variables) {
  // Moves help text above inputs after labels for form elements.
  if (isset($variables['description_display']) && $variables['description_display'] !== 'invisible') {
    // Checkboxes should keep the help text underneath. It looks better.
    if (isset($variables['type']) && $variables['type'] === 'checkbox') {
      $variables['description_display'] = 'after';
    }
    else {
      $variables['description_display'] = 'before';
    }
  }
}

/**
 * Implements hook_preprocess_container().
 */
function vagovclaro_preprocess_container(&$variables) {
  // Adds help text style to descriptions in nested paragraph field.
  if (!empty($variables['attributes']['id']) && $variables['attributes']['id'] === 'edit-field-related-links-description') {
    $variables['attributes']['class'][] = 'form-item__description';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vagovclaro_theme_suggestions_paragraph_alter(&$suggestions, $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->bundle() === 'collapsible_panel_item' || $paragraph->bundle() === 'q_a') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $suggestions[] = 'paragraph__' . $node->bundle() . '__' . $paragraph->bundle();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vagovclaro_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $node_parent = _vagovclaro_get_node_parent($paragraph);
  // If this paragraph belongs to a 'benefits detail page'.
  if (!empty($node_parent) && $node_parent->bundle() === 'page') {
    // Set the paragraph name.
    $variables['paragraph_name'] = $paragraph->type->entity->label();
  }

  if ($paragraph->getType() === 'q_a') {
    $variables['as_accordion'] = FALSE;
    if ($parent = $paragraph->getParentEntity()) {
      if ($parent->bundle() === 'q_a_section') {
        $variables['as_accordion'] = $parent->field_accordion_display->value;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vagovclaro_theme_suggestions_input_alter(&$suggestions, $variables) {
  $element = $variables['element'];
  // Add theme suggestions to make various buttons found in forms smaller.
  if (isset($element['#ief_row_form'])) {
    $suggestions[] = 'input__submit__ief';
  }
  if (isset($element['#ief_form']) && $element['#ief_form'] === 'add') {
    $suggestions[] = 'input__submit__ief';
  }
  if (isset($element['#ief_form']) && $element['#ief_form'] === 'ief_add_existing') {
    $suggestions[] = 'input__submit__ief';
  }
  if (isset($element['#parents'][0]) && $element['#parents'][0] === 'field_alert') {
    $suggestions[] = 'input__submit__alert';
  }
  if (isset($element['#id']) && $element['#id'] === "edit-field-content-block-add-more-browse") {
    $suggestions[] = 'input__submit__paragraph_action';
  }
  if (isset($element['#attributes']['data-drupal-selector']) && $element['#attributes']['data-drupal-selector'] === 'edit-field-content-block-add-more-browse') {
    $suggestions[] = 'input__submit__paragraph_action';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vagovclaro_preprocess_field(&$variables) {
  $element = $variables['element'];
  $field_defs = Drupal::service('entity_field.manager')
    ->getFieldDefinitions($element['#entity_type'], $element['#bundle']);
  /** @var \Drupal\Core\Field\BaseFieldDefinition $field_def */
  $field_def = $field_defs[$element['#field_name']];
  $variables['description'] = str_replace('"', "'", $field_def->getDescription());
}

/**
 * Return the node that the paragraph belongs to.
 *
 * If the paragraph's parent is a paragraph, recurse up the tree until you
 * reach a non-paragraph entity.
 *
 * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
 *   The paragraph to find the parent of.
 *
 * @return \Drupal\node\Entity\Node|null
 *   If the paragraph is attached to a node, return the node, otherwise NULL.
 */
function _vagovclaro_get_node_parent(Paragraph $paragraph) {
  $parent_node = NULL;
  /** @var Drupal\paragraphs\Entity\Paragraph $parent */
  $parent = $paragraph->getParentEntity();
  if ($parent !== NULL && $parent->getEntityType()->id() === 'paragraph') {
    $parent_node = _vagovclaro_get_node_parent($parent);
  }
  elseif ($parent !== NULL && $parent->getEntityType()->id() === 'node') {
    $parent_node = $parent;
  }
  return $parent_node;
}

/**
 * Prepares variables for inline_entity_form_entity_table form templates.
 *
 * Default template: inline-entity-form-entity-table.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function vagovclaro_preprocess_inline_entity_form_entity_table(array &$variables) {
  _vagovclaro_sort_and_alter_vetcenter_services($variables);
}

/**
 * Alter required vetcenter services IEF and sort.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function _vagovclaro_sort_and_alter_vetcenter_services(array &$variables) {
  $form = $variables['form'];
  if (strpos($form['#id'], 'edit-field-health-services-entities') === 0) {
    $entity_type = $form['#entity_type'];
    $fields = $form['#table_fields'];

    $header = [];

    // Add header columns for each field.
    $first = TRUE;
    foreach ($fields as $field_name => $field) {
      $column = [
        'data' => $field['label'],
        'class' => [
          'inline-entity-form-' . $entity_type . '-' . $field_name,
        ],
      ];
      // The first column gets a special class.
      if ($first) {
        $column['class'][] = 'ief-first-column-header';
        $first = FALSE;
      }
      $header[] = $column;
    }
    $header[] = t('Operations');

    // Build an array of entity rows for the table.
    $rows = [];
    foreach (Element::children($form) as $key) {
      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
      $entity = $form[$key]['#entity'];
      $row_classes = ['ief-row-entity'];
      $cells = [];
      // Add a special class to rows that have a form underneath, to allow
      // for additional styling.
      if (!empty($form[$key]['form'])) {
        $row_classes[] = 'ief-row-entity-form';
      }

      foreach ($fields as $field_name => $field) {
        if ($field['type'] == 'label') {
          $data = ['#markup' => $variables['form'][$key]['#label']];
        }
        elseif ($field['type'] == 'field' && $entity->hasField($field_name)) {
          $display_options = ['label' => 'hidden'];
          if (isset($field['display_options'])) {
            $display_options += $field['display_options'];
          }
          $data = $entity->get($field_name)->view($display_options);
        }
        elseif ($field['type'] == 'callback') {
          $arguments = [
            'entity' => $entity,
            'variables' => $variables,
          ];
          if (isset($field['callback_arguments'])) {
            $arguments = array_merge($arguments, $field['callback_arguments']);
          }
          $data = call_user_func_array($field['callback'], $arguments);
          if (!is_array($data)) {
            $data = ['#markup' => explode(' - ', $data)[1]];
          }
        }
        else {
          $data = ['#markup' => $variables['form'][$key]['#markup']];
        }

        $cells[$field_name] = array_merge($data, [
          '#wrapper_attributes' => [
            'class' => [
              'inline-entity-form-' . $entity_type . '-' . $field_name,
            ],
          ],
        ]);
      }

      // Add the buttons belonging to the "Operations" column,
      // when entity is not being displayed as a form.
      if (empty($form[$key]['form'])) {
        $cells['actions'] = $form[$key]['actions'];
      }
      // Create the row.
      $rows[] = $cells + ['#attributes' => ['class' => $row_classes]];
      // If current entity array specifies a form, output it in the next row.
      if (!empty($form[$key]['form'])) {
        // Turn our required and name values into a string that can be used for
        // sorting.
        $required_value = (string) $rows[$key]['req_optional']['#markup'] === 'Optional' ? 'z' : 'Required';
        $format_required_value = strtolower(str_replace(' ', '-', $required_value));
        $format_name_value = strtolower(str_replace(' ', '-', $cells['label']['#markup']));

        $row = [];
        $row[] = $form[$key]['form'] + [
          '#wrapper_attributes' => [
            'colspan' => count($fields) + 1,
          ],
        ];

        $rows[] = $row + [
          '#attributes' => [
            'class' => [
              'ief-row-form',
            ],
            'aria-vc-name' => [
              $format_required_value . '-' . $format_name_value,
            ],
            'no_striping' => TRUE,
          ],
        ];
      }
    }
    $variables['table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#attributes' => [
        'id' => 'ief-entity-table-' . $form['#id'],
        'class' => ['ief-entity-table'],
      ],
    ] + $rows;
  }
}

/**
 * Implements hook_preprocess_HOOK() for field_multiple_value_form.
 */
function vagovclaro_preprocess_field_multiple_value_form(&$variables) {
  if (!empty($variables['table']['#header']) && isset($variables['description']['content'])) {
    // Find description (help text) and move to header.
    // Div because some help text prints as multiple <p> tags.
    // @see paragraphs_preprocess_field_multiple_value_form()
    $variables['table']['#header'][0]['data']['description'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => $variables['description']['content'],
      '#attributes' => [
        'class' => ['form-item__description'],
      ],
    ];
    unset($variables['description']);
  }
}

/**
 * Implements hook_preprocess_page__node_type().
 */
function vagovclaro_preprocess_page__documentation_page(&$variables) {
  // Route handling for the search form in header. Move to va_gov_help_center.
  $route_match = \Drupal::routeMatch();
  $current_route = $route_match->getRouteName();

  switch ($current_route) {
    case 'entity.node.canonical':
      $variables['show_header_search'] = TRUE;
      break;

    case 'entity.node.edit_form':
    default:
      $variables['show_header_search'] = FALSE;
      break;
  }

  // Don't show header search on KB homepage, which has form visible lower.
  $nid = $route_match->getRawParameter('node');
  if ($nid == CMS_HELP_CENTER_HOMEPAGE_NID) {
    $variables['show_header_search'] = FALSE;
  }

  // Load the search form block and put in a variable for twig.
  $block = Block::load('vagovclaro_knowledge_base_search_form');
  $variables['search_block'] = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);
}

/**
 * Implements hook_preprocess_node__node_type().
 */
function vagovclaro_preprocess_node__documentation_page(&$variables) {
  // Creates about link. This function can probably move to va_gov_help_center.
  $variables['about'] = [
    '#type' => 'link',
    '#url' => Url::fromRoute('entity.node.canonical', ['node' => CMS_HELP_CENTER_ABOUT_NID]),
    '#title' => t('About'),
    '#attributes' => [
      'class' => ['link'],
      'hreflang' => ['en'],
      'lang' => ['en'],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function vagovclaro_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _vagovclaro_exposed_kb_search_block_form_alter($form);
  _vagovclaro_form_action_outline_buttons($form);
  _vagovclaro_form_cms_announcement_block($form);
}

/**
 * Alter hook for views exposed form knowledge base search block.
 *
 * Updates the form for searching knowledge base content to appear in the
 * header on most KB pages. Does not affect CMS homepage or search page
 * pending designs.
 *
 * @param array $form
 *   The exposed widget form array.
 */
function _vagovclaro_exposed_kb_search_block_form_alter(array &$form) {
  // Views exposed forms have a weird render chain, need this form alter.
  if ($form['#id'] === 'views-exposed-form-knowledge-base-search-results-knowledge-base-search-page') {
    $route_match = \Drupal::routeMatch();
    $current_route = $route_match->getRouteName();
    $node = $route_match->getParameter('node');
    $nid = ($node) ? $node->id() : 0;

    // Skip on /help or /help/search because block not shown in the header.
    // Loose check on the nid, comes back as a string compared to int.
    // CMS_HELP_CENTER_HOMEPAGE_NID set in va_gov_help_center.module.
    if ($current_route === 'view.knowledge_base_search_results.knowledge_base_search_page'
      || $nid == CMS_HELP_CENTER_HOMEPAGE_NID) {
      return;
    }

    // Class prints on the containing block not the form for views reasons.
    $form['#attributes']['class'][] = 'header-search-form';
    $form['keyword']['#title_display'] = 'invisible';
    $form['keyword']['#attributes']['placeholder'] = t('Search the knowledge base...');
    $form['keyword']['#attributes']['class'][] = 'form-element--extrasmall';
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
    $form['actions']['submit']['#attributes']['class'][] = 'button--small';
  }
}

/**
 * Alter hook for changing form action button styles.
 *
 * Only save is the primary action, rest get alternate button styles.
 *
 * @param array $form
 *   The exposed widget form array.
 */
function _vagovclaro_form_action_outline_buttons(array &$form) {
  if ($form['#theme'][0] === 'node_edit_form') {
    $form['actions']['delete']['#options']['attributes']['class'][] = 'button--outline';
    $form['actions']['save_continue']['#attributes']['class'][] = 'button--outline';
  }
  if ($form['#theme'] === 'confirm_form') {
    $form['actions']['cancel']['#attributes']['class'][] = 'button--outline';
  }
}

/**
 * Alter hook for changing the form in CMS announcement block.
 *
 * @param array $form
 *   The exposed widget form array.
 */
function _vagovclaro_form_cms_announcement_block(array &$form) {
  if ($form['#id'] === 'block-content-cms-announcement-form') {
    $form['info']['widget'][0]['value']['#description'] = t('Used for configuration settings only.');
    $form['info']['widget'][0]['value']['#title'] = t('Block name');
  }
}
