<?php

/**
 * @file
 * Vagovclaro.theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_html().
 */
function vagovclaro_preprocess_html(&$variables) {
  $is_admin = \Drupal::service('va_gov_user.user_perms')->hasAdminRole(TRUE) ? 'admin' : 'not-admin';
  $variables['attributes']['class'][] = 'role-' . $is_admin;

  // For css that is different per environment (admin toolbar color, etc.)
  $environment_name = getenv('CMS_ENVIRONMENT_TYPE');
  $variables['attributes']['class'][] = 'cms-' . $environment_name;
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function vagovclaro_theme_suggestions_page_alter(&$suggestions, $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function vagovclaro_preprocess_form_element(&$variables) {
  // Moves help text above inputs after labels for form elements.
  if (isset($variables['description_display']) && $variables['description_display'] !== 'invisible') {
    $variables['description_display'] = 'before';
  }
}

/**
 * Implements hook_preprocess_container().
 */
function vagovclaro_preprocess_container(&$variables) {
  // Adds help text style to descriptions in nested paragraph field.
  if (!empty($variables['attributes']['id']) && $variables['attributes']['id'] === 'edit-field-related-links-description') {
    $variables['attributes']['class'][] = 'form-item__description';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vagovclaro_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // This chunk of code can probably move to va_gov_login.
  $config = \Drupal::config('simplesamlphp_auth.settings');
  \Drupal::service('renderer')->addCacheableDependency($form, $config);
  if (!$config->get('activate') || !$config->get('login_link_show')) {
    return;
  }

  $form['simplesamlphp_auth_login_link'] = [
    '#type' => 'fieldset',
    '#title' => 'PIV login',
    '#title_display' => 'invisible',
    '#weight' => -1,
    '#attributes' => [
      'class' => ['piv-container', 'js-piv-container'],
    ],
  ];
  $form['simplesamlphp_auth_login_link']['link'] = [
    '#title' => 'Login with PIV.',
    '#type' => 'link',
    '#url' => Url::fromRoute('simplesamlphp_auth.saml_login'),
    '#attributes' => [
      'title' => 'Follow this link to login using your PIV or other smartcard.',
      'class' => ['simplesamlphp-auth-login-link', 'button', 'button--primary'],
    ],
    '#suffix' => '<a href="/help">Get help logging in</a>',
  ];

  // Modify existing text and add classes for JS toggle & styles.
  $form['#attributes']['class'][] = 'piv-login';
  $form['name']['#description'] = 'Your VA email address';
  $form['name']['#prefix'] = '<div class="password-prefix form-item__description">Use this back up login method when PIV isnâ€™t working. Learn more: <a href="">Logging in to the CMS.</a></div>';
  $form['name']['#wrapper_attributes']['class'][] = 'js-login-username';
  $form['pass']['#description'] = 'The password assigned to you by the CMS Help Desk.';
  $form['pass']['#wrapper_attributes']['class'][] = 'js-login-password';
  $form['actions']['submit']['#attributes']['class'][] = 'js-login-submit';
  $form['actions']['submit']['#attributes']['class'][] = 'button--primary';

  // Build toggle button to switch between PIV & User/Pass.
  $form['actions']['toggle'] = [
    '#type' => 'button',
    '#button_type' => 'toggle',
    '#attributes' => [
      'class' => [
        'link',
        'va-login-toggle',
        'js-va-login-toggle',
      ],
    ],
    '#value' => 'Login with password',
  ];

  // Attach JS library for toggle button.
  $form['#attached']['library'][] = 'vagovclaro/login-toggle';
}

/**
 * Implements hook_preprocess_page__node_type().
 */
function vagovclaro_preprocess_page__documentation_page(&$variables) {
  // Route handling for the search form in header. Move to va_gov_help_center.
  $route_match = \Drupal::routeMatch();
  $current_route = $route_match->getRouteName();

  switch ($current_route) {
    case 'entity.node.canonical':
      $variables['show_header_search'] = TRUE;
      break;

    case 'entity.node.edit_form':
    default:
      $variables['show_header_search'] = FALSE;
      break;
  }

  // Don't show header search on KB homepage, which has form visible lower.
  $node = $route_match->getParameter('node');
  $nid = $node->id();
  if ($nid == CMS_HELP_CENTER_HOMEPAGE_NID) {
    $variables['show_header_search'] = FALSE;
  }

  // Load the search form block and put in a variable for twig.
  $block = Block::load('vagovclaro_knowledge_base_search_form');
  $variables['search_block'] = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);
}

/**
 * Implements hook_preprocess_node__node_type().
 */
function vagovclaro_preprocess_node__documentation_page(&$variables) {
  // Creates about link. This function can probably move to va_gov_help_center.
  $variables['about'] = [
    '#type' => 'link',
    '#url' => Url::fromRoute('entity.node.canonical', ['node' => CMS_HELP_CENTER_ABOUT_NID]),
    '#title' => t('About'),
    '#attributes' => [
      'class' => ['link'],
      'hreflang' => ['en'],
      'lang' => ['en'],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function vagovclaro_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _vagovclaro_exposed_kb_search_block_form_alter($form);
}

/**
 * Alter hook for views exposed form knowledge base search block.
 *
 * Updates the form for searching knowledge base content to appear in the
 * header on most KB pages. Does not affect CMS homepage or search page
 * pending designs.
 *
 * @param array $form
 *   The exposed widget form array.
 */
function _vagovclaro_exposed_kb_search_block_form_alter(array &$form) {
  // Views exposed forms have a weird render chain, need this form alter.
  if ($form['#id'] === 'views-exposed-form-knowledge-base-search-results-knowledge-base-search-page') {
    $route_match = \Drupal::routeMatch();
    $current_route = $route_match->getRouteName();
    $node = $route_match->getParameter('node');
    $nid = ($node) ? $node->id() : 0;

    // Skip on /help or /help/search because block not shown in the header.
    // Loose check on the nid, comes back as a string compared to int.
    // CMS_HELP_CENTER_HOMEPAGE_NID set in va_gov_help_center.module.
    if ($current_route === 'view.knowledge_base_search_results.knowledge_base_search_page'
      || $nid == CMS_HELP_CENTER_HOMEPAGE_NID) {
      return;
    }

    // Class prints on the containing block not the form for views reasons.
    $form['#attributes']['class'][] = 'header-search-form';
    $form['keyword']['#title_display'] = 'invisible';
    $form['keyword']['#attributes']['placeholder'] = t('Search the knowledge base...');
    $form['keyword']['#attributes']['class'][] = 'form-element--extrasmall';
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
    $form['actions']['submit']['#attributes']['class'][] = 'button--small';
  }
}
