<?php

/**
 * @file
 * Vagovadmin.theme.
 */

use Drupal\Core\Render\Element;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_html().
 */
function vagovadmin_preprocess_html(&$variables) {
  $is_admin = \Drupal::service('va_gov_user.user_perms')->hasAdminRole(TRUE) ? 'admin' : 'not-admin';
  $variables['attributes']['class'][] = 'role-' . $is_admin;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vagovadmin_theme_suggestions_paragraph_alter(&$suggestions, $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->bundle() === 'collapsible_panel_item' || $paragraph->bundle() === 'q_a') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && $node instanceof NodeInterface) {
      $suggestions[] = 'paragraph__' . $node->bundle() . '__' . $paragraph->bundle();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vagovadmin_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $node_parent = _vagovadmin_get_node_parent($paragraph);
  // If this paragraph belongs to a 'benefits detail page'.
  if (!empty($node_parent) && $node_parent->bundle() === 'page') {
    // Set the paragraph name.
    $variables['paragraph_name'] = $paragraph->type->entity->label();
  }

  if ($paragraph->getType() === 'q_a') {
    $variables['as_accordion'] = FALSE;
    if ($parent = $paragraph->getParentEntity()) {
      if ($parent->bundle() === 'q_a_section') {
        $variables['as_accordion'] = $parent->field_accordion_display->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vagovadmin_preprocess_field(&$variables) {
  $element = $variables['element'];
  $field_defs = Drupal::service('entity_field.manager')
    ->getFieldDefinitions($element['#entity_type'], $element['#bundle']);
  /** @var \Drupal\Core\Field\BaseFieldDefinition $field_def */
  $field_def = $field_defs[$element['#field_name']];
  $variables['description'] = str_replace('"', "'", $field_def->getDescription());
}

/**
 * Return the node that the paragraph belongs to.
 *
 * If the paragraph's parent is a paragraph, recurse up the tree until you
 * reach a non-paragraph entity.
 *
 * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
 *   The paragraph to find the parent of.
 *
 * @return \Drupal\node\Entity\Node|null
 *   If the paragraph is attached to a node, return the node, otherwise NULL.
 */
function _vagovadmin_get_node_parent(Paragraph $paragraph) {
  $parent_node = NULL;
  /** @var Drupal\paragraphs\Entity\Paragraph $parent */
  $parent = $paragraph->getParentEntity();
  if ($parent !== NULL && $parent->getEntityType()->id() === 'paragraph') {
    $parent_node = _vagovadmin_get_node_parent($parent);
  }
  elseif ($parent !== NULL && $parent->getEntityType()->id() === 'node') {
    $parent_node = $parent;
  }
  return $parent_node;
}

/**
 * Prepares variables for inline_entity_form_entity_table form templates.
 *
 * Default template: inline-entity-form-entity-table.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function vagovadmin_preprocess_inline_entity_form_entity_table(array &$variables) {
  vagovadmin_sort_and_alter_vetcenter_services($variables);
}

/**
 * Alter required vetcenter services IEF and sort.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function vagovadmin_sort_and_alter_vetcenter_services(array &$variables) {
  $form = $variables['form'];
  if (strpos($form['#id'], 'edit-field-health-services-entities') === 0) {
    $entity_type = $form['#entity_type'];
    $fields = $form['#table_fields'];

    $header = [];

    // Add header columns for each field.
    $first = TRUE;
    foreach ($fields as $field_name => $field) {
      $column = [
        'data' => $field['label'],
        'class' => [
          'inline-entity-form-' . $entity_type . '-' . $field_name,
        ],
      ];
      // The first column gets a special class.
      if ($first) {
        $column['class'][] = 'ief-first-column-header';
        $first = FALSE;
      }
      $header[] = $column;
    }
    $header[] = t('Operations');

    // Build an array of entity rows for the table.
    $rows = [];
    foreach (Element::children($form) as $key) {
      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
      $entity = $form[$key]['#entity'];
      $row_classes = ['ief-row-entity'];
      $cells = [];
      // Add a special class to rows that have a form underneath, to allow
      // for additional styling.
      if (!empty($form[$key]['form'])) {
        $row_classes[] = 'ief-row-entity-form';
      }

      foreach ($fields as $field_name => $field) {
        if ($field['type'] == 'label') {
          $data = ['#markup' => $variables['form'][$key]['#label']];
        }
        elseif ($field['type'] == 'field' && $entity->hasField($field_name)) {
          $display_options = ['label' => 'hidden'];
          if (isset($field['display_options'])) {
            $display_options += $field['display_options'];
          }
          $data = $entity->get($field_name)->view($display_options);
        }
        elseif ($field['type'] == 'callback') {
          $arguments = [
            'entity' => $entity,
            'variables' => $variables,
          ];
          if (isset($field['callback_arguments'])) {
            $arguments = array_merge($arguments, $field['callback_arguments']);
          }
          $data = call_user_func_array($field['callback'], $arguments);
          if (!is_array($data)) {
            $data = ['#markup' => explode(' - ', $data)[1]];
          }
        }
        else {
          $data = ['#markup' => $variables['form'][$key]['#markup']];
        }

        $cells[$field_name] = array_merge($data, [
          '#wrapper_attributes' => [
            'class' => [
              'inline-entity-form-' . $entity_type . '-' . $field_name,
            ],
          ],
        ]);
      }

      // Add the buttons belonging to the "Operations" column,
      // when entity is not being displayed as a form.
      if (empty($form[$key]['form'])) {
        $cells['actions'] = $form[$key]['actions'];
      }
      // Create the row.
      $rows[] = $cells + ['#attributes' => ['class' => $row_classes]];
      // If current entity array specifies a form, output it in the next row.
      if (!empty($form[$key]['form'])) {
        // Turn our required and name values into a string that can be used for
        // sorting.
        $required_value = (string) $rows[$key]['req_optional']['#markup'] === 'Optional' ? 'z' : 'Required';
        $format_required_value = strtolower(str_replace(' ', '-', $required_value));
        $format_name_value = strtolower(str_replace(' ', '-', $cells['label']['#markup']));

        $row = [];
        $row[] = $form[$key]['form'] + [
          '#wrapper_attributes' => [
            'colspan' => count($fields) + 1,
          ],
        ];

        $rows[] = $row + [
          '#attributes' => [
            'class' => [
              'ief-row-form',
            ],
            'aria-vc-name' => [
              $format_required_value . '-' . $format_name_value,
            ],
            'no_striping' => TRUE,
          ],
        ];
      }
    }
    $variables['table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#attributes' => [
        'id' => 'ief-entity-table-' . $form['#id'],
        'class' => ['ief-entity-table'],
      ],
    ] + $rows;
  }
}
