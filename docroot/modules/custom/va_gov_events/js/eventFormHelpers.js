/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal) {
  var registrationRequiredBool = document.getElementById("edit-field-event-registrationrequired-value");
  var includeRegistrationsBool = document.getElementById("edit-field-include-registration-info-value");
  var ctaSelect = document.getElementById("edit-field-event-cta");
  var fieldLinkWrapper = document.getElementById("edit-field-link-wrapper");
  var fieldLinkInput = document.getElementById("edit-field-link-0-uri");
  var fieldLinkWrapperLabel = document.querySelector("#edit-field-link-wrapper label");
  var fieldCtaEmailInput = document.getElementById("edit-field-cta-email-0-value");
  var fieldCtaEmailWrapper = document.getElementById("edit-field-cta-email-wrapper");
  var fieldCtaEmailWrapperLabel = document.querySelector("#edit-field-cta-email-wrapper label");
  var fieldCtaHowToSignUp = document.getElementById("edit-field-how-to-sign-up");
  var fieldCtaHowToSignUpWrapper = document.getElementById("edit-field-how-to-sign-up-wrapper");
  var fieldCtaHowToSignUpLabel = document.querySelector("#edit-field-how-to-sign-up-wrapper label");
  var fieldLocationTypeFacility = document.getElementById("edit-field-location-type-facility");
  var fieldLocationTypeNonFacility = document.getElementById("edit-field-location-type-non-facility");
  var includeLocationItemsRadios = document.getElementById("edit-field-location-type");
  var fieldLocationHumanreadable = document.getElementById("edit-field-location-humanreadable-0-value");
  var fieldLocationHumanreadableWrapper = document.getElementById("edit-field-location-humanreadable-wrapper");
  var targetLocationElements = document.querySelectorAll("#edit-field-facility-location-wrapper, #edit-field-url-of-an-online-event-wrapper, #edit-field-location-humanreadable-wrapper, #edit-field-address-wrapper");
  var fieldFacilityLocationWrapper = document.getElementById("edit-field-facility-location-wrapper");
  var fieldFacilityLocation = document.getElementById("edit-field-facility-location-0-target-id");
  var fieldLocationTypeOnline = document.getElementById("edit-field-location-type-online");
  var fieldAddressWrapper = document.getElementById("edit-field-address-wrapper");
  var fieldUrlOfOnlineEvent = document.getElementById("edit-field-url-of-an-online-event-0-uri");
  var fieldUrlOfOnlineEventWrapper = document.getElementById("edit-field-url-of-an-online-event-wrapper");
  var fieldAddressLine1 = document.getElementById("edit-field-address-0-address-address-line1");
  var fieldAddressLine1Label = document.querySelector("label[for='edit-field-address-0-address-address-line1']");
  var fieldAddressLine2 = document.getElementById("edit-field-address-0-address-address-line2");
  var fieldAddressLocality = document.getElementById("edit-field-address-0-address-locality");
  var fieldAddressLocalityLabel = document.querySelector("label[for='edit-field-address-0-address-locality']");
  var fieldAddressAdminArea = document.getElementById("edit-field-address-0-address-administrative-area");
  var fieldAddressAdminAreaLabel = document.querySelector("label[for='edit-field-address-0-address-administrative-area']");
  var targetRegistrationElements = document.querySelectorAll(".centralized.reduced-padding, #edit-field-event-registrationrequired-wrapper, #edit-field-event-cta-wrapper, #edit-group-registration-link, #group-registration-link, #edit-field-additional-information-abo-wrapper");
  var toggleCtaInputRequired = function toggleCtaInputRequired(label, wrapper, input) {
    var required = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var addRemove = required ? "add" : "remove";
    wrapper.style.display = required ? "block" : "none";
    input.required = required ? "required" : "";
    label.classList[addRemove]("js-form-required", "form-required");
  };
  var toggleAllCtaInputsRequired = function toggleAllCtaInputsRequired() {
    var required = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    toggleCtaInputRequired(fieldLinkWrapperLabel, fieldLinkWrapper, fieldLinkInput, required);
    toggleCtaInputRequired(fieldCtaEmailWrapperLabel, fieldCtaEmailWrapper, fieldCtaEmailInput, required);
    toggleCtaInputRequired(fieldCtaHowToSignUpLabel, fieldCtaHowToSignUpWrapper, fieldCtaHowToSignUp, required);
  };
  var emptyAllCtaInputs = function emptyAllCtaInputs() {
    fieldCtaEmailInput.value = "";
    fieldLinkInput.value = "";
    fieldCtaHowToSignUp.value = "_none";
  };
  var toggleRegistrationElements = function toggleRegistrationElements() {
    var toggleVal = !!includeRegistrationsBool.checked;
    var elementDisplayStyle = "block";
    if (!toggleVal) {
      fieldLinkInput.value = "";
      fieldCtaEmailInput.value = "";
      ctaSelect.value = "_none";
      elementDisplayStyle = "none";
      registrationRequiredBool.checked = false;
      toggleAllCtaInputsRequired(false);
    }
    targetRegistrationElements.forEach(function (element) {
      element.style.display = elementDisplayStyle;
    });
  };
  var requireCTA = function requireCTA() {
    fieldLinkWrapper.style.display = "none";
    fieldCtaEmailWrapper.style.display = "none";
    fieldCtaHowToSignUpWrapper.style.display = "none";
    if (ctaSelect.value !== "_none") {
      if (fieldCtaEmailInput.value.length > 0) {
        toggleCtaInputRequired(fieldCtaEmailWrapperLabel, fieldCtaEmailWrapper, fieldCtaEmailInput, true);
        toggleCtaInputRequired(fieldCtaHowToSignUpLabel, fieldCtaHowToSignUpWrapper, fieldCtaHowToSignUp, true);
        fieldCtaHowToSignUp.value = "email";
      } else if (fieldLinkInput.value.length > 0) {
        toggleCtaInputRequired(fieldLinkWrapperLabel, fieldLinkWrapper, fieldLinkInput, true);
        toggleCtaInputRequired(fieldCtaHowToSignUpLabel, fieldCtaHowToSignUpWrapper, fieldCtaHowToSignUp, true);
        fieldCtaHowToSignUp.value = "url";
      } else {
        toggleCtaInputRequired(fieldCtaHowToSignUpLabel, fieldCtaHowToSignUpWrapper, fieldCtaHowToSignUpWrapper);
      }
    }
    ctaSelect.addEventListener("change", function (e) {
      emptyAllCtaInputs();
      toggleAllCtaInputsRequired(false);
      if (e.target.value !== "_none") {
        toggleCtaInputRequired(fieldCtaHowToSignUpLabel, fieldCtaHowToSignUpWrapper, fieldCtaHowToSignUp);
      }
    });
    fieldCtaHowToSignUp.addEventListener("change", function (e) {
      switch (e.target.value) {
        case "url":
          fieldCtaEmailInput.value = "";
          toggleCtaInputRequired(fieldCtaEmailWrapperLabel, fieldCtaEmailWrapper, fieldCtaEmailInput, false);
          toggleCtaInputRequired(fieldLinkWrapperLabel, fieldLinkWrapper, fieldLinkInput);
          break;
        case "email":
          fieldLinkInput.value = "";
          toggleCtaInputRequired(fieldLinkWrapperLabel, fieldLinkWrapper, fieldLinkInput, false);
          toggleCtaInputRequired(fieldCtaEmailWrapperLabel, fieldCtaEmailWrapper, fieldCtaEmailInput);
          break;
        default:
          toggleCtaInputRequired(fieldLinkWrapperLabel, fieldLinkWrapper, fieldLinkInput, false);
          toggleCtaInputRequired(fieldCtaEmailWrapperLabel, fieldCtaEmailWrapper, fieldCtaEmailInput, false);
          fieldLinkInput.value = "";
          fieldCtaEmailInput.value = "";
          break;
      }
    });
  };
  var toggleAddressRequiredFields = function toggleAddressRequiredFields(enableDisable, addRemove) {
    if (fieldAddressLine1) {
      fieldAddressLine1.required = enableDisable;
    }
    if (fieldAddressLine1Label) {
      fieldAddressLine1Label.classList[addRemove]("form-required");
    }
    if (fieldAddressLocality) {
      fieldAddressLocality.required = enableDisable;
    }
    if (fieldAddressLocalityLabel) {
      fieldAddressLocalityLabel.classList[addRemove]("form-required");
    }
    if (fieldAddressAdminArea) {
      fieldAddressAdminArea.required = enableDisable;
    }
    if (fieldAddressAdminAreaLabel) {
      fieldAddressAdminAreaLabel.classList[addRemove]("form-required");
    }
  };
  var toggleLocationElements = function toggleLocationElements() {
    targetLocationElements.forEach(function (element) {
      element.style.display = "none";
    });
    toggleAddressRequiredFields(false, "remove");
    if (fieldLocationTypeFacility.checked) {
      fieldFacilityLocationWrapper.style.display = "block";
      fieldLocationHumanreadableWrapper.style.display = "block";
      fieldUrlOfOnlineEvent.value = "";
      fieldAddressLine1.value = "";
      fieldAddressLine2.value = "";
      fieldAddressLocality.value = "";
      fieldAddressAdminArea.value = "";
    }
    if (fieldLocationTypeNonFacility.checked) {
      fieldLocationHumanreadableWrapper.style.display = "block";
      fieldAddressWrapper.style.display = "block";
      toggleAddressRequiredFields(true, "add");
      fieldUrlOfOnlineEvent.value = "";
      fieldFacilityLocation.value = "";
    }
    if (fieldLocationTypeOnline.checked) {
      fieldUrlOfOnlineEventWrapper.style.display = "block";
      fieldAddressLine1.value = "";
      fieldAddressLine2.value = "";
      fieldAddressLocality.value = "";
      fieldAddressAdminArea.value = "";
      fieldFacilityLocation.value = "";
      fieldLocationHumanreadable.value = "";
    }
  };
  var operate = function operate() {
    requireCTA();
    includeRegistrationsBool.addEventListener("click", function () {
      toggleRegistrationElements();
    });
    toggleRegistrationElements();
    includeLocationItemsRadios.addEventListener("change", function () {
      toggleLocationElements();
    });
    toggleLocationElements();
  };
  Drupal.behaviors.vaGovEventFormHelpers = {
    attach: function attach() {
      operate();
    }
  };
})(Drupal);