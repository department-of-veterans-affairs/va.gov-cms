/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function (Drupal) {
  Drupal.behaviors.smartDateRecurringInteractions = {
    attach: function attach() {
      var dateFieldHandler = function dateFieldHandler() {
        var dateFields = [document.getElementById("edit-field-datetime-range-timezone-0-time-wrapper-value-date"), document.getElementById("edit-field-datetime-range-timezone-0-time-wrapper-end-value-date"), document.getElementById("edit-field-datetime-range-timezone-0-repeat-end-date")];
        var timeFields = [document.getElementById("edit-field-datetime-range-timezone-0-time-wrapper-value-time"), document.getElementById("edit-field-datetime-range-timezone-0-time-wrapper-end-value-time")];
        var today = new Date().toLocaleDateString();
        dateFields.forEach(function (element) {
          element.title = "Date (e.g. " + today + ")";
        });
        timeFields.forEach(function (element) {
          element.title = "Time (e.g. 10:00 AM)";
        });

        var getYearMonthDay = function getYearMonthDay() {
          var increment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "end";

          var dateObj = new Date();
          var month = dateObj.getUTCMonth() + 1;
          var formattedMonth = month.toString().padStart(2, "0");
          var day = dateObj.getUTCDate();
          var year = increment === "end" ? dateObj.getUTCFullYear() + 1 : dateObj.getUTCFullYear() - 1;
          return {
            full: year + "-" + formattedMonth + "-" + day,
            year: dateObj.getUTCFullYear(),
            maxyear: dateObj.getUTCFullYear() + 1,
            month: month,
            day: day
          };
        };

        var limitDateRangeInputOnKeyUp = function limitDateRangeInputOnKeyUp(e) {
          var inputDate = e.srcElement.value.split("-");

          var _getYearMonthDay = getYearMonthDay(),
              maxyear = _getYearMonthDay.maxyear;

          if (inputDate[0] !== undefined && inputDate[1] !== undefined && inputDate[2] !== undefined && inputDate[0] >= 2 && inputDate[0] > maxyear) {
            e.srcElement.value = maxyear + "-" + inputDate[1] + "-" + inputDate[2];
            if (e.srcElement.id === "edit-field-datetime-range-timezone-0-time-wrapper-value-date") {
              document.getElementById("edit-field-datetime-range-timezone-0-time-wrapper-end-value-date").value = maxyear + "-" + inputDate[1] + "-" + inputDate[2];
            }
          }
        };

        dateFields.map(function (item) {
          item.min = getYearMonthDay("start").full;
          item.max = getYearMonthDay("end").full;
          item.addEventListener("keyup", limitDateRangeInputOnKeyUp);
          return item;
        });
      };

      var checkInstanceBox = function checkInstanceBox() {
        if (document.getElementById("edit-field-datetime-range-timezone-0-manage-instances")) {
          document.getElementById("edit-field-datetime-range-timezone-0-make-recurring").checked = true;
        }
      };

      var hideNoneOption = function hideNoneOption() {
        var recurringToggle = document.getElementById("edit-field-datetime-range-timezone-0-make-recurring");
        if (recurringToggle) {
          recurringToggle.addEventListener("click", function () {
            var options = document.querySelectorAll("#edit-field-datetime-range-timezone-0-repeat option");
            options[0].style.display = "none";
            if (recurringToggle.checked === false) {
              options[0].selected = true;
            } else {
              options[1].selected = true;
            }
          });
        }
      };

      var createFauxInstancesButton = function createFauxInstancesButton() {
        if (!document.getElementById("edit-field-datetime-range-timezone-0-manage-instances") && !document.getElementById("manage-instances-faux-button")) {
          var fauxButton = document.createElement("button");
          fauxButton.innerHTML = "Edit event series";
          fauxButton.disabled = true;
          fauxButton.id = "manage-instances-faux-button";
          fauxButton.classList.add("button", "button--small", "manage-instances", "use-ajax");
          var fauxButtonSpan = document.createElement("span");
          fauxButtonSpan.innerHTML = "Save changes first before editing series";
          fauxButtonSpan.id = "manage-instances-faux-button-span";
          document.getElementById("recurring-items-reveal-wrap").before(fauxButton);
          document.getElementById("manage-instances-faux-button").after(fauxButtonSpan);
        }
      };

      var recurringToggles = document.querySelectorAll(".make-recurring-toggle");
      var resetWrapDisplay = function resetWrapDisplay(array) {
        array.forEach(function (element) {
          element.style.display = "none";
        });
      };

      recurringToggles[0].parentElement.after(document.getElementById("recurring-items-reveal-wrap"));

      var wrapDisplayHandler = function wrapDisplayHandler(value, allWrapsArray, daysWrap, advancedWhichRepeatWrap) {
        resetWrapDisplay(allWrapsArray);
        switch (value) {
          case "WEEKLY":
            daysWrap.style.display = "block";
            break;
          case "MONTHLY":
            advancedWhichRepeatWrap.style.display = "block";
            break;

          default:
            break;
        }
      };
      var recurringWatchers = function recurringWatchers() {
        checkInstanceBox();
        hideNoneOption();
        dateFieldHandler();
        createFauxInstancesButton();
        recurringToggles.forEach(function (toggle) {
          var daysWrap = document.getElementById("edit-field-datetime-range-timezone-0-repeat-advanced-byday--wrapper");
          var advancedWhichRepeatWrap = document.getElementById("repeat-on-the-wrap");
          var allWrapsArray = [daysWrap, advancedWhichRepeatWrap];

          toggle.addEventListener("click", recurringWatchers);
          if (document.getElementById("edit-field-datetime-range-timezone-manage-instances")) {
            toggle.checked = true;
            toggle.disabled = true;
          }

          if (toggle.checked) {
            document.getElementById("recurring-items-reveal-wrap").style.display = "block";
          } else {
            document.getElementById("recurring-items-reveal-wrap").style.display = "none";
          }

          var recurrenceSelectorType = document.getElementById("edit-field-datetime-range-timezone-0-repeat");

          wrapDisplayHandler(recurrenceSelectorType.value, allWrapsArray, daysWrap, advancedWhichRepeatWrap);

          recurrenceSelectorType.addEventListener("change", function (e) {
            wrapDisplayHandler(e.target.value, allWrapsArray, daysWrap, advancedWhichRepeatWrap);
          });
        });
      };
      window.addEventListener("DOMContentLoaded", recurringWatchers);
    }
  };
})(Drupal);