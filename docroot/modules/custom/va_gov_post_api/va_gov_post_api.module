<?php

/**
 * @file
 * Contains post_api.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\va_gov_facilities\FacilityOps;

/**
 * Implements hook_entity_insert().
 *
 * Queues new items for sync.
 */
function va_gov_post_api_entity_insert(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    _va_gov_post_api_add_facility_to_queue($entity);
    _va_gov_post_api_add_facility_service_to_queue($entity);
  }
  elseif ($entity instanceof TermInterface) {
    _va_gov_post_api_add_facility_service_to_queue_due_to_term_change($entity);
  }
}

/**
 * Implements hook_entity_update().
 *
 * Queues updated items for sync.
 */
function va_gov_post_api_entity_update(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    _va_gov_post_api_add_facility_to_queue($entity);
    _va_gov_post_api_add_facility_service_to_queue($entity);
  }
  elseif ($entity instanceof TermInterface) {
    _va_gov_post_api_add_facility_service_to_queue_due_to_term_change($entity);
  }

}

/**
 * Adds facility data to Post API queue.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 *
 * @return int
 *   The count of the number of items queued.
 */
function _va_gov_post_api_add_facility_to_queue(NodeInterface $node) {
  if (FacilityOps::isFacilityWithStatus($node)) {
    return Drupal::service('va_gov_post_api.queue_facility_status_updates')->queueFacilityStatus($node);
  }
  elseif (FacilityOps::isFacilityWithoutStatus($node)) {
    // These don't have editable status, but we also need to push.
    return Drupal::service('va_gov_post_api.queue_facility_without_status_updates')->queueFacility($node);
  }
  elseif ($node->bundle() === 'health_care_region_page') {
    return Drupal::service('va_gov_post_api.queue_facility_status_updates')->queueSystemRelatedFacilities($node);
  }

  return 0;
}

/**
 * Adds facility service data to Post API queue to update Lighthouse.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 * @param bool $force_push
 *   Sets whether the push is a force push. False, by default.
 *
 * @return int
 *   The count of the number of items queued.
 */
function _va_gov_post_api_add_facility_service_to_queue(NodeInterface $node, bool $force_push = FALSE) {
  switch ($node->bundle()) {
    case 'health_care_local_health_service':
      return Drupal::service('va_gov_post_api.queue_vamc_service_updates')->queueFacilityService($node, $force_push);

    case 'regional_health_care_service_des':
      return Drupal::service('va_gov_post_api.queue_vamc_service_updates')->queueSystemRelatedServices($node);

    case 'vet_center_facility_health_servi':
      return Drupal::service('va_gov_post_api.queue_vet_center_service_updates')->queueFacilityService($node);

    default:
      return 0;
  }
}

/**
 * Adds facility service data to Post API queue if service term changes.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   Term entity.
 *
 * @return int
 *   The count of the number of items queued.
 */
function _va_gov_post_api_add_facility_service_to_queue_due_to_term_change(TermInterface $term):int {
  $total_nids = 0;
  if ($term->bundle() === 'health_care_service_taxonomy') {
    $total_nids += Drupal::service('va_gov_post_api.queue_vamc_service_updates')->queueServiceTermRelatedServices($term);
    $total_nids += Drupal::service('va_gov_post_api.queue_vet_center_service_updates')->queueServiceTermRelatedServices($term);
    return $total_nids;
  }

  return 0;
}
