<?php

/**
 * @file
 * Contains post_api.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\va_gov_facilities\FacilityOps;

/**
 * Implements hook_help().
 */
function va_gov_post_api_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.va_gov_post_api':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_entity_insert().
 *
 * Queues new items for sync.
 */
function va_gov_post_api_entity_insert(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    _va_gov_post_api_add_facility_to_queue($entity);
    _va_gov_post_api_add_facility_service_to_queue($entity);
  }
}

/**
 * Implements hook_entity_update().
 *
 * Queues updated items for sync.
 */
function va_gov_post_api_entity_update(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    _va_gov_post_api_add_facility_to_queue($entity);
    _va_gov_post_api_add_facility_service_to_queue($entity);
  }
}

/**
 * Adds facility data to Post API queue.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Entity.
 *
 * @return int
 *   The count of the number of items queued.
 */
function _va_gov_post_api_add_facility_to_queue(NodeInterface $node) {
  if (FacilityOps::isFacilityWithStatus($node)) {
    return Drupal::service('va_gov_post_api.queue_facility_status_updates')->queueFacilityStatus($node);
  }
  elseif (FacilityOps::isFacilityWithoutStatus($node)) {
    // These don't have editable status, but we also need to push.
    return Drupal::service('va_gov_post_api.queue_facility_without_status_updates')->queueFacility($node);
  }
  elseif ($node->bundle() === 'health_care_region_page') {
    return Drupal::service('va_gov_post_api.queue_facility_status_updates')->queueSystemRelatedFacilities($node);
  }

  return 0;
}

/**
 * Adds facility service data to Post API queue to update Lighthouse.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node.
 *
 * @return int
 *   The count of the number of items queued.
 */
function _va_gov_post_api_add_facility_service_to_queue(NodeInterface $node) {
  if ($node->bundle() === 'health_care_local_health_service') {
    return Drupal::service('va_gov_post_api.queue_service_updates')->queueFacilityService($node);
  }
  elseif ($node->bundle() === 'health_care_service_taxonomy') {
    return Drupal::service('va_gov_post_api.queue_service_updates')->queueServiceTermRelatedServices($node);
  }
  elseif ($node->bundle() === 'regional_health_care_service_des') {
    return Drupal::service('va_gov_post_api.queue_service_updates')->queueSystemRelatedServices($node);
  }

  return 0;
}
