<?php

/**
 * @file
 * Contains post_api.module.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_insert().
 *
 * Queues new items for sync.
 */
function post_api_entity_insert(EntityInterface $entity) {
  _post_api_add_facility_to_queue($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Queues updated items for sync.
 */
function post_api_entity_update(EntityInterface $entity) {
  _post_api_add_facility_to_queue($entity);
}

/**
 * Adds facility data to Post API queue.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 */
function _post_api_add_facility_to_queue(EntityInterface $entity) {
  $facility_types = [
    'health_care_local_facility',
    'nca_facility',
    'vba_facility',
    'vet_center',
  ];

  if ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $facility_types)) {
    $queue = Drupal::service('post_api.add_to_queue');

    $facility_id = $entity->hasField('field_facility_locator_api_id') ? $entity->field_facility_locator_api_id->value : NULL;

    $data['nid'] = $entity->id();

    // Queue item's Unique ID.
    $data['uid'] = $facility_id ? 'facility_status_' . $facility_id : NULL;

    // Set a key based on which the endpoint will be
    // defined during queue execution.
    $data['endpoint_path'] = $facility_id ? '/services/va_facilities/v0/facilities/' . $facility_id . '/cms-overlay' : NULL;

    // Set payload. Default payload provided by this module is empty.
    // See README.md
    // Entity fields (updated and original) can be compared and processed in
    // order to structure the payload array.
    $data['payload'] = _post_api_get_facility_payload($entity);

    // Only add to queue if payload is not empty.
    // If its empty, it means that there is no new information to send to
    // endpoint.
    if (!empty($data['payload']) && $facility_id) {
      $config = \Drupal::config('va_gov_post_api.settings');

      // If bypass_data_check setting is enabled, do not dedupe, just force.
      $dedupe = !empty($config->get('bypass_data_check')) ? FALSE : TRUE;
      $queue->addToQueue($data, $dedupe);
    }
    elseif (empty($facility_id)) {
      // Log error on empty Facility Locator API ID.
      $message = sprintf('Post API: attempted to add an item with NID %d to queue, but it had no Facility API ID.', $entity->id());
      Drupal::logger('va_gov_post_api')->error($message);
    }
  }
}

/**
 * Compose and return payload array.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 *
 * @return array
 *   Payload array.
 */
function _post_api_get_facility_payload(EntityInterface $entity) {
  // Default payload is an empty array.
  $payload = [];

  // Current field values.
  $operating_status = $entity->field_operating_status_facility->value;
  $additional_info = $entity->field_operating_status_more_info->value;

  $config = \Drupal::config('va_gov_post_api.settings');
  $bypass_data_check = $config->get('bypass_data_check');

  if (isset($entity->original) && ($entity->original instanceof EntityInterface) && (!$bypass_data_check)) {
    // Entity is updated.
    $original_operating_status = $entity->original->field_operating_status_facility->value;
    $original_additional_info = $entity->original->field_operating_status_more_info->value;

    if ($operating_status !== $original_operating_status || $additional_info !== $original_additional_info) {
      // One of the status values changed. Form the payload.
      $payload = [
        'operating_status' => [
          'code' => strtoupper($operating_status),
          'additional_info' => $additional_info,
        ],
      ];
    }
  }
  else {
    // Entity is new. Form the payload.
    $payload = [
      'operating_status' => [
        'code' => strtoupper($operating_status),
        'additional_info' => $additional_info,
      ],
    ];
  }

  return $payload;
}
