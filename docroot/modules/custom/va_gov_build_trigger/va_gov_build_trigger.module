<?php

/**
 * @file
 * Contains va_gov_build_trigger.module.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\va_gov_build_trigger\Form\PreviewForm;

/**
 * Trigger a web rebuild whenever a node is updated.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node being updated.
 */
function va_gov_build_trigger_node_update(NodeInterface $node) {
  if (function_exists('devshop_tasks_api_create')) {
    devshop_tasks_api_create('vabuild');
  }
  // Trigger a frontend build for certain content types.
  $frontend_service = \Drupal::service('va_gov_build_trigger.build_frontend');
  $frontend_service->triggerFrontendBuildFromContentSave($node);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function va_gov_build_trigger_node_insert(NodeInterface $node) {
  // Trigger a frontend build for certain content types.
  $frontend_service = \Drupal::service('va_gov_build_trigger.build_frontend');
  $frontend_service->triggerFrontendBuildFromContentSave($node);
}

/**
 * Implements hook_form_alter().
 */
function va_gov_build_trigger_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array('node_form', (array) $form['#theme'])) {

    $form['actions']['preview'] = [
      '#type' => 'submit',
      '#weight' => 10,
      '#value' => 'Save and continue editing',
      '#submit' => ['::submitForm', 'va_gov_build_trigger_form_alter_submit'],
    ];
  }

}

/**
 * Implements hook_form_alter().
 */
function va_gov_build_trigger_form_alter_submit(&$form, FormStateInterface $form_state) {

  // We want to associate our user with the revision.
  $uid = Drupal::currentUser()->id();

  // Build the revision info.
  $node = $form_state->getFormObject()->getEntity();
  $node->setNewRevision(TRUE);
  $node->revision_log = 'Created revision for node in preview';
  $node->setRevisionCreationTime(REQUEST_TIME);

  // Save it as unpublished and associate with user.
  $node->setRevisionUserId($uid);
  $node->set('moderation_state', 'draft');
  $node->save();

  $nid = $node->id();
  $url = 'http' . ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 's' : '') . '://' . \Drupal::request()->getHost() . '/node/' . $nid . '/edit';

  // Send them to the edit node.
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * Add preview button to node view.
 */
function va_gov_build_trigger_preprocess_page(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    // It's a node.
    $path = \Drupal::request()->getpathInfo();
    $arg = explode('/', $path);
    $exclusion_types = [
      'outreach_asset',
      'person_profile',
      'support_service',
      'regional_health_care_service_des',
      'health_care_local_health_service',
    ];
    // Make sure we aren't on the node form or an excluded type.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if (($route_name !== 'entity.node.edit_form') &&
      (!in_array($node->bundle(), $exclusion_types))) {
      // Make sure we aren't on /training-guide.
      $current_uri = \Drupal::request()->getRequestUri();
      if ($current_uri !== '/training-guide') {
        $node = \Drupal::routeMatch()->getParameter('node');
        $nid = $node->id();
        $host = \Drupal::request()->getHost();
        $preview_form = new PreviewForm();
        $url = $preview_form->getEnvironment($host, $nid);
        $button = '<a class="button button--primary js-form-submit form-submit" target="_blank" href="' . $url . '">Preview</a>';
        $variables['page']['sidebar_second']['#markup'] = $button;
      }
    }
  }
}
