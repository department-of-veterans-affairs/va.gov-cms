<?php

/**
 * @file
 * Contains va_gov_vet_center.module.
 */

use Drupal\views\Views;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function va_gov_vet_center_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_vet_center module.
    case 'help.page.va_gov_vet_center':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom code for Vet centers') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function va_gov_vet_center_entity_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'vet_center_cap') {
    _va_gov_vet_center_create_cap_id($entity);
  }
}

/**
 * Creates unique VC Cap facility id.
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *   The vc cap node.
 */
function _va_gov_vet_center_create_cap_id(EntityInterface $entity) {
  if (empty($entity->field_facility_locator_api_id->value)) {
    // Set our vc cap facility id field for lighthouse if field is empty.
    // Step 1: Trim suffixes: os | v | mvc
    // Step 2: query for this type of pattern ---> vc_0204CP123.
    $vc_id = '';
    if (!empty($entity->field_office->entity->field_facility_locator_api_id->value)) {
      $vc_id = $entity->field_office->entity->field_facility_locator_api_id->value;
    }
    // VC suffixes.
    $patterns = [
      '/OS(?!\S)/',
      '/V(?!\S)/',
      '/MVC(?!\S)/',
    ];
    $replacements = [
      'CAP',
      'CAP',
      'CAP',
    ];
    $vc_search_string = preg_replace($patterns, $replacements, $vc_id, 1);
    $database = \Drupal::database();
    // Grab our caps.
    $results = $database->select('node__field_facility_locator_api_id', 't')
      ->fields('t', ['field_facility_locator_api_id_value'])
      ->condition('field_facility_locator_api_id_value', "%" . $database->escapeLike($vc_search_string) . "%", 'LIKE')
      ->execute()
      ->fetchAll();
    $highest_cap = 0;
    if (!empty($results)) {
      // Stuff our cap numbers into an array.
      $facilities_array = [];
      foreach ($results as $key => $facility_value_from_db) {
        preg_match("/CAP(.*)/", $facility_value_from_db->field_facility_locator_api_id_value, $cap_id);
        $facilities_array[$key] = (integer) $cap_id[1];
      }
      sort($facilities_array);
      $highest_cap = array_pop($facilities_array);
    }
    // Add 1 to the highest cap number found.
    $index = $highest_cap + 1;
    $vcap_id = $vc_search_string . (string) $index;
    $entity->set('field_facility_locator_api_id', $vcap_id);
  }
}

/**
 * Implements hook_form_alter().
 */
function va_gov_vet_center_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id === 'node_vet_center_cap_form' || $form_id === 'node_vet_center_cap_edit_form') {
    // Add after_build callbacks for VC CAP node forms.
    $form['field_address']['widget']['#after_build'][] = 'va_gov_vet_center_vc_cap_address_alter_label_after_build';
    $form['field_facility_hours']['widget']['#after_build'][] = 'va_gov_vet_center_vc_cap_hours_hide_caption_after_build';
  }

  if ($form_id === 'node_vet_center_locations_list_form' || $form_id === 'node_vet_center_locations_list_edit_form') {
    _va_gov_vet_center_add_facilities_listing_block_to_form($form);
  }

  _va_gov_vet_center_cap_hours_opt_in($form, $form_state, $form_id);

}

/**
 * Output facility listing view on vc locations node forms.
 *
 * @param array $form
 *   The form array.
 */
function _va_gov_vet_center_add_facilities_listing_block_to_form(array &$form) {
  $form['group_my_locations'] = [
    '#type' => 'details',
    '#title' => t('Main and satellite locations'),
    '#open' => TRUE,
    '#weight' => 3,
  ];
  $form['group_my_locations']['vc_facility_listing_view'] = [
    '#type' => 'view',
    '#name' => 'vet_center_facility_listing',
    '#display_id' => 'vc_listing_for_node_form',
    '#embed' => TRUE,
  ];
}

/**
 * Determine whether or not user can edit community access point office hours.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param string $form_id
 *   The form id.
 */
function _va_gov_vet_center_cap_hours_opt_in(array &$form, FormStateInterface $form_state, $form_id) {

  if (($form_id === 'node_vet_center_cap_edit_form') || ($form_id === 'node_vet_center_cap_form')) {

    $node = $form_state->getformObject()->getEntity();

    // We want to implement the states logic only if the field_office_hours
    // and the field_vetcenter_cap_hours_opt_in are available.
    if (($node->hasField('field_office_hours')) && ($node->hasField('field_vetcenter_cap_hours_opt_in'))) {
      $form['field_office_hours']['#states'] = [
        'visible' => [
          ':input[name="field_vetcenter_cap_hours_opt_in"]' => ['value' => '1'],
        ],
      ];
    }

  }
}

/**
 * Implements hook_entity_view_alter().
 */
function va_gov_vet_center_entity_view_alter(array &$build, EntityInterface $entity) {
  _va_gov_vet_center_add_facilities_listing_block_to_view($build, $entity);
  _va_gov_vet_center_unset_cap_hours($build, $entity);
}

/**
 * Output facility listing view on vc locations node view page.
 *
 * @param array &$build
 *   A renderable array representing the entity content.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object being rendered.
 */
function _va_gov_vet_center_add_facilities_listing_block_to_view(array &$build, EntityInterface $entity) {

  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'vet_center_locations_list') {
    $view = Views::getView('vet_center_facility_listing');

    if (is_object($view)) {
      $view->setDisplay('vc_listing_for_node_form');
      $view->execute();
      // Have to break it out to avoid php pass by reference notices.
      $view_render = $view->render();
      $rendered_view = \Drupal::service('renderer')->render($view_render);
      $build['vc_locations_view'] = [
        '#prefix' => '<div class="field__label">' . t('Main and satellite locations') . '</div>',
        '#markup' => $rendered_view,
        '#weight' => 2,
      ];
    }

  };
}

/**
 * Unset field_office_hours on proofing page based on trigger field.
 *
 * @param array &$build
 *   A renderable array representing the entity content.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object being rendered.
 */
function _va_gov_vet_center_unset_cap_hours(array &$build, EntityInterface $entity) {

  // Check if correct content bundle and unset office hours if opted out.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'vet_center_cap') {
    $office_hours_opt_in_select = $entity->field_vetcenter_cap_hours_opt_in->value;
    if ($office_hours_opt_in_select === '0') {
      unset($build['field_office_hours']);
    }
  };
}

/**
 * Change company title label in address widget on vc cap type.
 *
 * @param array $element
 *   The address widget form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return string
 *   The altered Address organization label.
 */
function va_gov_vet_center_vc_cap_address_alter_label_after_build(array $element, FormStateInterface $form_state) {
  $element[0]['address']['organization']['#title'] = t('Located at');
  return $element;
}

/**
 * Hide hours caption in hours widget on vc cap type.
 *
 * @param array $element
 *   The hours table widget form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return string
 *   The altered hours table widget.
 */
function va_gov_vet_center_vc_cap_hours_hide_caption_after_build(array $element, FormStateInterface $form_state) {
  unset($element[0]['#description']);
  unset($element[0]['caption']);
  return $element;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function va_gov_vet_center_form_node_form_alter(array &$form, FormStateInterface &$form_state) {
  _va_gov_backend_set_owner_section_default($form, $form_state);

  // Only attach the service select setter to vet_center service bundle.
  if ($form_state->getformObject()->getEntity()->bundle() === 'vet_center') {
    $form['#attached']['library'][] = 'va_gov_vet_center/set_ief_service_selects';
  }
}
