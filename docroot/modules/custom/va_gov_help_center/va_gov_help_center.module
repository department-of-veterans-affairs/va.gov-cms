<?php

/**
 * @file
 * Contains va_gov_help_center.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

// The NID of the CMS Knowledge Base homepage.
const CMS_HELP_CENTER_HOMEPAGE_NID = 26856;

/**
 * Implements hook_help().
 */
function va_gov_help_center_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_user_guide module.
    case 'help.page.va_gov_help_center':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Supports VA.gov Knowledge Base and editor help center content.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_toolbar().
 */
function va_gov_help_center_toolbar() {
  $items = [];

  // Adds a link to CMS Knowledge Base to the top level of admin toolbar.
  $items['help-center'] = [
    '#type' => 'toolbar_item',
    '#weight' => 1,
    'tab' => [
      '#type' => 'link',
      '#url' => Url::fromRoute('entity.node.canonical', ['node' => CMS_HELP_CENTER_HOMEPAGE_NID]),
      '#title' => t('Knowledge Base'),
      '#attributes' => [
        'class' => ['toolbar-icon', 'toolbar-icon-help'],
      ],
    ],
  ];

  return $items;
}

/**
 * Implements hook_page_attachments().
 */
function va_gov_help_center_page_attachments(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  $route_parameters = $route_match->getParameters()->all();
  if (_va_gov_help_center_should_attach_widget($route_name, $route_parameters)) {
    $attachments['#attached']['library'][] = 'va_gov_help_center/helpdesk-widget';
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function va_gov_help_center_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#suffix'] = _va_gov_help_center_build_get_help_button();
}

/**
 * Builds the get help button for user login form.
 *
 * @return null|string
 *   Either the html link to the Knowledge Base or null.
 */
function _va_gov_help_center_build_get_help_button() {
  // Login form is on all pages in sidebar for anon, so need to target route.
  $route = \Drupal::service('current_route_match')->getRouteName();
  if ($route !== 'user.login') {
    return NULL;
  }
  $url_object = Url::fromRoute('entity.node.canonical', ['node' => CMS_HELP_CENTER_HOMEPAGE_NID]);
  $link = [
    '#type' => 'link',
    '#url' => $url_object,
    '#title' => t('Get help'),
    '#attributes' => [
      'class' => [
        'button',
        'button--primary',
      ],
      'id' => [
        'get-help-button',
      ],
      'hreflang' => [
        'en',
      ],
      'lang' => [
        'en',
      ],
    ],
  ];
  return render($link);
}

/**
 * Should we attach the helpdesk widget?
 *
 * @param string $route_name
 *   The current route name.
 * @param array $route_parameters
 *   The parameters passed with the route.
 *
 * @return bool
 *   TRUE if we should attach the widget, otherwise FALSE.
 */
function _va_gov_help_center_should_attach_widget(string $route_name, array $route_parameters): bool {
  if ($route_name === 'system.403') {
    return TRUE;
  }
  if ($route_name === 'entity.node.canonical' && !empty($route_parameters['node']) && $node = $route_parameters['node']) {
    // Attach Jira Service Desk widget library to all nodes of type
    // `documentation_page` with an exception of CMS Knowledge Base homepage.
    if ($node->getType() === 'documentation_page' && $node->id() != CMS_HELP_CENTER_HOMEPAGE_NID) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function va_gov_help_center_preprocess_breadcrumb(&$breadcrumb) {
  _va_gov_help_center_remove_home_breadcrumb($breadcrumb);
}

/**
 * Used to remove home breadcrumb from declared content types.
 */
function _va_gov_help_center_remove_home_breadcrumb(&$breadcrumb) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $types_for_home_removal = [
      'documentation_page',
    ];
    // Home crumb is always the first, and types that don't have a home crumb
    // won't be added to array, so safe and less expensive than a loop
    // to just pluck out the first item.
    if (in_array($node->bundle(), $types_for_home_removal)) {
      unset($breadcrumb['breadcrumb'][0]);
    }
  }
}
