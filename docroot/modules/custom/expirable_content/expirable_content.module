<?php

use Drupal\expirable_content\FieldStorageDefinition;
use Drupal\Core\Field\FieldDefinition;

/**
 * @file
 * Primary module hooks for Expirable Content module.
 */

// Below doesn't seem to work.

///**
// * Implements hook_entity_bundle_field_info().
// */
//function expirable_content_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
//  // Get the types of entities that have expiration enabled.
//  $entity_type_id = $entity_type->id();
//  $results = \Drupal::entityTypeManager()->getStorage('expirable_content')->loadByProperties([
//    'entity_type' => $entity_type_id,
//    'entity_bundle' => $bundle,
//  ]);
//  $fields = [];
//  if ($results) {
//    $storage_definitions = expirable_content_entity_field_storage_info($entity_type);
//    $fields['expiration'] = FieldDefinition::createFromFieldStorageDefinition($storage_definitions['expiration'])
//      ->setLabel(t('Expiration'));
//  }
//
//  return $fields;
//}
//
///**
// * Implements hook_entity_field_storage_info().
// */
//function expirable_content_entity_field_storage_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
//  // Get the types of entities that have expiration enabled.
//  $entity_type_id = $entity_type->id();
//  $results = \Drupal::entityTypeManager()->getStorage('expirable_content')->loadByProperties([
//    'entity_type' => $entity_type_id,
//  ]);
//  if ($results) {
//    $definitions['expiration'] = FieldStorageDefinition::create('expirable_content')
//      ->setName('expiration')
//      ->setLabel(t('Expiration'))
//      ->setRevisionable(FALSE)
//      ->setTargetEntityTypeId($entity_type->id());
//    return $definitions;
//  }
//}
