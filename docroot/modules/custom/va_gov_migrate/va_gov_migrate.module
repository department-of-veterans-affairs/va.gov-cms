<?php

/**
 * @file
 * Contains va_gov_migrate.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_presave().
 */
function va_gov_migrate_entity_presave(EntityInterface $entity) {
  _va_gov_migrate_process_va_form($entity);
  _va_gov_migrate_set_default_vet_center_title($entity);
}

/**
 * Process VA Form.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 */
function _va_gov_migrate_process_va_form(EntityInterface &$entity) {
  if ($entity->bundle() !== 'va_form' || (!$entity instanceof NodeInterface)) {
    return;
  }

  // Bail if this is not being run by "cms migrator" (1317).
  if ($entity->getRevisionUserId() !== 1317) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $entity */
  // Grab any values set in the migration.
  $deleted = $entity->get('field_va_form_deleted')->value;
  $was_deleted = (!empty($entity->original) && $entity->original->get('field_va_form_deleted')->value) ? TRUE : FALSE;
  $modstate = $entity->get('moderation_state')->value;
  if (!empty($deleted) && ($modstate !== "archived")) {
    // This should be set to unpublished because the migration is intentionally,
    // not overriding status.
    $entity->setUnpublished();
    $entity->set('moderation_state', 'archived');
    $entity->set('revision_log', 'Archived because it was marked as deleted in the Forms DB.');
  }
  elseif (!$deleted && $was_deleted && ($modstate === "archived")) {
    // This was deleted in the forms DB but the flag has been removed, so change
    // to draft, because we can't know what state it was in when it was flagged.
    $entity->set('moderation_state', 'draft');
    $entity->set('revision_log', 'Changed to Draft because deleted flag was removed in the Forms DB.');
  }
}

/**
 * Set default Vet Center title.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 */
function _va_gov_migrate_set_default_vet_center_title(EntityInterface &$entity) {
  if ($entity->bundle() !== 'vet_center' || (!$entity instanceof NodeInterface)) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $entity */
  // If a Vet Center title is empty copy the value from field_official_name.
  if (empty($entity->getTitle())) {
    $default_title = $entity->get('field_official_name')->value ?: '- none -';
    $entity->setTitle($default_title);
  }
}

/**
 * Implements hook_help().
 */
function va_gov_migrate_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_migrate module.
    case 'help.page.va_gov_migrate':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Migrate content from va.gov') . '</p>';
      return $output;

    default:
  }
}

/**
 * This is simply a call back for time that removes the arg to prevent null.
 *
 * Reference https://bugs.php.net/bug.php?id=78509
 *
 * @param mixed $arg
 *   An argument from the process plugin pipeline.  It is not used.
 *
 * @return int
 *   The current time measured in the number of seconds
 */
function va_gov_migrate_time($arg) {
  // Process pipeline passes the return of the previous process.
  // Since time() can not use this so we don't use the arg.
  return time();
}

/**
 * A callback to grab the first element from an array, or pass through.
 *
 * Reference https://www.drupal.org/project/migrate_plus/issues/3322342
 *
 * @param mixed $arg
 *   An argument from the process plugin pipeline.
 *
 * @return mixed
 *   The first element from the array, or $arg.
 */
function va_gov_migrate_optional_unwrap_array($arg) {
  if (is_array($arg)) {
    // Grab the first item and return it.
    return array_shift($arg);
  }
  return $arg;
}
