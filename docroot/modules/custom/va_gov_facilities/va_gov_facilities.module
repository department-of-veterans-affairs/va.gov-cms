<?php

/**
 * @file
 * Contains va_gov_facilities.module.
 */

use Drupal\Component\Render\FormattableMarkup;

use Drupal\Core\Form\FormStateInterface;
use Drupal\va_gov_facilities\EventSubscriber\FacilitiesSubscriber;

/**
 * @file
 * Contains va_gov_facilities.module.
 */

/**
 * Implements hook_page_attachments().
 */
function va_gov_facilities_page_attachments(array &$attachments) {
  // Control visibility/required for facility status details.
  $attachments['#attached']['library'][] = 'va_gov_facilities/facility_status_details';
}

/**
 * Implements hook_form_alter().
 */
function va_gov_facilities_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Reduce options on the VBA and Vet Center facility service forms.
  if ($form_id === 'node_vba_facility_service_form'
    || $form_id === 'node_vet_center_facility_health_servi_form') {
    _va_gov_facilities_reduce_service_options($form, $form_state);
    _va_gov_facilities_add_ajax_to_reduce_service_options($form, $form_state);
  }
}

/**
 * Adds AJAX to form for service options.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _va_gov_facilities_add_ajax_to_reduce_service_options(array &$form, FormStateInterface $form_state) {
  // Leave if the form does not have the field_office field.
  if (!isset($form['field_office'])) {
    return;
  }
  // Add AJAX to the field_office dropdown.
  $form['field_office']['widget']['#ajax'] = [
    'callback' => '_va_gov_facilities_reduce_service_options',
    'wrapper' => 'field-service-name-wrapper',
    'event' => 'change',
    'progress' => [
      'type' => 'throbber',
      'message' => t('Updating Service name options ...'),
    ],
  ];
  // Wrap the field_service_name_and_descripti field for AJAX replacement.
  $form['field_service_name_and_descripti']['#prefix'] = '<div id="field-service-name-wrapper">';
  $form['field_service_name_and_descripti']['#suffix'] = '</div>';
}

/**
 * AJAX callback to update the service name options based on selected office.
 */
function _va_gov_facilities_reduce_service_options(array &$form, FormStateInterface $form_state) {
  // The form_state takes precedence over the url to get the office.
  $selected_office = $form_state->getValue('field_office');
  if (empty($selected_office)) {
    // But if the form_state doesn't have the office, check the URL.
    $selected_office_from_url = \Drupal::request()->get('field_office');
    if (empty($selected_office_from_url)) {
      return $form['field_service_name_and_descripti'];
    }
    else {
      $selected_office_id = intval($selected_office_from_url);
    }
  }
  else {
    $selected_office_id = intval($selected_office['0']['target_id']);
  }

  // Leave if the field_service_name_and_descripti field is empty.
  if (empty($form['field_service_name_and_descripti']['widget']['#options'])) {
    return $form['field_service_name_and_descripti'];
  }

  // Get the original options for the service name field.
  $original_options = $form['field_service_name_and_descripti']['widget']['#options'];

  // Load the options for the service name field based on the selected office.
  $options = _va_gov_facilities_get_service_names($selected_office_id, $original_options, $form_state);
  // Update the options of the field_service_name_and_descripti field.
  $form['field_service_name_and_descripti']['widget']['#options'] = $options;

  // Return the updated field_service_name_and_descripti field.
  return $form['field_service_name_and_descripti'];
}

/**
 * Helper function returns the remaining service names based on selected office.
 *
 * @param int $selected_office_id
 *   The selected office.
 * @param array $original_options
 *   The original options for the service name field.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return array
 *   The remaining service names.
 */
function _va_gov_facilities_get_service_names(int $selected_office_id, array $original_options, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  $bundle = $form_object->getEntity()->bundle();
  // Initialize the remaining services.
  $remaining_services = $original_options;
  // Query services based on the selected office.
  $database = \Drupal::database();
  $query = $database->query(
    "SELECT DISTINCT tid FROM taxonomy_entity_index AS tei
      INNER JOIN node__field_service_name_and_descripti AS nfsnad
      ON tei.tid = nfsnad.field_service_name_and_descripti_target_id
      WHERE nfsnad.entity_id IN
      (SELECT entity_id FROM node__field_office AS nfo
      WHERE bundle = :bundle
      AND nfo.field_office_target_id = :nid)",
    [
      ':nid' => $selected_office_id,
      ':bundle' => $bundle,
    ]
    );
  // Get the existing services.
  $existing_services = $query->fetchAll() ?? [];
  // Flip the existing services for comparison.
  $existing_services = array_flip(array_column($existing_services, 'tid'));
  // Remove the existing services from the original options.
  $remaining_services = array_diff_key($original_options, $existing_services);

  return $remaining_services;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function va_gov_facilities_preprocess_field__paragraph__field_hours(&$variables) {
  // The value of the "Use the facility's hours" choice.
  $use_facility_hours = "0";
  $item_list = $variables['element']['#items'];
  $paragraph = $item_list->getEntity();
  $field_name = "field_hours";
  if ($paragraph->$field_name->value === $use_facility_hours) {
    $node_parent = va_gov_backend_get_parent_node($paragraph);
    if ($node_parent) {
      $related_field = "field_facility_location";
      $field_to_render = "field_office_hours";
      $variables['actual_hours'] = FacilitiesSubscriber::createRenderArrayFromFieldOnRefdEntity($node_parent, $related_field, $field_to_render);
    }
  }
}

/**
 * Populates Service Location form with default appointment text from service.
 *
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return string
 *   The default appointment text from the service node type.
 */
function _va_gov_facilities_populate_service_default_appt_text(FormStateInterface $form_state): string {
  $default_text = '';
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  $bundle = $form_object->getEntity()->bundle();
  $entity = $form_object->getEntity();
  $service_types = [
    'health_care_local_health_service' => 'field_hservices_lead_in_default',
    'service_region' => 'field_vba_serv_reg_appt_default',
    'vba_facility_service' => 'field_vba_fac_serv_appt_default',
    'vha_facility_nonclinical_service' => 'field_vamc_nonclin_appt_default',
  ];
  foreach ($service_types as $service_type => $default_field) {
    if ($bundle === $service_type) {
      if ($entity->$default_field && !$entity->$default_field->isEmpty()) {
        $default_text = trim(strip_tags($entity->$default_field->getFieldDefinition()->getSetting('markup')['value']));
      }
    }
  }

  return $default_text;
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function va_gov_facilities_field_widget_single_element_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  $paragraph_type = $element['#paragraph_type'] ?? '';
  if ($paragraph_type === 'service_location') {
    // Set the default text for appointments.
    $default_text = _va_gov_facilities_populate_service_default_appt_text($form_state) ?? '';
    $description = new FormattableMarkup($default_text, []);
    // Create the form element for the default text for appointments.
    // Nest it under the select list about the type of text.
    $element['subform']['field_appt_intro_text_type']['temp_default_text'] = [
      '#type' => 'textarea',
      '#title' => t('Default text'),
      '#value' => $description,
      '#weight' => 1,
      '#disabled' => TRUE,
    ];
    // Hide appointments custom text unless explicitly selected.
    $selector = sprintf(':input[name="field_service_location[%d][subform][field_appt_intro_text_type]"]', $element['#delta']);
    // The default appointment text shows as a disabled form element.
    $element['subform']['field_appt_intro_text_type']['temp_default_text']['#states'] = [
      'visible' => [
        $selector => ['value' => 'use_default_text'],
      ],
    ];
    $element['subform']['field_appt_intro_text_custom']['#states'] = [
      'visible' => [
        $selector => ['value' => 'customize_text'],
      ],
    ];

  }

}
