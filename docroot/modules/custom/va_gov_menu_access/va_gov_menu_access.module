<?php

/**
 * @file
 * Contains va_gov_menu_access.module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_page_attachments().
 *
 * Adds user role info to drupalsettings for js menu association limiting.
 */
function va_gov_menu_access_page_attachments(array &$attachments) {
  $attachments['#attached']['drupalSettings']['vagov_menu_access'] = [
    'current_user_roles' => \Drupal::currentUser()->getRoles(),
  ];

}

/**
 * Gets menu access settings.
 *
 * @return array
 *   Menu config settings.
 */
function _va_gov_menu_access_get_menu_access() {
  // Get our menu form settings.
  $menu_access_config = \Drupal::config('va_gov_menu_access.settings');

  // Grab the allowed parents config.
  $allowed_parents = $menu_access_config->get('va_gov_menu_access.paths');
  $allowed_parents_array = explode("\n", $allowed_parents);
  $universal_parent_menu_items = [];
  // Push items into parent array.
  foreach ($allowed_parents_array as $parent) {
    if (strpos($parent, '%') !== FALSE) {
      $universal_parent_menu_items_raw = explode('%', $parent);
      $universal_parent_menu_items[] = trim(end($universal_parent_menu_items_raw));
    }
  }

  // Grab the locked_paths config.
  $locked_paths = $menu_access_config->get('va_gov_menu_access.locked_paths');
  $locked_paths_array = explode("\n", $locked_paths);
  $universal_locked_paths = [];
  $single_locked_paths = [];
  // Sort locked paths into universal and single allowance arrays.
  foreach ($locked_paths_array as $locked_path) {
    if (strpos($locked_path, '%') !== FALSE) {
      $universal_locked_raw = explode('%', $locked_path);
      $universal_locked_paths[] = trim(end($universal_locked_raw));
    }
    else {
      $single_locked_paths[] = trim($parent);
    }
  }

  return [
    'universal_parent_menu_items' => $universal_parent_menu_items,
    'universal_locked_paths' => $universal_locked_paths,
    'single_locked_paths' => $single_locked_paths,
  ];
}

/**
 * Implements hook_form_alter().
 */
function va_gov_menu_access_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Node form alters.
  if (substr($form_id, 0, 4) === 'node') {
    $form['#attached']['library'][] = 'va_gov_menu_access/parent_section_select';
    $form['#after_build'][] = 'va_gov_menu_access_alter_menus';
  }
}

/**
 * Used to filter disable all menu options when user shouldn't access.
 *
 * @param array $form
 *   The form array.
 * @param string $form_id
 *   The form id.
 *
 * @return array
 *   The form array.
 */
function va_gov_menu_access_disable_parent_menu_options(array &$form, string $form_id) {
  $form_type = 'detail-page';
  if (strpos($form_id, 'health_care_region_detail_page') === FALSE) {
    $form_type = 'not-detail-page';
  }
  $form['#attached']['drupalSettings']['vagov_menu_access'] = [
    'content_type' => $form_type,
  ];

  $form['menu']['link']['title']['#attributes']['disabled'] = TRUE;
  $form['menu']['link']['description']['#attributes']['disabled'] = TRUE;
  $form['menu']['link']['link_enabled']['#attributes']['disabled'] = TRUE;
  $form['menu']['link']['weight']['#attributes']['disabled'] = TRUE;
  return $form;
}

/**
 * Used to filter / alter menus in node rail.
 *
 * @param array $form
 *   The form array.
 *
 * @return array
 *   The form array.
 */
function va_gov_menu_access_alter_menus(array $form, FormStateInterface $form_state) {
  $user_roles = \Drupal::currentUser()->getRoles();
  $admin_roles = ['content_admin', 'administrator'];
  // User isn't an admin, so logic is applied.
  if (empty(array_intersect($user_roles, $admin_roles))) {
    // Unable to pass $form_id from parent function when using after_build.
    // Throws uneven arguments error.
    $form_id = $form_state->getFormObject()->getFormId();
    if (strpos($form_id, 'health_care_region_detail_page') === FALSE) {
      va_gov_menu_access_disable_parent_menu_options($form, $form_id);
    }
    // Grab our alias service.
    $alias_manager = \Drupal::service('path.alias_manager');
    // Grab our custom paths config settings.
    $paths_config = _va_gov_menu_access_get_menu_access();
    $universal_locked_paths = $paths_config['universal_locked_paths'];
    $single_locked_paths = $paths_config['single_locked_paths'];

    $page_alias = !empty($form['path']['widget'][0]['alias']['#default_value']) ? $form['path']['widget'][0]['alias']['#default_value'] : '';
    if (!empty($page_alias)) {
      // In this loop, we look to see if we have either an all children
      // pattern lock, or a specific parent pattern lock.
      $matcher = 0;
      foreach ($universal_locked_paths as $path) {
        if (strpos($path, '*') !== FALSE) {
          $path_sanitized = rtrim($path, '*');
          if (strpos($page_alias, $path_sanitized) !== FALSE) {
            $matcher = 1;
            break;
          }
        }
        else {
          if (strpos($page_alias, $path) !== FALSE) {
            $path_sanitized = str_replace('/', '\/', $path);
            $matcher = preg_match('/' . $path_sanitized . '$/', $page_alias);
            if ($matcher > 0) {
              break;
            }
          }
        }
      }
      // If the page is listed in a locked array, lockdown menu options.
      if (in_array($page_alias, $single_locked_paths)
          || $matcher > 0) {
        va_gov_menu_access_disable_parent_menu_options($form, $form_id);
      }
    }

    // Make sure there is a parent menu on the page before we dig.
    if (!empty($form['menu']['link']['menu_parent']['#options'])) {
      // List of menu items that aren't real links = faux menu items.
      $allowed_separators = ['About'];
      // Grab our menu items list.
      $universal_parent_menu_items = $paths_config['universal_parent_menu_items'];

      // Grab all the values in the dropdown.
      $parent_options = $form['menu']['link']['menu_parent']['#options'];

      // Create some empty arrays for organizing our items.
      $allowed_parents = [];
      $uuids_with_vals = [];
      $uuids_only = [];
      $key_count = 0;
      foreach ($parent_options as $key => $option) {
        if (!empty(explode('menu_link_content:', $key))) {
          // This is how we get our menu item uuid.
          $menu_id_array = explode('menu_link_content:', $key);
          if (!empty($menu_id_array[1])) {
            $menu_id = $menu_id_array[1];
            // Load them into an array we can use for cherrypicking by keys.
            $uuids_with_vals[$menu_id] = [
              'key_count' => $key_count,
              'menu_key' => $key,
              'option' => $option,
            ];
            // Flat array for multi menu loading.
            $uuids_only[$key_count] = $menu_id;
            $key_count++;
          }
        }
      }

      // Load up all our menu items at once.
      $loaded_menu_items = \Drupal::entityTypeManager()
        ->getStorage('menu_link_content')
        ->loadByProperties(['uuid' => $uuids_only, 'enabled' => 1]);

      $enabled_count = 0;

      // Loop through them, and decide whether it should be allowed in options.
      foreach ($loaded_menu_items as $key => $menu_item) {
        $uri = $menu_item->get('link')->uri;

        if (substr($uri, 0, 12) === 'entity:node/' || $uri === 'route:<nolink>') {
          // Get our alias, as well as last arg of alias for comparison.
          $uri_parts = explode('entity:node/', $uri);
          $nid = end($uri_parts);
          $alias = $alias_manager->getAliasByPath('/node/' . $nid);

          $subject_uuid = $uuids_with_vals[$menu_item->get('uuid')->value];

          // In this loop, we look to see if we have either an all children
          // pattern lock, or a specific parent pattern lock.
          $disabled = 0;
          $enabled = 0;
          foreach ($universal_parent_menu_items as $parent) {
            if (strpos($parent, '!') !== FALSE) {
              // The ! tells us we have a disabled parent with children enabled.
              $parent_sanitized = rtrim($parent, '!');
              if (strpos($alias, $parent_sanitized) !== FALSE) {
                // Check to see if this is the parent item.
                $parent_sanitized = str_replace('/', '\/', $parent_sanitized);
                if (preg_match('/' . $parent_sanitized . '$/', $alias)) {
                  $disabled = 1;
                  break;
                }
                // It's a child, so enable.
                $enabled = 1;
                break;
              }
            }
            elseif (strpos($parent, '~') !== FALSE) {
              // The ~ tells us we just have a disabled parent.
              $parent_sanitized = rtrim($parent, '~');
              if (strpos($alias, $parent_sanitized) !== FALSE) {
                // Check to see if this is the parent item.
                $parent_sanitized = str_replace('/', '\/', $parent_sanitized);
                if (preg_match('/' . $parent_sanitized . '$/', $alias)) {
                  $disabled = 1;
                  break;
                }
              }
            }
            else {
              if (strpos($alias, $parent) !== FALSE) {
                $parent_sanitized = str_replace('/', '\/', $parent);
                $matcher = preg_match('/' . $parent_sanitized . '$/', $alias);
                if ($matcher > 0) {
                  $enabled = 1;
                  break;
                }
              }
            }
          }

          // If we hit on one of our allowed menu separators, include it.
          $separator_flag = 0;
          foreach ($allowed_separators as $separator) {
            $matcher = preg_match('/^' . $separator . '/', $menu_item->getTitle());
            if ($matcher > 0) {
              $separator_flag = 1;
              break;
            }
          }
          // If we have an enabled or disabled flag set, put it in the array.
          if ($enabled) {
            $allowed_parents[$subject_uuid['key_count']][$subject_uuid['menu_key']] = $subject_uuid['option'];
            $enabled_count++;
          }
          elseif ($disabled) {
            $allowed_parents[$subject_uuid['key_count']][$subject_uuid['menu_key']] = $subject_uuid['option'] . ' | Disabled';
          }
          elseif ($separator_flag) {
            $allowed_parents[$subject_uuid['key_count']][$subject_uuid['menu_key']] = $subject_uuid['option'] . ' | Disabled no-link';
          }
        }

      }
    }
    // Reassemble our options with items set to allow children in select list,
    // in original order.
    ksort($allowed_parents);
    $allowed_parents_formatted = [];
    foreach ($allowed_parents as $key => $allowed_sliced) {
      $allowed_parents_formatted[key($allowed_sliced)] = reset($allowed_sliced);
    }
    if (!empty($allowed_parents_formatted)) {
      // We need to have a menu uuid key to prevent fatal error.
      $allowed_parents_formatted[key(array_values($allowed_parents)[0])] = '- Select a value -';
    }
    $form['menu']['link']['menu_parent']['#options'] = $allowed_parents_formatted;
    if ($enabled_count < 1) {
      $form['menu']['link']['menu_parent']['#attributes']['class'][] = 'no-available-menu-targets';
    }
  }
  return $form;
}
