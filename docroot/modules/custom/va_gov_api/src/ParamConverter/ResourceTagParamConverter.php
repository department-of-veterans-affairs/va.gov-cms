<?php

namespace Drupal\va_gov_api\ParamConverter;

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\ParamConverter\ParamConverterInterface;
use Drupal\pathauto\AliasCleaner;
use Drupal\taxonomy\TermInterface;
use Symfony\Component\Routing\Route;

/**
 * Route parameter converter for resource tags.
 *
 * Given a string, attempts to convert to a resource tag entity.
 */
class ResourceTagParamConverter implements ParamConverterInterface {

  /**
   * The entity type manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected $entityTypeManager;

  /**
   * Pathauto's alias cleaner.
   *
   * @var \Drupal\pathauto\AliasCleaner
   */
  protected $aliasCleaner;

  /**
   * Constructs the param converter.
   *
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   *   The entity type manager.
   * @param \Drupal\pathauto\AliasCleaner $alias_cleaner
   *   Pathauto's alias cleaner.
   */
  public function __construct(EntityTypeManagerInterface $entity_type_manager, AliasCleaner $alias_cleaner) {
    $this->entityTypeManager = $entity_type_manager;
    $this->aliasCleaner = $alias_cleaner;
  }

  /**
   * {@inheritdoc}
   */
  public function convert($value, $definition, $name, array $defaults): ?TermInterface {
    if ($value) {
      // Resource tag audience can be from one of three vocabularies.
      $taxonomy_term_storage = $this->entityTypeManager->getStorage('taxonomy_term');
      $query = $taxonomy_term_storage->getQuery()
        ->condition(
          'vid',
          ['audience_beneficiaries', 'audience_non_beneficiaries', 'topics'],
          'IN'
        );
      $terms = $taxonomy_term_storage->loadMultiple($query->execute());
      $term_lookup = [];
      // The tag value being queried would have been generated by this alias
      // cleaner, so it should be used to create the lookup table.
      foreach ($terms as $term) {
        $term_lookup[$term->id()] = $this->aliasCleaner->cleanString($term->label());
      }
      if ($tid = array_search($value, $term_lookup)) {
        return $terms[$tid];
      }
    }
    return NULL;
  }

  /**
   * {@inheritdoc}
   */
  public function applies($definition, $name, Route $route): bool {
    return (!empty($definition['type']) && $definition['type'] === 'resource_tag');
  }

}
