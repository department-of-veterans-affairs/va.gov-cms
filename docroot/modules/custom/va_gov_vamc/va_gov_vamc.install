<?php

/**
 * @file
 * Install file for VA Gov VAMC.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Utility\UpdateException;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Psr\Log\LogLevel;

/**
 * Initializes the basic sandbox values.
 *
 * @param array $sandbox
 *   Standard drupal $sandbox var to keep state in hook_update_N.
 * @param string $counter_callback
 *   A function name to call to get the items to process. Must return an array.
 * @param array $callback_args
 *   A flat array of arguments to pass to the counter_callback.
 *
 * @throws Drupal\Core\Utility\UpdateException
 *   If the counter callback can not be found.
 */
function _va_gov_vamc_sandbox_init(array &$sandbox, $counter_callback, array $callback_args = []) {
  if (empty($sandbox['total'])) {
    // Sandbox has not been initiated.
    if (is_callable($counter_callback)) {
      $sandbox['items_to_process'] = call_user_func_array($counter_callback, $callback_args);
      $sandbox['total'] = count($sandbox['items_to_process']);
      $sandbox['current'] = 0;
    }
    else {
      // Something went wrong could not use callback. Throw exception.
      throw new UpdateException(
        "Counter callback {$counter_callback} provided in _va_gov_vamc_sandbox_init() is not callable. Can not proceed."
      );
    }
  }
}

/**
 * Updates the counts and log if complete.
 *
 * @param array $sandbox
 *   Hook_update_n sandbox for keeping state.
 * @param string $completed_message
 *   Message to log when completed. Can use '@completed' and '@total' as tokens.
 *
 * @return string
 *   String to be used as update hook messages.
 */
function _va_gov_vamc_sandbox_complete(array &$sandbox, $completed_message) {
  // Determine when to stop batching.
  $sandbox['current'] = ($sandbox['total'] - count($sandbox['items_to_process']));
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  $vars = [
    '@completed' => $sandbox['current'],
    '@total' => $sandbox['total'],
  ];
  $message = t('Processing... @completed/@total.', $vars) . PHP_EOL;
  // Log the all finished notice.
  if ($sandbox['#finished'] === 1) {
    Drupal::logger('va_gov_vamc')->log(LogLevel::INFO, $completed_message, $vars);
    $logged_message = new FormattableMarkup($completed_message, $vars);
    $message = t('Process completed:') . " {$logged_message}" . PHP_EOL;
  }
  return $message;
}

/**
 * Calculates an array of system nids that need to have a top task page created.
 *
 * @param string $top_task_bundle
 *   The bundle name of the top task node to build.
 *
 * @return array
 *   An array of VAMC system nids for systems that have no top task page.
 */
function _va_gov_vamc_get_systems_to_process($top_task_bundle) {
  $systems_to_process = [];
  $system_nids = _va_gov_get_vamc_systems();
  $systems_with_existing_pages_nids = _va_gov_get_systems_with_existing_pages($top_task_bundle);
  $systems_needing_pages_nids = array_diff($system_nids, $systems_with_existing_pages_nids);
  if (!empty($systems_needing_pages_nids)) {
    $needy_systems = Node::loadMultiple($systems_needing_pages_nids);
    foreach ($needy_systems as $needy_system) {
      // Get menu data.
      $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
      $menus = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $needy_system->id()]);
      /** @var Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $menu_link */
      $menu_link = reset($menus);

      $systems_to_process[$needy_system->id()] = [
        'field_office' => $needy_system->id(),
        'field_administration' => $needy_system->get('field_administration')->target_id,
        'menu_link_name' => $menu_link->getMenuName(),
        'menu_item_id' => $menu_link->getPluginId(),
      ];
    }
  }
  return $systems_to_process;
}

/**
 * Get the nid for all published VAMC systems.
 *
 * @return array
 *   An array of system nodes.
 */
function _va_gov_get_vamc_systems() {
  $systems = \Drupal::entityQuery('node')
    ->condition('type', 'health_care_region_page')
    ->condition('status', 1)
    ->execute();
  return array_values($systems);
}

/**
 * Get systems that already have a specific top task page.
 *
 * @param string $top_task_bundle
 *   The machine name of the top task bundle.
 *
 * @return array
 *   An array of system nids that aready have one of these top task pages.
 */
function _va_gov_get_systems_with_existing_pages($top_task_bundle) {
  $existing_tt_nids = \Drupal::entityQuery('node')
    ->condition('type', $top_task_bundle)
    ->execute();
  $existing_tt_pages = Node::loadMultiple($existing_tt_nids);
  $systems_with_tt_page = [];
  foreach ($existing_tt_pages as $existing_tt_page) {
    $systems_with_tt_page[] = $existing_tt_page->get('field_office')->target_id;
  }
  return $systems_with_tt_page;
}

/**
 * Creates top task pages.
 *
 * @param array $sandbox
 *   Hook_update_n sandbox for keeping state.
 * @param string $build_bundle
 *   The bundle name of the node to build.
 */
function _va_gov_vamc_create_top_task_pages(array &$sandbox, $build_bundle) {
  $cms_migrator = 1317;
  // Run through a batch of 25.
  $i = 0;
  foreach ($sandbox['items_to_process'] as $system_nid => $system_info) {
    if (++$i > 25) {
      break;
    }
    $new_tt_page = Node::create([
      'type' => $build_bundle,
      'status' => 0,
      'moderation_state' => 'draft',
      'revision_log' => 'Created automatically.',
    ]);
    // CMS migrator.
    $new_tt_page->setOwnerId($cms_migrator);
    $new_tt_page->setRevisionUserId($cms_migrator);
    $new_tt_page->setUnpublished();
    $new_tt_page->setTitle(_va_gov_vamc_get_title($build_bundle));
    $new_tt_page->set('field_administration', $system_info['field_administration']);
    $new_tt_page->set('field_office', $system_info['field_office']);
    $new_tt_page->save();

    MenuLinkContent::create([
      'title' => _va_gov_vamc_get_title($build_bundle),
      'link' => ['uri' => "entity:node/{$new_tt_page->id()}"],
      'menu_name' => $system_info['menu_link_name'],
      'enabled' => 0,
      'parent' => $system_info['menu_item_id'],
      'weight' => -50,
    ])->save();

    unset($sandbox['items_to_process'][$system_nid]);
  }

}

/**
 * Gets the default title for a content type.
 *
 * @param string $build_bundle
 *   The machine name of the bundle.
 *
 * @return string
 *   The title to be used for the content type.
 */
function _va_gov_vamc_get_title($build_bundle) {
  $lookup = [
    'vamc_system_medical_records_offi' => 'Medical records office',
    'vamc_system_billing_insurance' => 'Billing and insurance',
    'vamc_system_register_for_care' => 'Register for care',
  ];

  return $lookup[$build_bundle] ?? 'MISTAKE - DELETE ME';
}

/**
 * Delete VA Lovell Federal health care menu.
 */
function va_gov_vamc_update_9001() {
  // Delete all menu items of given menu.
  $storage_handler = \Drupal::entityTypeManager()->getStorage('menu');
  $items = $storage_handler->loadByProperties(['type' => 'system.menu.va-lovell-federal-health-care']);
  $storage_handler->delete($items);

  // Delete menu.
  $menu = \Drupal::configFactory()->getEditable('system.menu.va-lovell-federal-health-care');
  $menu->delete();

  Drupal::logger('va_gov_vamc')->log(LogLevel::INFO, 'VA Lovell Federal health care menu: Successfully removed VA Lovell Federal health care menu.');
}

/**
 * Remove field_body from VAMC Facility Health Service content type.
 */
function va_gov_vamc_update_9003() {
  $bundle = "health_care_local_health_service";
  $field = FieldConfig::loadByName('node', $bundle, 'field_body');
  if ($field) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();

    Drupal::logger('va_gov_vamc')->log(LogLevel::INFO, 'VAMC Facility Health Service: Successfully removed field_body field.');
  }
  return "The field field_body have been removed from the VAMC Facility Health Service content type.";
}

/**
 * Build top task page vamc_system_billing_insurance for each system.
 */
function va_gov_vamc_update_9004(&$sandbox) {
  $build_bundle = 'vamc_system_billing_insurance';
  _va_gov_vamc_sandbox_init($sandbox, '_va_gov_vamc_get_systems_to_process', [$build_bundle]);
  _va_gov_vamc_create_top_task_pages($sandbox, $build_bundle);
  return _va_gov_vamc_sandbox_complete($sandbox, "Created @total {$build_bundle} nodes.");
}

/**
 * Build top task page vamc_system_medical_records_offi for each system.
 */
function va_gov_vamc_update_9005(&$sandbox) {
  $build_bundle = 'vamc_system_medical_records_offi';
  _va_gov_vamc_sandbox_init($sandbox, '_va_gov_vamc_get_systems_to_process', [$build_bundle]);
  _va_gov_vamc_create_top_task_pages($sandbox, $build_bundle);
  return _va_gov_vamc_sandbox_complete($sandbox, "Created @total {$build_bundle} nodes.");
}

/**
 * Build top task page vamc_system_register_for_care for each system.
 */
function va_gov_vamc_update_9006(&$sandbox) {
  $build_bundle = 'vamc_system_register_for_care';
  _va_gov_vamc_sandbox_init($sandbox, '_va_gov_vamc_get_systems_to_process', [$build_bundle]);
  _va_gov_vamc_create_top_task_pages($sandbox, $build_bundle);
  return _va_gov_vamc_sandbox_complete($sandbox, "Created @total {$build_bundle} nodes.");
}
