<?php

/**
 * @file
 * Install file for Va Gov Backend.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\pathauto\PathautoState;
use Psr\Log\LogLevel;

/**
 * Removing Local hospital paragraph entities.
 */
function va_gov_backend_update_8001() {
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties(['type' => 'local_facility_health_service']);

  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Migrate asset and event items to outreach.
 */
function va_gov_backend_update_8002() {

  // Delete the outreach and events detail page.
  $va_bene_items = ['VA benefits outreach', 'Benefit Materials', 'Events'];

  foreach ($va_bene_items as $item) {
    $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
    $va_bene_title_result = \Drupal::entityQuery('node')
      ->condition('title', $item, '=')
      ->execute();
    $entities = $storage_handler->loadMultiple($va_bene_title_result);
    if ($item === 'Benefit Materials') {
      $swap_key = key($entities);
    }
    $storage_handler->delete($entities);
  }

  // Create outreach and events office.
  $node = Node::create([
    'type' => 'office',
    'title' => 'Outreach and events',
    'status' => '1',
    'uid' => 1,
    'moderation_state' => 'published',
    'field_description' => 'The office description',
    'field_body' => 'The office body text.',
  ]);
  $node->save();
  $nid = (int) $node->id();

  // Load the MenuLinkManager.
  $menu_handler = \Drupal::service('plugin.manager.menu.link');

  $outreach_landing_page = MenuLinkContent::create([
    'title' => 'Outreach and events',
    'link' => ['uri' => 'internal:/node/' . $nid],
    'menu_name' => 'outreach-and-events',
    'expanded' => TRUE,
  ]);
  $outreach_landing_page->save();

  // Create event listing.
  $event_node = Node::create([
    'type' => 'event_listing',
    'title' => 'Events',
    'status' => '1',
    'uid' => 1,
    'moderation_state' => 'published',
    'field_intro_text' => 'Event listing intro text',
    'field_description' => 'Event listing description',
    'field_office' => [
      ['target_id' => $nid],
    ],
    'path' => [
      'alias' => '/outreach-and-events/events',
      'pathauto' => PathautoState::SKIP,
    ],
  ]);
  $event_node->save();
  $event_nid = (int) $event_node->id();

  $second_level_events = MenuLinkContent::create([
    'title' => 'Events',
    'link' => ['uri' => 'internal:/node/' . $event_nid],
    'menu_name' => 'outreach-and-events',
    'parent' => $outreach_landing_page->getPluginId(),
    'expanded' => TRUE,
  ]);
  $second_level_events->save();

  // Create publication listing.
  $pub_node = Node::create([
    'type' => 'publication_listing',
    'title' => 'Benefits and Materials',
    'status' => '1',
    'uid' => 1,
    'moderation_state' => 'published',
    'field_intro_text' => 'Publication listing intro text',
    'field_description' => 'Publication listing description',
    'field_office' => [
      ['target_id' => $nid],
    ],
    'path' => [
      'alias' => '/outreach-and-events/benefit-materials',
      'pathauto' => PathautoState::SKIP,
    ],
  ]);
  $pub_node->save();
  $pub_nid = (int) $pub_node->id();
  $second_level_pub = MenuLinkContent::create([
    'title' => 'Benefits and Materials',
    'link' => ['uri' => 'internal:/node/' . $pub_nid],
    'menu_name' => 'outreach-and-events',
    'parent' => $outreach_landing_page->getPluginId(),
    'expanded' => TRUE,
  ]);
  $second_level_pub->save();

  // Change our ef to new node.
  $connection = \Drupal::database();
  $swap = $connection->update('node__field_office')
    ->fields([
      'field_office_target_id' => $nid,
    ])
    ->condition('field_office_target_id', $swap_key)
    ->execute();

  $swap_revision = $connection->update('node_revision__field_office')
    ->fields([
      'field_office_target_id' => $nid,
    ])
    ->condition('field_office_target_id', $swap_key)
    ->execute();
}

/**
 * Sync field_listing with field_office on four content types.
 */
function va_gov_backend_update_8003() {
  $bundles = [
    'event',
    'news_story',
    'press_release',
    'outreach_asset',
  ];

  $storage = \Drupal::entityTypeManager()->getStorage("node");

  foreach ($bundles as $bundle) {
    $updated = 0;
    $nodes = $storage->loadByProperties(['type' => $bundle]);

    // Re-save each node to trigger field sync.
    // Not writing batch process here, because out targeted nodes quantity
    // is limited.
    foreach ($nodes as $node) {
      $node->setNewRevision(TRUE);
      // New revision will inherit content moderation status from default rev.
      $node->isDefaultRevision(TRUE);
      $node->setRevisionLogMessage('VACMS Team: Synced field_listing with field_office for upcoming content model updates.');
      $node->setRevisionCreationTime(Drupal::time()->getRequestTime());
      $node->setChangedTime(Drupal::time()->getRequestTime());
      // Setting revision as super admin.
      $node->setRevisionUserId(1);
      $saved = $node->save();
      $updated = (is_int($saved) && $saved > 0) ? $updated + 1 : $updated;
    }

    $log_level = ($updated === count($nodes)) ? LogLevel::INFO : LogLevel::ERROR;

    Drupal::logger('va_gov_backend')->log($log_level, '%bundle CT field sync: Successfully updated %ct_updated out of %ct_count nodes.', [
      '%bundle' => $node->type->entity->label(),
      '%ct_count' => count($nodes),
      '%ct_updated' => $updated,
    ]);
  }
}

/**
 * Update the Owner for terms in health_care_service_taxonomy vocab.
 */
function va_gov_backend_update_8004() {
  $updated = 0;
  $failed = 0;

  // "National health care service descriptions" term ID.
  $tid = 46;

  $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $terms = $storage->loadByProperties(['vid' => 'health_care_service_taxonomy']);

  foreach ($terms as $term) {
    // Check if owner is already set to term tid 46.
    $owner = intval($term->field_owner->target_id);
    if ($owner !== $tid) {
      $term->set('field_owner', NULL);
      $term->field_owner[] = ['target_id' => $tid];
      try {
        $saved = $term->save();
        $updated = (is_int($saved) && $saved > 0) ? $updated + 1 : $updated;
        Drupal::logger('va_gov_backend')->log(LogLevel::INFO, 'VHA health service taxonomy: Updated owner for term "%term_name".', [
          '%term_name' => $term->label(),
        ]);
      }
      catch (\Exception $e) {
        $failed = (is_int($saved) && $saved <= 0) ? $failed + 1 : $failed;
        Drupal::logger('va_gov_backend')->log(LogLevel::ERROR, 'VHA health service taxonomy: Error updating owner for term "%term_name". Do it manually. Error message: %error_message.', [
          '%term_name' => $term->label(),
          '%error_message' => $e->getMessage(),
        ]);
      }
    }
  }

  Drupal::logger('va_gov_backend')->log(LogLevel::INFO, 'VHA health service taxonomy: Successfully updated an owner for %updated out of %count terms. Failed to update %failed out of %count terms.', [
    '%count' => count($terms),
    '%updated' => $updated,
    '%failed' => $failed,
  ]);
}

/**
 * Resave nodes of some content types to regenerate path alias.
 */
function va_gov_backend_update_8005() {

  // Adding event ct here, to cover any aliases from VACMS-1328.
  $bundles = [
    'event',
    'health_care_local_health_service',
    'outreach_asset',
    'regional_health_care_service_des',
    'support_service',
  ];

  $storage = \Drupal::entityTypeManager()->getStorage('node');

  foreach ($bundles as $bundle) {
    $updated = 0;
    $failed = 0;
    $failed_nids = [];
    $entities = $storage->loadByProperties(['type' => $bundle]);

    foreach ($entities as $entity) {
      // Save in order to update path alias without creating a new revision.
      $saved = $entity->save();
      $updated = (is_int($saved) && $saved > 0) ? $updated + 1 : $updated;
      $failed = (is_int($saved) && $saved <= 0) ? $failed + 1 : $failed;
      $failed_nids = (is_int($saved) && $saved <= 0) ? $failed_nids[$entity->id()] : $failed_nids;
    }

    Drupal::logger('va_gov_backend')
      ->log(LogLevel::INFO, 'Path Alias for %bundle: Successfully updated path alias for %updated out of %count entities. %failed %failed_nids', [
        '%bundle' => $bundle,
        '%count' => count($entities),
        '%updated' => $updated,
        '%failed' => $failed ? 'Failed to update ' . $failed . ' out of %count.' : NULL,
        '%failed_nids' => count($failed_nids) ? 'Failed nids: ' . implode(', ', $failed_nids) . '.' : NULL,
      ]);
  }
}

/**
 * Remove field_office from four content types.
 */
function va_gov_backend_update_8006() {
  $bundles = [
    'event',
    'news_story',
    'press_release',
    'publication',
  ];
  foreach ($bundles as $bundle) {
    $field = FieldConfig::loadByName('node', $bundle, 'field_office');
    if ($field) {
      $field->delete();
    }
  }
}

/**
 * Remove metatag fieldgroup, title & description fields from LC content types.
 */
function va_gov_backend_update_8007() {
  $lc_bundles = [
    'checklist',
    'faq_multiple_q_a',
    'media_list_images',
    'media_list_videos',
    'q_a',
    'step_by_step',
    'support_resources_detail_page',
  ];
  foreach ($lc_bundles as $bundle) {
    if ($field = FieldConfig::loadByName('node', $bundle, 'field_description')) {
      $field->delete();
      Drupal::logger('va_gov_backend')->log(LogLevel::INFO, 'Deleted field_description from content type "%bundle".', [
        '%bundle' => $bundle,
      ]);
    }
    if ($field = FieldConfig::loadByName('node', $bundle, 'field_meta_title')) {
      $field->delete();
      Drupal::logger('va_gov_backend')->log(LogLevel::INFO, 'Deleted field_meta_title from content type "%bundle".', [
        '%bundle' => $bundle,
      ]);
    }
    if ($metatag_fg = field_group_load_field_group('group_metadata', 'node', $bundle, 'view', 'default')) {
      field_group_group_delete($metatag_fg);
      Drupal::logger('va_gov_backend')->log(LogLevel::INFO, 'Deleted group_metadata view fieldgroup from content type "%bundle".', [
        '%bundle' => $bundle,
      ]);
    }
    if ($metatag_fg = field_group_load_field_group('group_meta_tags', 'node', $bundle, 'view', 'default')) {
      field_group_group_delete($metatag_fg);
      Drupal::logger('va_gov_backend')->log(LogLevel::INFO, 'Deleted group_meta_tags view fieldgroup from content type "%bundle".', [
        '%bundle' => $bundle,
      ]);
    }
    if ($metatag_fg = field_group_load_field_group('group_meta_tags', 'node', $bundle, 'form', 'default')) {
      field_group_group_delete($metatag_fg);
      Drupal::logger('va_gov_backend')->log(LogLevel::INFO, 'Deleted group_meta_tags form fieldgroup from content type "%bundle".', [
        '%bundle' => $bundle,
      ]);
    }
  }
}
