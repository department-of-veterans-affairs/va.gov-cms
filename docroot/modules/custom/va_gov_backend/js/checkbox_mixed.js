/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
function createCheckboxMixed(domNode) {
  var mixedNode = domNode.querySelector('[role="checkbox"]');
  var checkboxNodes = domNode.parentNode.querySelectorAll('input[type="checkbox"]');
  function updateCheckboxStates() {
    for (var i = 0; i < checkboxNodes.length; i++) {
      var checkboxNode = checkboxNodes[i];
      checkboxNode.setAttribute("data-last-state", checkboxNode.checked);
    }
  }
  function updateMixed() {
    var count = 0;
    for (var i = 0; i < checkboxNodes.length; i++) {
      if (checkboxNodes[i].checked) {
        count += 1;
      }
    }
    if (count === 0) {
      mixedNode.setAttribute("aria-checked", "false");
    } else if (count === checkboxNodes.length) {
      mixedNode.setAttribute("aria-checked", "true");
    } else {
      mixedNode.setAttribute("aria-checked", "mixed");
      updateCheckboxStates();
    }
  }
  function anyLastChecked() {
    var count = 0;
    for (var i = 0; i < checkboxNodes.length; i++) {
      if (checkboxNodes[i].getAttribute("data-last-state") === "true") {
        count += 1;
      }
    }
    return count > 0;
  }
  function setCheckboxes(value) {
    for (var i = 0; i < checkboxNodes.length; i++) {
      var checkboxNode = checkboxNodes[i];
      switch (value) {
        case "last":
          checkboxNode.checked = checkboxNode.getAttribute("data-last-state") === "true";
          break;
        case "true":
          checkboxNode.checked = true;
          break;
        default:
          checkboxNode.checked = false;
          break;
      }
    }
    updateMixed();
  }
  function toggleMixed() {
    var state = mixedNode.getAttribute("aria-checked");
    var action = void 0;
    if (state === "false") {
      action = anyLastChecked() ? "last" : "true";
    } else if (state === "mixed") {
      action = "true";
    } else {
      action = "false";
    }
    setCheckboxes(action);
    updateMixed();
  }
  function onMixedKeydown(event) {
    if (event.key === " ") {
      event.preventDefault();
    }
  }
  function onMixedKeyup(event) {
    switch (event.key) {
      case " ":
        toggleMixed();
        event.stopPropagation();
        break;
      default:
        break;
    }
  }
  mixedNode.addEventListener("keydown", onMixedKeydown);
  mixedNode.addEventListener("keyup", onMixedKeyup);
  mixedNode.addEventListener("click", toggleMixed);
  mixedNode.addEventListener("focus", function () {
    return mixedNode.classList.add("focus");
  });
  mixedNode.addEventListener("blur", function () {
    return mixedNode.classList.remove("focus");
  });
  for (var i = 0; i < checkboxNodes.length; i++) {
    var checkboxNode = checkboxNodes[i];
    checkboxNode.addEventListener("click", function (event) {
      event.currentTarget.setAttribute("data-last-state", event.currentTarget.checked);
      updateMixed();
    });
    checkboxNode.addEventListener("focus", function (event) {
      event.currentTarget.parentNode.classList.add("focus");
    });
    checkboxNode.addEventListener("blur", function (event) {
      event.currentTarget.parentNode.classList.remove("focus");
    });
    checkboxNode.setAttribute("data-last-state", checkboxNode.checked);
  }
  updateMixed();
}
(function (Drupal) {
  Drupal.behaviors.selectAllOptions = {
    attach: function attach(context) {
      once("checkbox-mixed", ".checkbox-mixed", context).forEach(function (element) {
        createCheckboxMixed(element);
      });
    }
  };
})(window.Drupal, window.once);