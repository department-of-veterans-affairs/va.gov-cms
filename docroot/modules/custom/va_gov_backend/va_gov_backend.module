<?php

/**
 * @file
 * Contains va_gov_backend.module.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;
use Drupal\va_gov_build_trigger\Form\PreviewForm;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function va_gov_backend_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_form_helper module.
    case 'help.page.va_gov_form_helper':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>Tools to improve backend user experience for VA.gov</p>';
      $output .= '<ul>';
      $output .= '<li>Hide Trigger Text field in Alert paragraph form unless Alert Type is Expanding</li>';
      $output .= '</ul>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Get our role descriptions.
 */
function va_gov_backend_form_user_form_alter(array &$form) {
  if (isset($form['account']['roles'])) {
    foreach (Role::loadMultiple() as $id => $role) {
      if ($role instanceof RoleInterface) {
        $form['account']['roles'][$id]['#description'] = $role->getThirdPartySetting('va_gov_backend', 'vgb_description');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set our role descriptions.
 */
function va_gov_backend_form_user_role_form_alter(array &$form, FormStateInterface $form_state) {
  $role = $form_state->getFormObject()->getEntity();
  $form['vgb_description'] = [
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Additional relevant information about this role, such as where it is used and what it is for.'),
    '#default_value' => $role->getThirdPartySetting('va_gov_backend', 'vgb_description'),
    '#weight' => 1,
  ];

  $form['#entity_builders'][] = 'va_gov_backend_form_user_role_form_builder';
}

/**
 * Entity builder for the role configuration entity.
 *
 * @param string $entity_type
 *   The name of the entity_type.
 * @param Drupal\user\Entity\Role $role
 *   Instance of Role class.
 * @param array $form
 *   The node form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Instance of FormStateInterface.
 *
 *   Saves our description field input.
 */
function va_gov_backend_form_user_role_form_builder($entity_type, Role $role, array &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('vgb_description')) {
    $role->setThirdPartySetting('va_gov_backend', 'vgb_description', $form_state->getValue('vgb_description'));
    return;
  }

  $role->unsetThirdPartySetting('va_gov_backend', 'vgb_description');
}

/**
 * Implements hook_element_info_alter().
 */
function va_gov_backend_element_info_alter(array &$info) {
  if (isset($info['datetime'])) {
    $info['datetime']['#process'][] = 'va_gov_backend_datetime_set_format';
  }
}

/**
 * Element process callback for datetime fields.
 */
function va_gov_backend_datetime_set_format($element) {
  // Remove seconds in browsers that support HTML5 type=date.
  // Safe to use in all contexts - does not change timestamp storage.
  // Does not result in form validation errors.
  $element['time']['#attributes']['step'] = 60;
  return $element;
}

/**
 * After-build callback for press release address field.
 */
function va_gov_backend_press_release_address_after_build(array $element, FormStateInterface $form_state) {
  // Require the country to be selected.
  $element[0]['address']['country_code']['country_code']['#required'] = TRUE;
  unset($element[0]['address']['country_code']['country_code']['#options']['']);
  return $element;
}

/**
 * Implements hook_form_FORMID_alter().
 */
function va_gov_backend_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form['#id'] === 'views-exposed-form-health-service-offerings-service-offerings-dash') {
    // Change our textfield to a dropdown displaying all VAMC systems.
    _va_gov_backend_add_vamc_regions_select($form);
  }
}

/**
 * A Change text input to select list of VAMC systems.
 *
 * @param array $form
 *   The exposed widget form array.
 */
function _va_gov_backend_add_vamc_regions_select(array &$form) {
  // Query nodes.
  $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
  $nids = $storage->getQuery();

  // Gather vamc nodes and sort by title.
  $nids = $nids->condition('type', 'health_care_region_page')
    ->sort('title')
    ->execute();

  // If there are no nodes, move on.
  if (!$nids) {
    return FALSE;
  }

  // Start building out the options for our select list.
  $options = [];
  $nodes = $storage->loadMultiple($nids);

  // Push titles into select list.
  foreach ($nodes as $node) {
    $options[$node->getTitle()] = $node->getTitle();
  }

  // Start building out our replacement form element.
  $form['title']['#type'] = 'select';
  $form['title']['#multiple'] = FALSE;

  // Specify the empty option for our select list.
  $form['title']['#empty_option'] = t('VAMC');

  // Add the $options from above to our select list.
  $form['title']['#options'] = $options;
  unset($form['title']['#size']);
}

/**
 * Used to return clp panel fields and paragraphs.
 *
 * @return array
 *   The clp panel field data.
 */
function _va_gov_backend_get_clp_toggles() {
  // Add clp panels data to this array to enable state management.
  // Make sure required fields are not set to required in config when using
  // this pattern.
  return [
    'toggle_groups' => [
      [
        'trigger' => 'field_clp_events_panel',
        'toggle_fields' => [
          'field_clp_events_header' => [
            'required' => TRUE,
          ],
        ],
        'toggle_paragraphs' => [
          'field_clp_events_references' => [
            'required' => TRUE,
            'show-indicator' => TRUE,
          ],
        ],
      ],
      [
        'trigger' => 'field_clp_resources_panel',
        'toggle_fields' => [
          'field_clp_resources_header' => [
            'required' => TRUE,
          ],
          'field_clp_resources_intro_text' => [
            'required' => TRUE,
          ],
        ],
        'toggle_paragraphs' => [
          'field_clp_resources_cta' => [
            'required' => FALSE,
          ],
          'field_clp_resources' => [
            'required' => TRUE,
            'show-indicator' => TRUE,
          ],
        ],
      ],
      [
        'trigger' => 'field_clp_spotlight_panel',
        'toggle_fields' => [
          'field_clp_spotlight_header' => [
            'required' => TRUE,
          ],
          'field_clp_spotlight_intro_text' => [
            'required' => TRUE,
          ],
        ],
        'toggle_paragraphs' => [
          'field_clp_spotlight_cta' => [
            'required' => FALSE,
          ],
          'field_clp_spotlight_link_teasers' => [
            'required' => TRUE,
            'show-indicator' => TRUE,
          ],
        ],
      ],
      [
        'trigger' => 'field_clp_stories_panel',
        'toggle_fields' => [
          'field_clp_stories_header' => [
            'required' => TRUE,
          ],
          'field_clp_stories_intro' => [
            'required' => TRUE,
          ],
        ],
        'toggle_paragraphs' => [
          'field_clp_stories_cta' => [
            'required' => TRUE,
            'show-indicator' => TRUE,
          ],
          'field_clp_stories_teasers' => [
            'required' => TRUE,
            'show-indicator' => TRUE,
          ],
        ],
      ],
      [
        'trigger' => 'field_clp_video_panel',
        'toggle_fields' => [
          'field_clp_video_panel_header' => [
            'required' => TRUE,
          ],
        ],
        'toggle_paragraphs' => [
          'field_clp_video_panel_more_video' => [
            'required' => FALSE,
          ],
          'field_media' => [
            'required' => TRUE,
            'show-indicator' => TRUE,
          ],
        ],
      ],
      [
        'trigger' => 'field_clp_faq_panel',
        'toggle_fields' => [],
        'toggle_paragraphs' => [
          'field_clp_faq_paragraphs' => [
            'required' => TRUE,
            'show-indicator' => TRUE,
          ],
          'field_clp_faq_cta' => [
            'required' => FALSE,
          ],
        ],
      ],
    ],
  ];
}

/**
 * Processes multiple toggles of field states when trigger element is toggled.
 *
 * @param array $form
 *   The exposed widget form array.
 * @param array $toggles
 *   The array containing arrays of trigger and toggle fields.
 */
function _va_gov_toggle_fields_states(array &$form, array $toggles) {
  if (!empty($toggles['toggle_groups']) && is_array($toggles['toggle_groups'])) {
    foreach ($toggles['toggle_groups'] as $toggle_group) {
      // Toggle the fields.
      _va_gov_toggle_field_states($form, $toggle_group);
    }
  }
}

/**
 * Toggles field states when selector element is toggled.
 *
 * @param array $form
 *   The exposed widget form array.
 * @param array $toggle_group
 *   The array containing the trigger and fields/paragraphs to toggle.
 * @codingStandardsIgnoreStart
 * @code
 *  [
 *    'trigger' => 'field_to_act_as_toggle_trigger',
 *    'toggle_fields' => [
 *       'field_to_hide_or_show' => [
 *         'required' => TRUE,
 *       ],
 *     ],
 *    'toggle_paragraphs' => [
 *       'field_of_paragraph_to_hide_or_show' => [
 *          'required' => TRUE,
 *      ],
 *    ],
 *  ]
 * @endcode
 * @codingStandardsIgnoreEnd
 */
function _va_gov_toggle_field_states(array &$form, array $toggle_group) {
  if (isset($form[$toggle_group['trigger']])) {
    // The trigger is present so show/hide the associated fields.
    foreach ($toggle_group['toggle_fields'] as $key => $field) {
      $form[$key]['widget']['0']['value']['#states'] = [
        'required' => [
          ['input[name="' . $toggle_group['trigger'] . '[value]"]' => ['checked' => $field['required']]],
        ],
        'visible' => [
          ['input[name="' . $toggle_group['trigger'] . '[value]"]' => ['checked' => TRUE]],
        ],
        'disabled' => [
          ['input[name="' . $toggle_group['trigger'] . '[value]"]' => ['checked' => FALSE]],
        ],

      ];
    }
    foreach ($toggle_group['toggle_paragraphs'] as $paragraph_key => $paragraph_field) {
      $form[$paragraph_key]['#states'] = [
        'required' => [
          ['input[name="' . $toggle_group['trigger'] . '[value]"]' => ['checked' => $paragraph_field['required']]],
        ],
        'visible' => [
         ['input[name="' . $toggle_group['trigger'] . '[value]"]' => ['checked' => TRUE]],
        ],
        'disabled' => [
         ['input[name="' . $toggle_group['trigger'] . '[value]"]' => ['checked' => FALSE]],
        ],
      ];
      if (!empty($paragraph_field['show-indicator'])) {
        $form[$paragraph_key]['#states']['show-indicator'] = [
         ['input[name="' . $toggle_group['trigger'] . '[value]"]' => ['checked' => TRUE]],
        ];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function va_gov_backend_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Prevent system title from being edited on the edit form by non admins.
  if ($form_id === 'node_health_care_region_page_edit_form') {
    _va_gov_backend_vamc_title_access($form);
  }

  if (isset($form['field_hservice_appt_intro_select'])) {
    $form['field_hservice_appt_leadin']['widget'][0]['value']['#title_display'] = 'invisible';
    _va_gov_backend_modify_appt_intro_text_states($form, $form_state);
    $form['#validate'][] = '_va_gov_backend_appt_intro_text_validation';
  }

  // Disable path alias modification after lc node is published.
  _va_gov_disable_alias_widget($form, $form_state);

  if ($form_id === 'node_campaign_landing_page_form' || $form_id === 'node_campaign_landing_page_edit_form') {
    $clp_toggles = _va_gov_backend_get_clp_toggles();
    _va_gov_toggle_fields_states($form, $clp_toggles);
    // Change story link teaser with image add button on clp form.
    if (!empty($form['field_clp_stories_teasers']['widget']['add_more']['add_more_button_link_teaser_with_image'])) {
      $form['field_clp_stories_teasers']['widget']['add_more']['add_more_button_link_teaser_with_image']['#value'] = t('Add story');
    }
  }

  // Add states + custom validation if the Standalone Page field is present.
  if (isset($form['field_standalone_page'])) {
    $form['field_primary_category']['widget']['#states']['required']['input[id="edit-field-standalone-page-value"]'] = ['checked' => TRUE];
    $form['field_tags']['widget'][0]['subform']['field_topics']['#states']['required']['input[id="edit-field-standalone-page-value"]'] = ['checked' => TRUE];

    // Change field uri widget to optional.
    $form['field_related_information']['widget'][0]['subform']['field_link']['widget'][0]['uri']['#required'] = FALSE;

    foreach ($form['field_buttons']['widget'] as $idx => $val) {
      if (is_numeric($idx)) {
        $form['field_buttons']['widget'][$idx]['subform']['field_button_label']['widget'][0]['value']['#states']['required']['input[id="edit-field-standalone-page-value"]'] = ['checked' => TRUE];
        $form['field_buttons']['widget'][$idx]['subform']['field_button_link']['widget'][0]['uri']['#states']['required']['input[id="edit-field-standalone-page-value"]'] = ['checked' => TRUE];
      }
    }

    // Add custom validation.
    array_unshift($form['#validate'], '_va_gov_backend_standalone_page_validation');
  }
  else {
    // Mark CTA button fields as required.
    if (!empty($form['field_buttons'])) {
      foreach ($form['field_buttons']['widget'] as $idx => $val) {
        if (is_numeric($idx)) {
          $form['field_buttons']['widget'][$idx]['subform']['field_button_label']['widget'][0]['value']['#required'] = TRUE;
          $form['field_buttons']['widget'][$idx]['subform']['field_button_link']['widget'][0]['uri']['#required'] = TRUE;
        }
      }
    }
  }

  // If Contact Information paragraph component.
  if (isset($form['field_contact_information'])) {
    $form['#validate'][] = '_va_gov_backend_contact_information_validation';
  }

  // Add custom behavior for Audience & Topics paragraph form.
  if (isset($form['field_tags'])) {
    // Add custom validation.
    $form['#validate'][] = '_va_gov_backend_audience_topics_validation';
    // Add the helper JS library.
    $form['field_tags']['widget']['#attached']['library'][] = 'va_gov_backend/audience_topics';
  }
  if (isset($form['field_datetime_range_timezone'])) {
    _va_gov_backend_smart_date_formatting($form, $form_state);
  };

  $targets = [
    'field_office',
    'field_listing',
  ];

  _va_gov_backend_dropdown_field_access($form, $targets);

  if ($form_id === 'workbench_access_assign_user') {
    $form['#submit'][] = 'va_gov_backend_workbench_assign_user_form_submit';
  }

  if ($form_id === 'redirect_redirect_edit_form' || $form_id === 'redirect_redirect_form') {
    $value = 'prefix';
    if ($form_id === 'redirect_redirect_edit_form') {
      $src_path = $form['redirect_source']['widget'][0]['path']['#default_value'];
      $connection = \Drupal::database()->select('redirect', 'r');
      $connection->fields('r', ['redirect_redirect__options']);
      $connection->condition('r.redirect_source__path', $src_path, '=');
      $query = unserialize($connection->execute()->fetchField());
      $value = !empty($query['matchType']) ? $query['matchType'] : '';
    }
    $form['redirect_match_type'] = [
      '#type' => 'select',
      '#options' => [
        'prefix' => 'prefix',
        'exact_match' => 'exact match',
        'regex_case_sensitive' => 'regex case sensitive',
        'regex_case_insensitive' => 'regex case insensitive',
        'non_re' => 'non re',
      ],
      '#title' => t('Match Type'),
      '#default_value' => $value,
    ];
    $form['actions']['submit']['#submit'][] = 'va_gov_backend_form_alter_redirect_submit';
  }

  if ($form_id === 'node_vamc_operating_status_and_alerts_edit_form') {
    // Hide field_office for existing operating statuses: they won't be moved.
    // @todo Consider disabling it instead of hiding it.
    $form['field_office']['#attributes']['class'] = 'hidden';
  }

  if ($form_id === 'views_bulk_operations_configure_action') {
    $build_info = $form_state->getBuildInfo();
    // We need to target only the VBO "Modify field values" form from
    // Facility Status tool.
    if ($build_info['args'][0] === 'facility_governance' && $build_info['args'][1] === 'page_1') {
      _va_gov_backend_vbo_facility_status_form_ui($form, $form_state);
    }
  }

  // Add to node forms in workflow.
  if (in_array('node_form', (array) $form['#theme'])) {
    $form['actions']['preview'] = [
      '#ief_submit_trigger' => TRUE,
      '#ief_submit_trigger_all' => TRUE,
      '#type' => 'submit',
      '#weight' => 10,
      '#value' => 'Save draft and continue editing',
      '#submit' => ['::submitForm', 'va_gov_backend_form_alter_submit'],
    ];

    // Remove the default preview button from types not in workflow.
    $node_type = $form_state->getFormObject()->getEntity()->getType();
    $types_in_workflow = \Drupal::entityTypeManager()->getStorage('workflow')->load('editorial')->get('type_settings')['entity_types']['node'];
    if (!in_array($node_type, $types_in_workflow)) {
      unset($form['actions']['preview']);
    }

  }

  // Add after_build callback for Press Release node forms.
  if ($form_id === 'node_press_release_form' || $form_id === 'node_press_release_edit_form') {
    $form['field_address']['widget']['#after_build'][] = 'va_gov_backend_press_release_address_after_build';
  }

}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function va_gov_backend_field_group_form_process_build_alter(array $form, FormStateInterface $form_state, &$element) {
  // Toggle group Q&A component visibility.
  $form['group_q_a_page_components']['#states']['visible']['input[id="edit-field-standalone-page-value"]'] = ['checked' => TRUE];
}

/**
 * Implements hook_form_FORM_ID_alter() for field_config_edit_form.
 */
function va_gov_backend_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $widget_type = $form['default_value']['widget'][0]['#type'] ?? NULL;
  if ($widget_type === 'tablefield') {
    $form['default_value']['widget'][0]['caption']['#description'] = t('This brief caption will be associated with the table, rendered as a table heading in bold and will help screen reader better describe the content within.');
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for moderation_state widgets.
 */
function va_gov_backend_field_widget_moderation_state_default_form_alter(&$element, FormStateInterface $form_state, $context) {
  $base_form_id = $form_state->getBuildInfo()['base_form_id'];
  if ($base_form_id === 'node_form') {

    // Set default new state to "Draft" when node is in "Published" state
    // to help prevent accidentally publishing un-proofed edits.
    if ($form_state->getFormObject()->getEntity()->isPublished()) {
      $element['state']['#default_value'] = 'draft';
    }

    $element['state']['#title'] = t('Save as');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for media_library_add_form_upload.
 */
function va_gov_backend_form_media_library_add_form_upload_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'va_gov_backend/media_library_add_form_upload';
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for checkbox widgets.
 */
function va_gov_backend_field_widget_boolean_checkbox_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  if ($field_definition instanceof FieldConfig) {
    list ($entity_type, $bundle, $field_name) = explode('.', $field_definition->id());
    if ($entity_type === 'media' && $field_name === 'field_media_in_library') {
      $element['value']['#attributes']['class'][] = 'field_media_in_library';
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * Changes entity view display based on trigger field.
 */
function va_gov_backend_entity_view_alter(array &$build, EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'q_a') {
    if ($entity->get('field_standalone_page')->getString() !== '1') {
      $standalone_only_fields = [
        'field_alert_single',
        'field_buttons',
        'field_related_benefit_hubs',
        'field_related_information',
        'field_contact_information',
        'field_primary_category',
        'field_other_categories',
        'field_tags',
      ];
      foreach ($standalone_only_fields as $standalone_only_field) {
        unset($entity->$standalone_only_field);
        unset($build[$standalone_only_field]);
      }
    }
  }

  // Check if correct content bundle and unset fields.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'health_care_local_health_service') {
    foreach (_va_gov_backend_unset_fields($entity) as $appt_intro_field) {
      unset($entity->$appt_intro_field);
      unset($build[$appt_intro_field]);
    }
  };
}

/**
 * Returns the fields that need to be unset.
 *
 * @return array
 *   Fields that should be unset.
 */
function _va_gov_backend_unset_fields(EntityInterface $entity) {
  $appt_intro_select = $entity->field_hservice_appt_intro_select->value;
  if ($appt_intro_select === 'default_intro_text') {
    return [
      'field_hservice_appt_leadin',
    ];
  }
  elseif ($appt_intro_select === 'custom_intro_text') {
    return [
      'field_hservices_lead_in_default',
    ];
  }
  else {
    return [
      'field_hservices_lead_in_default',
      'field_hservice_appt_leadin',
    ];
  }
}

/**
 * Returns the content types that do not need alias locked upon publish.
 *
 * @return array
 *   Node types that should have their alias locked upon publishing.
 */
function _va_gov_backend_get_unlocked_alias_bundles() {

  // Insert into array bundles that do not need alias locked upon publish.
  return [];
}

/**
 * Determines whether or not user can edit vamc title.
 *
 * @param array $form
 *   The node form array.
 */
function _va_gov_backend_vamc_title_access(array &$form) {
  $allowed_roles = [
    'administrator',
    'content_admin',
  ];
  $current_user_roles = \Drupal::currentUser()->getRoles();
  $admin_role_count = count(array_intersect($allowed_roles, $current_user_roles));
  if ($admin_role_count < 1) {
    $form['title']['#disabled'] = 'disabled';
  }
}

/**
 * Visibility of Appointment Lead-in Text field.
 *
 * @param array $form
 *   The node form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Instance of FormStateInterface.
 */
function _va_gov_backend_modify_appt_intro_text_states(array &$form, FormStateInterface $form_state) {
  if (isset($form['field_hservice_appt_intro_select'])) {
    $form['field_hservice_appt_leadin']['#states'] = [
      'visible' => [
        ':input[name="field_hservice_appt_intro_select"]' => ['value' => 'custom_intro_text'],
      ],
    ];
    $form['field_hservices_lead_in_default']['#states'] = [
      'visible' => [
        ':input[name="field_hservice_appt_intro_select"]' => ['value' => 'default_intro_text'],
      ],
    ];
  }
}

/**
 * Adds Validation to check for an empty Appointment lead-in field.
 *
 * @param array $form
 *   The exposed widget form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _va_gov_backend_appt_intro_text_validation(array $form, FormStateInterface $form_state) {
  if (!empty($form_state->getValue('field_hservice_appt_leadin')) && !empty($form_state->getValue('field_hservice_appt_intro_select'))) {
    $intro_type = $form_state->getValue('field_hservice_appt_intro_select');
    $intro_text_value = $form_state->getValue('field_hservice_appt_leadin');
  }
  if ($intro_type[0]['value'] === 'custom_intro_text') {
    if (($intro_text_value[0]['value'] === "")) {
      $form_state->setErrorByName("field_hservice_appt_leadin", t('Appointment lead-in text required'));
    }
  }
}

/**
 * Disable url alias widget after publish.
 *
 * @param array $form
 *   The node form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Instance of FormStateInterface.
 */
function _va_gov_disable_alias_widget(array &$form, FormStateInterface $form_state) {
  if (!($form_state->getFormObject() instanceof EntityFormInterface)) {
    return;
  }

  $entity = $form_state->getformObject()->getEntity();

  if (!($entity instanceof TermInterface) && !($entity instanceof NodeInterface)) {
    return;
  }

  // If entity is not ignored and entity is published
  // and entity is not new then unchecked the generate automatic URL alias
  // to disallow auto path updating.
  if (!in_array($entity->bundle(), _va_gov_backend_get_unlocked_alias_bundles()) &&
    $entity->isPublished() && !$entity->isNew()) {
    $form['#after_build'][] = '_va_gov_backend_node_after_build_uncheck_auto_alias';
  }
}

/**
 * Uncheck the auto pathalias checkbox.
 *
 * @param array $form
 *   The node form array.
 *
 * @return array
 *   The $form.
 */
function _va_gov_backend_node_after_build_uncheck_auto_alias(array $form) {
  // Unchecks the checkbox for pathauto.
  $form['path']['widget'][0]['pathauto']['#checked'] = FALSE;

  return $form;
}

/**
 * Custom validation callback for the audience_topics paragraph type.
 *
 * @param array $form
 *   The exposed widget form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _va_gov_backend_audience_topics_validation(array $form, FormStateInterface &$form_state) {
  if (!empty($form_state->getValue('field_tags'))) {

    // The tags field is not required if the Standalone Page field
    // is present and not checked.
    if (!empty($form['field_standalone_page']) && empty($form_state->getValue('field_standalone_page')['value'])) {
      return;
    }

    // Ensure that at least 1 and no more than 4 tags are selected
    // between the Topic and Audience fields.
    $tag_count = 0;

    if (isset($form_state->getValue('field_tags')[0])) {
      $tags_paragraph_values = $form_state->getValue('field_tags')[0];

      // Account for the fact that it's possible to select 'N/A'
      // for the beneficiary value.
      if (!empty($tags_paragraph_values['subform']['field_audience_beneficiares'][0]['target_id'])) {
        $tag_count += 1;
      }
      // Account for the fact that it's possible to select 'N/A'
      // for the non-beneficiary value.
      if (!empty($tags_paragraph_values['subform']['field_non_beneficiares'][0]['target_id'])) {
        $tag_count += 1;
      }
      if (!empty($tags_paragraph_values['subform']['field_topics'])) {
        $tag_count += count($tags_paragraph_values['subform']['field_topics']);
      }
    }

    if ($tag_count == 0) {
      $form_state->setErrorByName('field_tags][0][subform][field_topics', t('Please select at least one Topic or Audience tag.'));
    }
    elseif ($tag_count > 4) {
      $form_state->setErrorByName('field_tags][0][subform][field_topics', t('No more than 4 Topic/Audience tags may be selected.'));
    }
  }
}

/**
 * Custom validation callback for the primary category and related info fields.
 *
 * @param array $form
 *   The exposed widget form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _va_gov_backend_standalone_page_validation(array &$form, FormStateInterface &$form_state) {
  if ($form_state->getValue('field_standalone_page')['value'] === 0) {
    // If we don't unset this field, validation prevents the form from
    // submitting. This is undesirable when the standalone option is not
    // toggled on.
    $form_state->unsetValue('field_related_information');
  }
  if (!empty($form_state->getValue('field_standalone_page')['value'])) {
    if (empty($form_state->getValue('field_primary_category'))) {
      $form['field_primary_category']['#required'] = TRUE;
      $form_state->setErrorByName('field_primary_category', t('Primary category field is required.'));
    }
  }
}

/**
 * For formatting smart_date widget treatment.
 *
 * @param array $form
 *   The node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The node form state.
 */
function _va_gov_backend_smart_date_formatting(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  $type = $form_object->getEntity()->getEntityType()->id();
  $bundle = $form_object->getEntity()->bundle();
  // Move the help text from the bottom of the widget to the top.
  $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($type, $bundle);
  $description = !empty($definitions['field_datetime_range_timezone']) ? $definitions['field_datetime_range_timezone']->get('description') : '';
  $form['field_datetime_range_timezone']['widget'][0]['value']['#prefix'] = '<div class="description">' . $description . '</div>';
  unset($form['field_datetime_range_timezone']['widget'][0]['#description']);
  // Only show start time unless event.
  if ($bundle !== 'event') {
    $form['field_datetime_range_timezone']['widget'][0]['end_value']['#attributes']['class'][] = 'hidden';
    $form['field_datetime_range_timezone']['widget'][0]['duration']['#attributes']['class'][] = 'hidden';
    unset($form['field_datetime_range_timezone']['widget'][0]['duration']['#title']);
    unset($form['field_datetime_range_timezone']['widget'][0]['end_value']['#title']);
    unset($form['field_datetime_range_timezone']['widget'][0]['value']['#title']);
  }
}

/**
 * Adds Validation to check for an empty entity reference field.
 *
 * @param array $form
 *   The exposed widget form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _va_gov_backend_contact_information_validation(array $form, FormStateInterface &$form_state) {
  // If contact information array and fields exist.
  if (!empty($form_state->getValue('field_contact_information')) && !empty($form_state->getValue('field_contact_information')[0]['subform']['field_contact_info_switch']) && !empty($form_state->getValue('field_contact_information')[0]['subform']['field_benefit_hub_contacts'])) {
    $contact_type = $form_state->getValue('field_contact_information')[0]['subform']['field_contact_info_switch'];
    $benefit_hub = $form_state->getValue('field_contact_information')[0]['subform']['field_benefit_hub_contacts'];
    $benefit_hub_contact = array_shift($benefit_hub);
  }

  // If the checkbox is checked.
  if ($contact_type[0]['value'] === 'BHC') {
    if (empty($benefit_hub_contact)) {
      $form_state->setErrorByName("field_contact_information][0][subform][field_benefit_hub_contacts", t('At least one benefit hub contact is required'));
    }
  }
}

/**
 * Submit function for va_gov_build_trigger_form_alter.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state array.
 */
function va_gov_backend_form_alter_submit(array &$form, FormStateInterface $form_state) {

  // We want to associate our user with the revision.
  $uid = Drupal::currentUser()->id();

  // Build the revision info.
  $node = $form_state->getFormObject()->getEntity();
  $node->setNewRevision(TRUE);
  $node->setRevisionCreationTime(\Drupal::time()->getRequestTime());

  // Save it and associate with user.
  $node->setRevisionUserId($uid);
  $node->set('moderation_state', 'draft');
  $node->save();

  $nid = $node->id();
  $url = 'http' . ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 's' : '') . '://' . \Drupal::request()->getHost() . '/node/' . $nid . '/edit';

  // Send them to the edit node.
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * Prefix R&S vocabulary term page titles.
 */
function va_gov_backend_preprocess_page_title(&$variables) {
  $current_route_name = \Drupal::service('current_route_match')->getRouteName();
  if ($current_route_name === 'entity.taxonomy_term.canonical') {
    $term = \Drupal::request()->attributes->get('taxonomy_term');
    $vocabs = [
      'audience_beneficiaries',
      'audience_non_beneficiaries',
      'lc_categories',
      'topics',
    ];
    $vocab = $term->get('vid')->getString();
    if (in_array($vocab, $vocabs)) {

      $variables['title']['#markup'] = t('All articles in:') . ' ' . $variables['title']['#markup'];
    }
  }
}

/**
 * Add preview button to node view.
 */
function va_gov_backend_preprocess_page(&$variables) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    // It's a node.
    $exclusion_types = [
      'documentation_page',
      'event_listing',
      'full_width_banner_alert',
      'health_care_local_health_service',
      'health_services_listing,',
      'leadership_listing',
      'locations_listing',
      'outreach_asset',
      'press_releases_listing',
      'regional_health_care_service_des',
      'support_service',
      'story_listing',
    ];
    // Make sure we aren't on the node form or an excluded type.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if (($route_name !== 'entity.node.edit_form') &&
      (!in_array($node->bundle(), $exclusion_types))) {
      // Make sure we aren't on /training-guide.
      $current_uri = \Drupal::request()->getRequestUri();
      if ($current_uri !== '/training-guide') {
        $node = \Drupal::routeMatch()->getParameter('node');
        $nid = $node->id();
        $host = \Drupal::request()->getHost();
        $preview_form = new PreviewForm();
        $url = $preview_form->getEnvironment($host, $nid);
        $button = '<a class="button button--primary js-form-submit form-submit node-preview-button" target="_blank" href="' . $url . '">Preview</a>';
        $variables['page']['sidebar_second']['#markup'] = $button;
      }
    }
  }
}

/**
 * Modifies UI of the Facility Status VBO Modify Field Values form.
 *
 * The form that allows the user to modify field values contains too many
 * options that are irrelevant to the primary purpose of the tool. This
 * function modifies the form to eliminate UI noise.
 *
 * @param array $form
 *   Form object.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function _va_gov_backend_vbo_facility_status_form_ui(array &$form, FormStateInterface $form_state) {
  // This if Facility Status form.
  // Clean up the UI.
  $bundle_fields = [];
  $entity_data = (isset($form['node']) && is_array($form['node'])) ? $form['node'] : NULL;

  if (!empty($entity_data)) {
    foreach ($entity_data as $bundle => $data) {
      if (is_array($data)) {
        $bundle_fields[$bundle] = $data;
      }
    }
  }

  foreach ($bundle_fields as $bundle => $fields) {
    if (is_array($fields)) {
      foreach ($fields as $field_name => $field_meta) {
        $form['node'][$bundle]['#open'] = TRUE;
        if (!in_array(
            $field_name,
            [
              'field_operating_status_facility',
              'field_operating_status_more_info',
            ]
          )
          && strpos($field_name, '#', 0) === FALSE) {

          // Remove all facility content type fields that are not related
          // to Operating status and Op info from field_selection form.
          unset($form['node'][$bundle]['_field_selector'][$field_name]);

          if (strpos($field_name, '_field_selector', 0) === FALSE) {
            // Remove all facility content type fields that are not related
            // to Operating status and Op info from vbo content type form.
            unset($form['node'][$bundle][$field_name]);
          }
        }
      }
    }
  }

  // Remove multi-value field options, since none of the fields we're editing
  // are multi-value.
  unset($form['options']);
}

/**
 * Callback handler for workbench_access_assign_user form - invalidate cache.
 *
 * @param array $form
 *   The workbench_access_assign_user form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Provides an interface for an object containing the current state of a form.
 */
function va_gov_backend_workbench_assign_user_form_submit(array $form, FormStateInterface $form_state) {
  $raw_path_to_args = $form_state->getBuildInfo()['args'];
  $path_to_args = reset($raw_path_to_args);
  $user_id = $path_to_args->id();
  $tags = ['user:' . $user_id];
  \Drupal::service('cache_tags.invalidator')->invalidateTags($tags);
}

/**
 * For determining dropdown field access on nodeforms.
 *
 * @param array $form
 *   The node form.
 * @param array $targets
 *   The node form fields to check.
 */
function _va_gov_backend_dropdown_field_access(array &$form, array $targets) {
  $user_id = \Drupal::currentUser()->id();
  $perms_service = \Drupal::service('va_gov_user.user_perms');
  // Grabs items user can access per section associations.
  $allowed_options = $perms_service->userOptionsStorage($form, $targets, $user_id);
  // Loop through all of our target fields.
  foreach ($targets as $target) {
    if (in_array($target, $form) && !empty($form[$target]['widget']['#options'])) {
      foreach ($form[$target]['widget']['#options'] as $header_key => $option_header) {
        // Field_listing is an exception. It is a one level field and doesn't
        // have opt groups.
        if ($target === 'field_listing' && !is_array($option_header) && !empty($option_header)) {
          // If not in the allowed items array, take it out.
          if (!in_array($header_key, $allowed_options)) {
            unset($form[$target]['widget']['#options'][$header_key]);
          }
        }
        elseif (is_array($option_header) && !empty($option_header)) {
          foreach ($option_header as $option_key => $option_item) {
            // If not in the allowed items array, take it out.
            if (!in_array($option_key, $allowed_options)) {
              unset($form[$target]['widget']['#options'][$header_key][$option_key]);
            }
          }
        }
      }
    }
  }
}

/**
 * Redirect form alter submit handler to store redirect Match Type.
 */
function va_gov_backend_form_alter_redirect_submit($form, FormStateInterface $form_state) {
  $connection = \Drupal::database();
  $src_path = reset($form_state->getValue('redirect_source', 'path'));
  $match_type = $form_state->getValue('redirect_match_type', 'path');
  $type = ['matchType' => $match_type];
  $converted = serialize($type);
  $connection->update('redirect')
    ->fields(['redirect_redirect__options' => $converted])
    ->condition('redirect_source__path', $src_path, '=')
    ->execute();
}

/**
 * For formatting smart_date paragraph field widget treatment.
 *
 * @param array $element
 *   The paragraph form.
 *
 *   Removes date range end field elements not relevant to situation updates.
 */
function _va_gov_backend_smart_date_paragraph_formatting(array &$element) {
  unset($element['subform']['field_datetime_range_timezone']['widget'][0]['#description']);
  $element['subform']['field_datetime_range_timezone']['widget'][0]['end_value']['#attributes']['class'][] = 'hidden';
  $element['subform']['field_datetime_range_timezone']['widget'][0]['duration']['#attributes']['class'][] = 'hidden';
  unset($element['subform']['field_datetime_range_timezone']['widget'][0]['duration']['#title']);
  unset($element['subform']['field_datetime_range_timezone']['widget'][0]['end_value']['#title']);
  unset($element['subform']['field_datetime_range_timezone']['widget'][0]['value']['#title']);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function va_gov_backend_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Hide Trigger Text in Alert paragraph form unless Alert Type is "Expanding".
  $field_definition = $context['items']->getFieldDefinition();
  /**
   * @var \Drupal\field\Entity\FieldConfig $field_definition */
  $paragraph_entity_reference_field_name = $field_definition->getName();

  $target_paragraph_ref_fields = [
    'field_content_block',
    'field_service_location',
    'field_situation_updates',
    'field_clp_faq_paragraphs',
  ];

  if (in_array($paragraph_entity_reference_field_name, $target_paragraph_ref_fields)) {
    $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);

    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    if ($paragraph_type === 'q_a') {
      _va_gov_backend_restrict_qa_answer_types($element);
    }
    if ($paragraph_type === 'situation_update') {
      _va_gov_backend_smart_date_paragraph_formatting($element);
    }
    if ($paragraph_type == 'alert') {
      $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], 'field_alert_type');

      $element['subform']['field_alert_trigger_text']['#states'] = [
        'visible' => [
          $selector => ['value' => 'expanding'],
        ],
      ];
    }
  }

  // If we have a field ref'ing service location paragraphs, fire function.
  $vha_paragraphs = [
    'field_service_location',
    'field_service_location_address',
    'field_phone_numbers_paragraph',
    'field_phone',
  ];
  if (in_array($paragraph_entity_reference_field_name, $vha_paragraphs)) {
    _va_gov_backend_modify_paragraph_interactions($element, $form_state, $context, $paragraph_entity_reference_field_name);
  }
}

/**
 * Used in clp context.
 *
 * Remove all buttons to only allow for one answer instance.
 *
 * @param array $element
 *   The widget.
 */
function _va_gov_backend_restrict_qa_answer_types(array &$element) {
  $disallowed_types = [
    'add_more_button_wysiwyg',
    'add_more_button_collapsible_panel',
    'add_more_button_process',
    'add_more_button_number_callout',
    'add_more_button_alert',
    'add_more_button_react_widget',
    'add_more_button_table',
  ];
  // Just allow rich_text_limited format on clp.
  $element['subform']['field_answer']['widget'][0]['subform']['field_wysiwyg']['widget'][0]['#allowed_formats'] = ['rich_text_limited'];
  foreach ($disallowed_types as $disallowed_type) {
    unset($element['subform']['field_answer']['widget']['add_more'][$disallowed_type]);
  }
}

/**
 * Implements hook_field_widget_entity_reference_paragraphs_form_alter().
 */
function va_gov_backend_field_widget_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  _va_gov_backend_modify_alert_single_states($element, $form_state, $context);
  _va_gov_backend_modify_contact_information_states($element, $form_state, $context);
}

/**
 * Toggle Reusable and Non-reusable Alert_Single subform fields.
 *
 * Adds Validation constraint error id match to html.
 *
 * @param array $element
 *   The widget.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array $context
 *   The context.
 */
function _va_gov_backend_modify_alert_single_states(array &$element, FormStateInterface &$form_state, array &$context) {
  // Toggle Reusable & Non-reusable Alert_Single subform field on alert select.
  if ($element['#paragraph_type'] === 'alert_single') {
    $element_path = $element['subform']['#parents'];
    $parent_field = array_shift($element_path);
    $element_path_string = implode('][', $element_path);
    // Confirming element path exists before applying states logic to fields.
    if (!empty($parent_field) && !empty($element_path_string)) {
      $selector = ':input[name="' . $parent_field . '[' . $element_path_string . '][field_alert_selection]"]';

      $element['subform']['field_alert_block_reference']['#states'] = [
        'visible' => [
          [$selector => ['value' => 'R']],
        ],
      ];

      $element['subform']['field_alert_non_reusable_ref']['#states'] = [
        'visible' => [
          [$selector => ['value' => 'NR']],
        ],
      ];
    }
  }
}

/**
 * Toggle Default Contact and Benefit Hub Contacts subform fields.
 *
 * Adds Validation constraint error id match to html.
 *
 * @param array $element
 *   The widget.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array $context
 *   The context.
 */
function _va_gov_backend_modify_contact_information_states(array &$element, FormStateInterface &$form_state, array &$context) {
  // Toggle Default Contact and Benefit Hub Contacts subform fields.
  if ($element['#paragraph_type'] === 'contact_information') {
    $element_path = $element['subform']['#parents'];
    $parent_field = array_shift($element_path);
    $element_path_string = implode('][', $element_path);
    // Confirming element path exists before applying states logic to fields.
    if (!empty($parent_field) && !empty($element_path_string)) {
      $selector = ':input[name="' . $parent_field . '[' . $element_path_string . '][field_contact_info_switch]"]';

      $element['subform']['field_contact_default']['#states'] = [
        'visible' => [
          [$selector => ['value' => 'DC']],
        ],
      ];

      $element['subform']['field_benefit_hub_contacts']['#states'] = [
        'visible' => [
          [$selector => ['value' => 'BHC']],
        ],
      ];
    }
  }
}

/**
 * Toggles service_location fields depending on parent selector.
 *
 * Adds Validation constraint error id match to html.
 *
 * @param array $element
 *   The widget.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array $context
 *   The context.
 * @param string $paragraph_entity_reference_field_name
 *   The reference field name.
 */
function _va_gov_backend_modify_paragraph_interactions(array &$element, FormStateInterface &$form_state, array &$context, $paragraph_entity_reference_field_name) {
  $field_definition = $context['items']->getFieldDefinition();

  /**
   * @var \Drupal\field\Entity\FieldConfig $field_definition */
  $paragraph_entity_reference_field_name = $field_definition->getName();
  $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);

  $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
  $paragraph_type = $paragraph_instance->bundle();

  // Toggle hours fields depending on "Use facility hours" select.
  // field_service_location[0][subform][field_service_location_address][0][subform][field_use_facility_address][value].
  if ($paragraph_type === 'service_location') {
    // If use facility hours option is not selected, show address entry fields.
    $toggle_fields = [
      'field_facility_service_hours',
    ];
    $selector = sprintf(':input[name="field_service_location[%1$d][subform][field_hours]"]', $element['#delta']);
    foreach ($toggle_fields as $field) {
      $element['subform'][$field]['#states'] = [
        'visible' => [
          $selector => ['value' => "2"],
        ],
      ];
    }
    // Remove caption, rows, and import fields from address tablefield.
    if (isset($element['subform']['field_facility_service_hours']['widget'][0]['caption'])) {
      unset($element['subform']['field_facility_service_hours']['widget'][0]['#description']);
      unset($element['subform']['field_facility_service_hours']['widget'][0]['caption']);
    }
    $element['subform']['field_facility_service_hours']['widget'][0]['prefix']['#markup'] = t('<div class="description">Format: "8:00 a.m. to 5:30 p.m. ET" or "24/7"</div>');
    $element['subform']['field_facility_service_hours']['widget'][0]['#import'] = FALSE;
    $element['subform']['field_facility_service_hours']['widget'][0]['#addrow'] = FALSE;
    $element['subform']['field_facility_service_hours']['widget'][0]['#rebuild'] = FALSE;
  }

}

/**
 * Implements hook_inline_entity_form_alter().
 */
function va_gov_backend_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  // Show the facility name so that the editor knows what they're editing,
  // but don't let the editor change it. It's driven by Facility API.
  if ($entity_form['#bundle'] === 'health_care_local_facility') {
    $entity_form['title']['widget'][0]['value']['#attributes']['disabled'] = 'disabled';
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function va_gov_backend_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Add phone number validation to our phone number field.
  if ($entity_type->id() === 'paragraph' && $bundle === 'phone_number' && isset($fields['field_phone_number'])) {
    $fields['field_phone_number']->addConstraint('ValidPhoneNumber');
  }
  // Add title duplication prevention validation to q_a nodes.
  if ($entity_type->id() === 'node' && $bundle === 'q_a' && isset($fields['title'])) {
    $fields['title']->addConstraint('UniqueTitle');
  }
  // Add pdf file to check to external document file type.
  if ($entity_type->id() === 'media' && $bundle === 'document_external' && isset($fields['field_media_external_file'])) {
    $fields['field_media_external_file']->addConstraint('PdfCheck');
  }
  // Limit benefit selections to two on CLP.
  if ($entity_type->id() === 'node' && $bundle === 'campaign_landing_page' && isset($fields['field_benefit_categories'])) {
    $fields['field_benefit_categories']->addConstraint('BenefitsSelectionLimit');
  }
  // Add paragraph checks on clp panels.
  if ($entity_type->id() === 'node' && $bundle === 'campaign_landing_page') {
    // Add range check on faq panel.
    if (isset($fields['field_clp_faq_paragraphs'])) {
      $fields['field_clp_faq_paragraphs']->addConstraint('RequiredParagraph', [
        'toggle' => 'field_clp_faq_panel',
        'readable' => 'Q&A',
        'min' => 3,
        'max' => 10,
      ]);
    }
    // Add range check on stories panel.
    if (isset($fields['field_clp_stories_teasers'])) {
      $fields['field_clp_stories_teasers']->addConstraint('RequiredParagraph', [
        'toggle' => 'field_clp_stories_panel',
        'readable' => 'Stories',
        'min' => 1,
        'max' => 2,
      ]);
    }
    // Add range check on spotlight panel.
    if (isset($fields['field_clp_spotlight_link_teasers'])) {
      $fields['field_clp_spotlight_link_teasers']->addConstraint('RequiredParagraph', [
        'toggle' => 'field_clp_spotlight_panel',
        'readable' => 'Links with summaries',
        'min' => 1,
        'max' => 3,
      ]);
    }
    // Add range check on resources panel.
    if (isset($fields['field_clp_resources'])) {
      $fields['field_clp_resources']->addConstraint('RequiredParagraph', [
        'toggle' => 'field_clp_resources_panel',
        'readable' => 'Media resources',
        'min' => 1,
        'max' => 3,
      ]);
    }
    // Add range check on events panel.
    if (isset($fields['field_clp_events_references'])) {
      $fields['field_clp_events_references']->addConstraint('RequiredParagraph', [
        'toggle' => 'field_clp_events_panel',
        'readable' => 'Events',
        'min' => 1,
        'max' => 2,
      ]);
    }
    // Add range check on video panel.
    if (isset($fields['field_media'])) {
      $fields['field_media']->addConstraint('RequiredParagraph', [
        'toggle' => 'field_clp_video_panel',
        'readable' => 'Video',
        'min' => 1,
        'max' => 1,
      ]);
    }

  }
}

/**
 * Implements hook_page_attachments().
 */
function va_gov_backend_page_attachments(array &$attachments) {
  // Add GTM to cms theme.
  $attachments['#attached']['library'][] = 'va_gov_backend/gtm_tag_push';
  // Track GTM click events.
  $attachments['#attached']['library'][] = 'va_gov_backend/gtm_tag_trackers';

  // Pass our relevant data to settings.
  $attachments['#attached']['drupalSettings']['gtm_data'] = _va_gov_backend_gtm_settings();

  $attachments['#attached']['library'][] = 'va_gov_backend/alert_form';
  $attachments['#attached']['library'][] = 'va_gov_backend/system_styles';
  // Nested address, phone, hours, email paragraphs result in multiple deltas.
  // Tracking this with states api gets messy.
  // Bypass and use behaviors directly.
  $attachments['#attached']['library'][] = 'va_gov_backend/service_location_address';
  $attachments['#attached']['library'][] = 'va_gov_backend/service_location_hours';
  $attachments['#attached']['library'][] = 'va_gov_backend/contact_paragraphs_interactions';

  // Handle smart_date widget treatments.
  $attachments['#attached']['library'][] = 'va_gov_backend/smart_date_interactions';

  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin) {
    // Add custom css for paragraph browser.
    $attachments['#attached']['library'][] = 'va_gov_backend/admin_styles';

    return;
  }
}

/**
 * Builds section associations for gtm push array.
 *
 * @return array
 *   Keyed array of the section item names.
 */
function _va_gov_backend_gtm_settings() {
  $sections = [];
  $current_path = \Drupal::service('path.current')->getPath();
  $request = \Drupal::request();
  // Grab our page title.
  if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route);
    $sections['pageTitle'] = $page_title;
  }
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $route = \Drupal::routeMatch()->getRouteName();
    // If we are on node view, get the alias.
    if ($route === 'entity.node.canonical') {
      $current_path = $node->toUrl()->toString();
    }
    $sections['nodeID'] = $node->id();
    $sections['pageTitle'] = $node->getTitle();
    $sections['pagePath'] = $current_path;
    $sections['contentTitle'] = $node->getTitle();
    $sections['contentType'] = $node->bundle();

    if ($node->hasField('field_administration')) {
      $owners = $node->get('field_administration')->referencedEntities();
      if (count($owners)) {
        $sections['contentOwner'] = $owners[0]->getName();
      }
    }

  }
  $user = \Drupal::currentUser();
  $user_roles = $user->getRoles() ?? ['anonymous'];
  $sections['userRoles'] = json_encode($user_roles);
  $uid = $user->id();
  if ($uid > 0) {
    $sections['userId'] = Crypt::hashBase64((string) $uid);
    $section_scheme = \Drupal::entityTypeManager()->getStorage('access_scheme')->load('section');
    $user_sections = \Drupal::service('workbench_access.user_section_storage')->getUserSections($section_scheme, $user);
    if (in_array('administration', $user_sections)) {
      $sections['userSections'] = 'all';
    }
    else {
      $joined_sections = implode(',', $user_sections);
      // 150 is the maximum length of a Google Analytics custom dimension value.
      if (strlen($joined_sections) > 150) {
        $joined_sections = substr($joined_sections, 0, strrpos($joined_sections, ',', 150 - strlen($joined_sections)));
      }
      $sections['userSections'] = $joined_sections;
    }
  }
  return $sections;
}

/**
 * Implements hook_page_bottom().
 */
function va_gov_backend_page_bottom(array &$page_bottom) {
  // Add GTM noscript iframe to body.
  $env_name = \Drupal::config('environment_indicator.indicator')->get('name');
  $env_num = $env_name === 'Production' ? '2' : '5';
  $gtm_noscript = Markup::create('<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-WQ3DLLB&gtm_auth=hHvHnY1eIx1IOSJMAnOBLA&gtm_preview=env-' . $env_num . '&gtm_cookies_win=x" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>');
  $page_bottom['va_gov_backend'] = ['#markup' => $gtm_noscript];
}

/**
 * Implements hook_local_tasks_alter().
 */
function va_gov_backend_menu_local_tasks_alter(&$local_tasks) {
  // Replace the View Json tab with the node view.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $nid = $node->id();
    $local_tasks['tabs'][0]['entity.node.canonical']['#link']['title'] = 'View';
    $local_tasks['tabs'][0]['entity.node.canonical']['#link']['url'] = Url::fromUri('internal:/node/' . $nid);
  }
  // Remove the history tab.
  if (!empty($local_tasks['tabs'][0]['views_view:view.moderation_history.page'])) {
    unset($local_tasks['tabs'][0]['views_view:view.moderation_history.page']);
  }
}

/**
 * Implements hook_mail_alter().
 */
function va_gov_backend_mail_alter(&$message) {
  $message['headers']['Sender'] = $message['headers']['From'];
}

/**
 * Implements hook_rebuild().
 */
function va_gov_backend_rebuild() {
  // @todo refactor this to use \Drupal\va_gov_consumers\Git\Git.
  // Update the drupal state to display git info in admin toolbar.
  $environment = \Drupal::config('environment_indicator.indicator')->get('name');
  $branch = mb_strimwidth(exec('git rev-parse --abbrev-ref HEAD'), 0, 20, '...') ?? 'git unknown';
  $commit_hash = trim(exec('git rev-parse --short HEAD'));
  $git_tag = exec("git tag --points-at $commit_hash");
  // Remove the 'cms/' from the tag that looks like 'cms/v0.0.190'.
  $git_tag = str_replace('cms/v', '', $git_tag);

  $brd = [
    'Development',
    'Staging',
    'Production',
  ];

  if (($environment === 'Production') && !empty($git_tag)) {
    $indicator = "v{$git_tag}";
  }
  elseif (in_array($environment, $brd)) {
    // We are in a BRD environment but with no tag.
    $indicator = "v{$commit_hash}";
  }
  else {
    // We are in not in a BRD environment, so display branch and SHA.
    $indicator = "Branch: {$branch}  v{$commit_hash}";
  }

  \Drupal::state()->set("environment_indicator.current_release", $indicator);
}

/**
 * Implements hook_toolbar().
 *
 * Defines Branch component in Admin Toolbar Menu.
 */
function va_gov_backend_toolbar() {
  $items = [];
  $items['content_release_icon'] = [
    '#attached' => [
      'library' => [
        'va_gov_backend/tippy_popover_theme',
        'va_gov_backend/toolbar',
      ],
    ],
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'html_tag',
      '#tag' => 'button',
      '#value' => '<span class="button-text">Last Content Release Time</span>',
      '#attributes' => [
        'class' => ['toolbar-icon', 'toolbar-icon-content-release'],
        'title' => 'Mouse over to see last content release time',
        'id' => 'content-release-status-icon',
      ],
    ],
    '#wrapper_attributes' => [
      'class' => ['toolbar-tab', 'content-release-toolbar-tab'],
    ],
    '#weight' => 101,
  ];
  $items['branch'] = [
    '#attached' => [
      'library' => [
        'va_gov_backend/toolbar',
      ],
    ],
    '#cache' => [
      'contexts' => ['user.permissions'],
    ],
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => \Drupal::state()->get("environment_indicator.current_release"),
      '#attributes' => [
        'title' => 'See https://github.com/department-of-veterans-affairs/va.gov-cms for more info.',
        'class' => ['toolbar-icon', 'toolbar-icon-branch'],
      ],
    ],
    '#wrapper_attributes' => [
      'class' => ['toolbar-tab', 'branch-toolbar-tab'],
    ],
    '#weight' => 100,
  ];

  return $items;
}

/**
 * Implements template_preprocess_paragraph().
 */
function va_gov_backend_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() === 'downloadable_file') {
    $media_entities = $paragraph->get('field_media')->referencedEntities();
    $title = $paragraph->get('field_title')->getValue()[0]['value'];
    $variables['field_media'] = [];
    $link_base_class = 'downloadable-file-link';
    foreach ($media_entities as $media_entity) {
      $media_object = [];
      $media_object['link_title'] = $title;
      $media_object['bundle'] = $media_bundle = $media_entity->bundle();
      $classes = [
        $link_base_class,
        $link_base_class . '--' . $media_bundle,
      ];
      $media_object['attributes'] = new Attribute([]);
      $media_object['attributes']->addClass($classes);
      if ($media_bundle === 'document' || $media_bundle === 'image') {
        $fid = $media_entity->getSource()->getSourceFieldValue($media_entity);
        if (!empty($fid)) {
          $file = File::load($fid);
          $media_object['link_url'] = $file->url();
        }
      }
      elseif ($media_bundle === 'video') {
        $media_object['link_url'] = $media_entity->get('field_media_video_embed_field')->getValue()[0]['value'];
      }
      $variables['field_media'][] = $media_object;
    }
  }
}

/**
 * Disable the search tool in the toolbar menu.
 */
function va_gov_backend_toolbar_alter(&$items) {
  if (!empty($items['administration_search'])) {
    unset($items['administration_search']);
  }

  // Hide environment indicator tab.
  //
  // We are adding the 'visually-hidden' class rather than removing the 'tab'
  // array element in order to prevent outputting empty links which cause the
  // accessibility tests to fail.
  if (!empty($items['environment_indicator']['tab'])) {
    $items['environment_indicator']['tab']['#attributes']['class'][] = 'visually-hidden';
  }
}

/**
 * Implements hook_css_alter().
 */
function va_gov_backend_css_alter(&$css, AttachedAssetsInterface $assets) {
  // Remove user_history css - not congruous with theme.
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('user_history')->getPath();

  unset($css[$module_path . '/css/user_history.css']);
}

/**
 * Alter the pattern to be used before an alias is generated by Pathauto.
 *
 * This hook will only be called if a default pattern is configured (on
 * admin/config/search/path/patterns).
 *
 * @param string $alias
 *   The Pathauto pattern to be used.
 * @param array $context
 *   An associative array of additional options, with the following elements:
 *   - 'module': The module or entity type being aliased.
 *   - 'op': A string with the operation being performed on the object being
 *     aliased. Can be either 'insert', 'update', 'return', or 'bulkupdate'.
 *   - 'source': A string of the source path for the alias (e.g. 'node/1').
 *   - 'data': An array of keyed objects to pass to token_replace().
 *   - 'bundle': The sub-type or bundle of the object being aliased.
 *   - 'language': A string of the language code for the alias (e.g. 'en').
 *     This can be altered by reference.
 */
function va_gov_backend_pathauto_alias_alter(&$alias, array &$context) {
  /*
   * @todo
   * Remove this alter after converting VAMC events to outreach event
   * event_listing association pattern. This is a temporary fix to allow
   * for both methods to use same aliasing pattern.
   */

  if ($context['module'] === 'node' && ($context['bundle'] === 'event')) {
    $alias = str_replace('/events/events/', '/events/', $alias);
  }
}

/**
 * Implements hook_entity_presave().
 *
 * @todo Remove node page wysiwyg sync after VACMS-1163 is on prod.
 */
function va_gov_backend_entity_presave(EntityInterface $entity) {
  $bundle_types = ['event', 'news_story', 'press_release', 'outreach_asset'];

  if ($entity->getEntityTypeId() === 'media' && $entity->bundle() === 'document_external') {
    _va_gov_backend_set_file_type($entity);
  }

  if ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $bundle_types)) {
    _va_gov_backend_feature_bump($entity);
  }

  if ($entity->getEntityTypeId() === 'node' && !in_array($entity->bundle(), _va_gov_backend_get_unlocked_alias_bundles())) {
    _va_gov_backend_disable_autopath_alias($entity);
  }

  _va_gov_backend_apply_filter_to_tablefield_cells($entity);
}

/**
 * Set the file type field value for external file.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The external file media entity.
 */
function _va_gov_backend_set_file_type(EntityInterface $entity) {
  $uri = $entity->get('field_media_external_file')->getValue()[0]['uri'];
  $mime = \Drupal::service('file.mime_type.guesser')->guess($uri);
  $entity->set('field_mime_type', $mime);
}

/**
 * Apply html filter to tablefield on save to properly format on the way in.
 *
 * This is needed because the field data of table fields does not have a
 * 'processed' property in graphQL.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The table paragraph.
 */
function _va_gov_backend_apply_filter_to_tablefield_cells(EntityInterface $entity) {
  // We need to make sure this entity is fieldable before we start digging.
  $entity_type = $entity->getEntityTypeId();
  $class = Drupal::service('entity_type.manager')->getDefinition($entity_type)->getOriginalClass();
  $interface = 'Drupal\Core\Entity\FieldableEntityInterface';
  if (in_array($interface, class_implements($class))) {
    $sanitized_items = [];
    $field_definitions = Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $entity->bundle());

    foreach ($field_definitions as $field) {
      if ($field->getType() === 'tablefield') {
        $field_name = $field->getName();
        $raw_table = $entity->get($field_name)->value;
        $format = $entity->get($field_name)->format ?? 'plain_text';
        if (!empty($raw_table) && is_array($raw_table)) {
          foreach ($raw_table as $row_key => $row_item) {
            if (is_array($row_item)) {
              foreach ($row_item as $cell_key => $cell_item) {
                $clean_html = check_markup($cell_item, $format, '', ['autop']);
                $sanitized_items['value'][$row_key][$cell_key] = (string) $clean_html;
              }
            }
          }

          // Tablefield caption does not support html.
          $sanitized_items['caption'] = strip_tags(trim($entity->get($field_name)->caption));
          $sanitized_items['format'] = $format;
          $entity->$field_name->setValue($sanitized_items);
        }
      }
    }
  }
}

/**
 * Determine if pathauto alias should be enabled on node.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The node to check for disabling pathauto alias pattern.
 */
function _va_gov_backend_disable_autopath_alias(EntityInterface $entity) {
  if (!$entity->isNew()) {
    // Get original values of the node for comparison.
    $original_use_alias_pattern = !empty($entity->original) ? $entity->original->get('path')->pathauto : '';
    $current_use_alias_pattern = $entity->get('path')->pathauto;
    // Decide if this was an intentional toggle on of using the alias pattern.
    $toggled_on_this_save = $current_use_alias_pattern && !$original_use_alias_pattern;
    $active_entity = \Drupal::entityTypeManager()->getStorage('node')->load($entity->id());
    $published_previously = ($active_entity instanceof NodeInterface) ? $active_entity->isPublished() : FALSE;

    if ($published_previously && !$toggled_on_this_save) {
      // This was published and this was not an intentional toggle on.
      // Disable the pathauto pattern.
      $entity->path->pathauto = 0;
    }
  }
}

/**
 * Unfeature other items of same bundle in system.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 */
function _va_gov_backend_feature_bump(EntityInterface $entity) {
  // Check to see if this entity has a featured option.
  if (!empty($entity->field_featured)) {
    $status = $entity->field_featured->value;
    $bundle = $entity->bundle();
    $target = $entity->field_listing->target_id;
    // If this is our feature item, start the process.
    if ($status === 1) {
      // Look for all of same bundle in system that are also featured.
      $select = \Drupal::database()->select('node__field_featured', 'nff');
      $select->join('node__field_listing', 'nfl', 'nfl.entity_id = nff.entity_id');
      $select->fields('nff', ['entity_id'])
      // We don't want to operate on current node.
        ->condition('nff.entity_id', $entity->id(), '!=')
        ->condition('nff.field_featured_value', 1)
        ->condition('nfl.field_listing_target_id', $target)
        ->condition('nff.bundle', $bundle);
      $results = $select->execute()->fetchAllKeyed();
      // Better to use entity api than raw db query to get drupal magic.
      $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple(array_keys($results));
      foreach ($nodes as $node) {
        // Set the others to unfeatured.
        $node->field_featured->value = 0;
        $node->save();
      }
    }
  }
}

/**
 * Sets field_listing value or throws an exception for an empty value.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 * @param array $entity_listing_mapping
 *   Mapping that specifies how content type maps to corresponding
 *   "listing" content type.
 * @param int|null $id
 *   NID of the node of type "listing".
 *
 * @throws \Exception
 */
function _va_gov_backend_set_field_listing_value(EntityInterface &$entity, array $entity_listing_mapping, int $id = NULL) {
  if (!is_int($id) || $id == 0) {
    // @codingStandardsIgnoreStart
    // Listing corresponding to field_office, was not found. Fail silently.
    // Give a warning message to the user and log in dblog.
    Drupal::messenger()->addWarning("{$entity->type->entity->label()} Listing page for the office or system you've selected does not exist. Please create {$entity->type->entity->label()} Listing page and come back to re-save this {$entity->type->entity->label()}.");
    Drupal::logger('va_gov_backend')->warning(
      '%bundle Listing page for the office or system you\'ve selected does not exist. Please create %bundle Listing page and come back to re-save %bundle with NID %nid.',
      ['%bundle' => $entity->type->entity->label(), '%nid' => $entity->id()]);
    return;
    // @codingStandardsIgnoreEnd
  }

  // We have a listing node id.
  if ($entity->hasField('field_listing')) {
    // Clear previous value.
    $entity->set('field_listing', NULL);
    // Assuming there's only one Event Listing per Office/VAMC System.
    $entity->field_listing[] = ['target_id' => $id];
  }
}
