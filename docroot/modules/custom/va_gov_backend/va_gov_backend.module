<?php

/**
 * @file
 * Contains va_gov_backend.module.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;

/**
 * Implements hook_help().
 */
function va_gov_backend_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_form_helper module.
    case 'help.page.va_gov_form_helper':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>Tools to improve backend user experience for VA.gov</p>';
      $output .= '<ul>';
      $output .= '<li>Hide Trigger Text field in Alert paragraph form unless Alert Type is Expanding</li>';
      $output .= '</ul>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function va_gov_backend_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form['#id'] === 'views-exposed-form-health-service-offerings-service-offerings-dash') {
    // Change our textfield to a dropdown displaying all VAMC systems.
    _va_gov_backend_add_vamc_regions_select($form);
  }
}

/**
 * A Change text input to select list of VAMC systems.
 *
 * @param array $form
 *   The exposed widget form array.
 */
function _va_gov_backend_add_vamc_regions_select(array &$form) {
  // Query nodes.
  $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
  $nids = $storage->getQuery();

  // Gather vamc nodes and sort by title.
  $nids = $nids->condition('type', 'health_care_region_page')
    ->sort('title')
    ->execute();

  // If there are no nodes, move on.
  if (!$nids) {
    return FALSE;
  }

  // Start building out the options for our select list.
  $options = [];
  $nodes = $storage->loadMultiple($nids);

  // Push titles into select list.
  foreach ($nodes as $node) {
    $options[$node->getTitle()] = $node->getTitle();
  }

  // Start building out our replacement form element.
  $form['title']['#type'] = 'select';
  $form['title']['#multiple'] = FALSE;

  // Specify the empty option for our select list.
  $form['title']['#empty_option'] = t('VAMC');

  // Add the $options from above to our select list.
  $form['title']['#options'] = $options;
  unset($form['title']['#size']);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function va_gov_backend_form_node_va_form_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $nid = $form_state->getformObject()->getEntity()->id();
  $node = \Drupal\node\Entity\Node::load($nid);
  $hide_editable = TRUE;
  $readonly_fields = [
    'title',
    'field_va_form_administration',
    'field_va_form_number',
    'field_va_form_title',
    'field_va_form_issue_date',
    'field_va_form_url',
  ];
  foreach ($readonly_fields as $readonly_field) {
    $value = $node->{$readonly_field}->getValue();
    $has_value = FALSE;
    if (!empty($value[0])) {
      foreach ($value[0] as $item) {
        if (!empty($item)) {
          $has_value = TRUE;
          break;
        }
      }
    }
    if (!$has_value) {
      $hide_editable = FALSE;
      break;
    }
  }
  $title = "<h1>{$node->getTitle()}</h1>";

  $form_name = $form['field_va_form_name'];
  unset($form['field_va_form_name']);

  $form['header'] = [
    '#type' => 'fieldset',
    '#weight' => 0,
    '#collapsible' => FALSE,
  ];
  $form['header']['title'] = [
    '#markup' => $title . '<div class="description">This non-editable page title is automatically set by the VA forms database.</div>',
  ];
  $form['header']['field_va_form_name'] = $form_name;

  if ($hide_editable) {
    unset($form['#fieldgroups']['group_editable_forms_data']);
    $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $readonly_content = $viewBuilder->view($node, 'external_content');
    $form['external_content'] = [
      '#markup' => render($readonly_content),
      '#weight' => 1,
    ];
  }

  $form['field_benefit_categories']['#states'] = [
    'visible' => [
      ':input[id="edit-field-va-form-type"]' => ['value' => 'benefit'],
    ],
  ];
  $form['field_va_form_tool_intro']['#states'] = [
    'visible' => [
      ':input[id="edit-field-va-form-tool-url-0-uri"]' => ['filled' => true],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function va_gov_backend_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $targets = [
    'field_office',
    'field_listing',
  ];
  _va_gov_backend_dropdown_field_access($form, $targets);

  if ($form_id === 'workbench_access_assign_user') {
    $form['#submit'][] = 'va_gov_backend_workbench_assign_user_form_submit';
  }

  if ($form_id === 'redirect_redirect_edit_form' || $form_id === 'redirect_redirect_form') {
    $value = 'prefix';
    if ($form_id === 'redirect_redirect_edit_form') {
      $src_path = $form['redirect_source']['widget'][0]['path']['#default_value'];
      $connection = \Drupal::database()->select('redirect', 'r');
      $connection->fields('r', ['redirect_redirect__options']);
      $connection->condition('r.redirect_source__path', $src_path, '=');
      $query = unserialize($connection->execute()->fetchField());
      $value = !empty($query['matchType']) ? $query['matchType'] : '';
    }
    $form['redirect_match_type'] = [
      '#type' => 'select',
      '#options' => [
        'prefix' => 'prefix',
        'exact_match' => 'exact match',
        'regex_case_sensitive' => 'regex case sensitive',
        'regex_case_insensitive' => 'regex case insensitive',
        'non_re' => 'non re',
      ],
      '#title' => t('Match Type'),
      '#default_value' => $value,
    ];
    $form['actions']['submit']['#submit'][] = 'va_gov_backend_form_alter_redirect_submit';
  }

  if ($form_id === 'node_vamc_operating_status_and_alerts_edit_form') {
    // Hide field_office for existing operating statuses: they won't be moved.
    // @todo Consider disabling it instead of hiding it.
    $form['field_office']['#attributes']['class'] = 'hidden';
  }

  if ($form_id === 'views_bulk_operations_configure_action') {
    $build_info = $form_state->getBuildInfo();
    // We need to target only the VBO "Modify field values" form from
    // Facility Status tool.
    if ($build_info['args'][0] === 'facility_governance' && $build_info['args'][1] === 'page_1') {
      _va_gov_backend_vbo_facility_status_form_ui($form, $form_state);
    }
  }
}

/**
 * Modifies UI of the Facility Status VBO Modify Field Values form.
 *
 * The form that allows the user to modify field values contains too many
 * options that are irrelevant to the primary purpose of the tool. This
 * function modifies the form to eliminate UI noise.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _va_gov_backend_vbo_facility_status_form_ui(&$form, FormStateInterface $form_state) {
  // This if Facility Status form.
  // Clean up the UI.
  $bundle_fields = [];
  $entity_data = (isset($form['node']) && is_array($form['node'])) ? $form['node'] : NULL;

  if (!empty($entity_data)) {
    foreach ($entity_data as $bundle => $data) {
      if (is_array($data)) {
        $bundle_fields[$bundle] = $data;
      }
    }
  }

  foreach ($bundle_fields as $bundle => $fields) {
    if (is_array($fields)) {
      foreach ($fields as $field_name => $field_meta) {
        $form['node'][$bundle]['#open'] = TRUE;
        if (!in_array($field_name, ['field_operating_status_facility', 'field_operating_status_more_info']) && strpos($field_name, '#', 0) === FALSE) {
          // Remove all facility content type fields that are not related
          // to Operating status and Op info from field_selection form.
          unset($form['node'][$bundle]['_field_selector'][$field_name]);

          if (strpos($field_name, '_field_selector', 0) === FALSE) {
            // Remove all facility content type fields that are not related
            // to Operating status and Op info from vbo content type form.
            unset($form['node'][$bundle][$field_name]);
          }
        }
      }
    }
  }

  // Remove multi-value field options, since none of the fields we're editing
  // are multi-value.
  unset($form['options']);
}

/**
 * Callback handler for workbench_access_assign_user form - invalidate cache.
 *
 * @param array $form
 *   The workbench_access_assign_user form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Provides an interface for an object containing the current state of a form.
 */
function va_gov_backend_workbench_assign_user_form_submit(array $form, FormStateInterface $form_state) {
  $raw_path_to_args = $form_state->getBuildInfo()['args'];
  $path_to_args = reset($raw_path_to_args);
  $user_id = $path_to_args->id();
  $tags = ['user:' . $user_id];
  \Drupal::service('cache_tags.invalidator')->invalidateTags($tags);
}

/**
 * For determining dropdown field access on nodeforms.
 *
 * @param array $form
 *   The node form.
 * @param array $targets
 *   The node form fields to check.
 */
function _va_gov_backend_dropdown_field_access(array &$form, array $targets) {
  $user_id = \Drupal::currentUser()->id();
  $perms_service = \Drupal::service('va_gov_user.user_perms');
  // Grabs items user can access per section associations.
  $allowed_options = $perms_service->userOptionsStorage($form, $targets, $user_id);

  // Loop through all of our target fields.
  foreach ($targets as $target) {
    if (in_array($target, $form) && !empty($form[$target]['widget']['#options'])) {
      foreach ($form[$target]['widget']['#options'] as $header_key => $option_header) {
        // Field_listing is an exception. It is a one level field and doesn't
        // have opt groups.
        if ($target === 'field_listing' && !is_array($option_header) && !empty($option_header)) {
          // If not in the allowed items array, take it out.
          if (!in_array($header_key, $allowed_options)) {
            unset($form[$target]['widget']['#options'][$header_key]);
          }
        }
        elseif (is_array($option_header) && !empty($option_header)) {
          foreach ($option_header as $option_key => $option_item) {
            // If not in the allowed items array, take it out.
            if (!in_array($option_key, $allowed_options)) {
              unset($form[$target]['widget']['#options'][$header_key][$option_key]);
            }
          }
        }
      }
    }
  }
}

/**
 * Redirect form alter submit handler to store redirect Match Type.
 */
function va_gov_backend_form_alter_redirect_submit($form, FormStateInterface $form_state) {
  $connection = \Drupal::database();
  $src_path = reset($form_state->getValue('redirect_source', 'path'));
  $match_type = $form_state->getValue('redirect_match_type', 'path');
  $type = ['matchType' => $match_type];
  $converted = serialize($type);
  $connection->update('redirect')
    ->fields(['redirect_redirect__options' => $converted])
    ->condition('redirect_source__path', $src_path, '=')
    ->execute();
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function va_gov_backend_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Hide Trigger Text in Alert paragraph form unless Alert Type is "Expanding".
  $field_definition = $context['items']->getFieldDefinition();
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_content_block') {
    $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);

    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    if ($paragraph_type == 'alert') {
      $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], 'field_alert_type');

      $element['subform']['field_alert_trigger_text']['#states'] = [
        'visible' => [
          $selector => ['value' => 'expanding'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_inline_entity_form_alter().
 */
function va_gov_backend_inline_entity_form_entity_form_alter(&$entity_form, $form_state) {
  // Show the facility name so that the editor knows what they're editing,
  // but don't let the editor change it. It's driven by Facility API.
  if ($entity_form['#bundle'] === 'health_care_local_facility') {
    $entity_form['title']['widget'][0]['value']['#attributes']['disabled'] = 'disabled';
  }
}

/**
 * Implements hook_page_attachments().
 */
function va_gov_backend_page_attachments(array &$attachments) {
  // Add GTM to cms theme.
  $attachments['#attached']['library'][] = 'va_gov_backend/gtm_tag_push';
  // Track GTM click events.
  $attachments['#attached']['library'][] = 'va_gov_backend/gtm_tag_trackers';

  // Pass our relevant data to settings.
  $attachments['#attached']['drupalSettings']['gtm_data'] = _va_gov_backend_gtm_settings();

  $attachments['#attached']['library'][] = 'va_gov_backend/alert_form';
  $attachments['#attached']['library'][] = 'va_gov_backend/system_styles';
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin) {
    // Add custom css for paragraph browser.
    $attachments['#attached']['library'][] = 'va_gov_backend/admin_styles';

    return;
  }
}

/**
 * Builds section associations for gtm push array.
 *
 * @return array
 *   Keyed array of the section item names.
 */
function _va_gov_backend_gtm_settings() {
  $sections = [];
  $current_path = \Drupal::service('path.current')->getPath();
  $request = \Drupal::request();
  // Grab our page title.
  if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route);
    $sections['pageTitle'] = $page_title;
  }
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $route = \Drupal::routeMatch()->getRouteName();
    // If we are on node view, get the alias.
    if ($route === 'entity.node.canonical') {
      $current_path = $node->toUrl()->toString();
    }
    $sections['nodeID'] = $node->id();
    $sections['pageTitle'] = $node->getTitle();
    $sections['pagePath'] = $current_path;
    $sections['contentTitle'] = $node->getTitle();
    $sections['contentType'] = $node->bundle();

    if (property_exists($node, 'field_administration')) {
      $section_entity_id = $node->field_administration->getString();
      // Load up our section name.
      $section_entity_load = !empty($section_entity_load) ? Term::load($section_entity_id) : '';
      $sections['contentOwner'] = !empty($section_entity_load) ? $section_entity_load->getName() : '';
    }

  }
  return $sections;
}

/**
 * Implements hook_page_bottom().
 */
function va_gov_backend_page_bottom(array &$page_bottom) {
  // Add GTM noscript iframe to body.
  $gtm_noscript = Markup::create('<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-WQ3DLLB&gtm_auth=GDc7Zfyf8G-0S5j8FC1WXQ&gtm_preview=env-5&gtm_cookies_win=x" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>');
  $page_bottom['va_gov_backend'] = ['#markup' => $gtm_noscript];
}

/**
 * Implements hook_local_tasks_alter().
 */
function va_gov_backend_menu_local_tasks_alter(&$local_tasks) {
  // Replace the View Json tab with the node view.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $nid = $node->id();
    $local_tasks['tabs'][0]['entity.node.canonical']['#link']['title'] = 'View';
    $local_tasks['tabs'][0]['entity.node.canonical']['#link']['url'] = Url::fromUri('internal:/node/' . $nid);
  }
  // Remove the history tab.
  if (!empty($local_tasks['tabs'][0]['views_view:view.moderation_history.page'])) {
    unset($local_tasks['tabs'][0]['views_view:view.moderation_history.page']);
  }
}

/**
 * Implements hook_mail_alter().
 */
function va_gov_backend_mail_alter(&$message) {
  $message['headers']['Sender'] = $message['headers']['From'];
}

/**
 * Implements hook_rebuild().
 */
function va_gov_backend_rebuild() {
  // Update the drupal state to display git info in admin toolbar.
  $branch = mb_strimwidth(exec('git rev-parse --abbrev-ref HEAD'), 0, 20, '...') ?? 'git unknown';
  $tag_hash = trim(exec('git describe --tags')) ?? '--';
  if ($branch === 'HEAD') {
    // In BRD environment or checked out a tag/commit directly, show no branch.
    $indicator = $tag_hash;
  }
  else {
    // We are in not in BRD environment, so display branch.
    $indicator = "Branch: {$branch}  Tag-SHA: {$tag_hash}";
  }

  \Drupal::state()->set("environment_indicator.current_release", $indicator);
}

/**
 * Implements hook_css_alter().
 */
function va_gov_backend_css_alter(&$css, AttachedAssetsInterface $assets) {
  // Remove user_history css - not congruous with theme.
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('user_history')->getPath();

  unset($css[$module_path . '/css/user_history.css']);
}

/**
 * Alter the pattern to be used before an alias is generated by Pathauto.
 *
 * This hook will only be called if a default pattern is configured (on
 * admin/config/search/path/patterns).
 *
 * @param string $alias
 *   The Pathauto pattern to be used.
 * @param array $context
 *   An associative array of additional options, with the following elements:
 *   - 'module': The module or entity type being aliased.
 *   - 'op': A string with the operation being performed on the object being
 *     aliased. Can be either 'insert', 'update', 'return', or 'bulkupdate'.
 *   - 'source': A string of the source path for the alias (e.g. 'node/1').
 *   - 'data': An array of keyed objects to pass to token_replace().
 *   - 'bundle': The sub-type or bundle of the object being aliased.
 *   - 'language': A string of the language code for the alias (e.g. 'en').
 *     This can be altered by reference.
 */
function va_gov_backend_pathauto_alias_alter(&$alias, array &$context) {
  /*
   * @todo
   * Remove this alter after converting VAMC events to outreach event
   * event_listing association pattern. This is a temporary fix to allow
   * for both methods to use same aliasing pattern.
   */

  if ($context['module'] === 'node' && ($context['bundle'] === 'event')) {
    $alias = str_replace('/events/events/', '/events/', $alias);
  }
}

/**
 * Implements hook_entity_presave().
 *
 * @todo: Remove node page wysiwyg sync after VACMS-1163 is on prod.
 */
function va_gov_backend_entity_presave(EntityInterface $entity) {
  $bundle_types = ['event', 'news_story', 'press_release', 'outreach_asset'];

  if ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $bundle_types)) {
    _va_gov_backend_feature_bump($entity);
  }

  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'page') {
    _va_gov_backend_sync_wysiwyg_fields($entity);
  }
}

/**
 * Unfeature other items of same bundle in system.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 */
function _va_gov_backend_feature_bump(EntityInterface $entity) {
  // Check to see if this entity has a featured option.
  if (!empty($entity->field_featured)) {
    $status = $entity->field_featured->value;
    $bundle = $entity->bundle();
    $target = $entity->field_listing->target_id;
    // If this is our feature item, start the process.
    if ($status === 1) {
      // Look for all of same bundle in system that are also featured.
      $select = \Drupal::database()->select('node__field_featured', 'nff');
      $select->join('node__field_listing', 'nfl', 'nfl.entity_id = nff.entity_id');
      $select->fields('nff', ['entity_id'])
      // We don't want to operate on current node.
        ->condition('nff.entity_id', $entity->id(), '!=')
        ->condition('nff.field_featured_value', 1)
        ->condition('nfl.field_listing_target_id', $target)
        ->condition('nff.bundle', $bundle);
      $results = $select->execute()->fetchAllKeyed();
      // Better to use entity api than raw db query to get drupal magic.
      $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple(array_keys($results));
      foreach ($nodes as $node) {
        // Set the others to unfeatured.
        $node->field_featured->value = 0;
        $node->save();
      }
    }
  }
}

/**
 * Sync field_intro_text with field_intro_text_limited_html.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 */
function _va_gov_backend_sync_wysiwyg_fields(EntityInterface $entity) {
  // Match the new intro field with the old intro field.
  if ($entity->hasField('field_intro_text_limited_html')) {
    $intro_text_field_data = $entity->field_intro_text->value;
    $entity->field_intro_text_limited_html->value = $intro_text_field_data;
    $entity->field_intro_text_limited_html->format = 'rich_text_limited';
  }
}

/**
 * Sets field_listing value or throws an exception for an empty value.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 * @param array $entity_listing_mapping
 *   Mapping that specifies how content type maps to corresponding
 *   "listing" content type.
 * @param int|null $id
 *   NID of the node of type "listing".
 *
 * @throws \Exception
 */
function _va_gov_backend_set_field_listing_value(EntityInterface &$entity, array $entity_listing_mapping, int $id = NULL) {
  if (!is_int($id) || $id == 0) {
    // Listing corresponding to field_office, was not found. Fail silently.
    // Give a warning message to the user and log in dblog.
    Drupal::messenger()->addWarning("{$entity->type->entity->label()} Listing page for the office or system you've selected does not exist. Please create {$entity->type->entity->label()} Listing page and come back to re-save this {$entity->type->entity->label()}.");
    Drupal::logger('va_gov_backend')->warning('%bundle Listing page for the office or system you\'ve selected does not exist. Please create %bundle Listing page and come back to re-save %bundle with NID %nid.', ['%bundle' => $entity->type->entity->label(), '%nid' => $entity->id()]);
    return;
  }

  // We have a listing node id.
  if ($entity->hasField('field_listing')) {
    // Clear previous value.
    $entity->set('field_listing', NULL);
    // Assuming there's only one Event Listing per Office/VAMC System.
    $entity->field_listing[] = ['target_id' => $id];
  }
}
