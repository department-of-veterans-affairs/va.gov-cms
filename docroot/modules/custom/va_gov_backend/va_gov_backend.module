<?php

/**
 * @file
 * Contains va_gov_backend.module.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function va_gov_backend_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_form_helper module.
    case 'help.page.va_gov_form_helper':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>Tools to improve backend user experience for VA.gov</p>';
      $output .= '<ul>';
      $output .= '<li>Hide Trigger Text field in Alert paragraph form unless Alert Type is Expanding</li>';
      $output .= '</ul>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function va_gov_backend_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id === 'redirect_redirect_edit_form' || $form_id === 'redirect_redirect_form') {
    $value = 'prefix';
    if ($form_id === 'redirect_redirect_edit_form') {
      $src_path = $form['redirect_source']['widget'][0]['path']['#default_value'];
      $connection = \Drupal::database()->select('redirect', 'r');
      $connection->fields('r', ['redirect_redirect__options']);
      $connection->condition('r.redirect_source__path', $src_path, '=');
      $query = unserialize($connection->execute()->fetchField());
      $value = !empty($query['matchType']) ? $query['matchType'] : '';
    }
    $form['redirect_match_type'] = [
      '#type' => 'select',
      '#options' => [
        'prefix' => 'prefix',
        'exact_match' => 'exact match',
        'regex_case_sensitive' => 'regex case sensitive',
        'regex_case_insensitive' => 'regex case insensitive',
        'non_re' => 'non re',
      ],
      '#title' => t('Match Type'),
      '#default_value' => $value,
    ];
    $form['actions']['submit']['#submit'][] = 'va_gov_backend_form_alter_redirect_submit';
  }
  // First make sure this isn't new content.
  $path = \Drupal::service('path.current')->getPath();
  $arg = explode('/', $path);
  if (!empty($arg[2]) && $arg[2] !== 'empty' && $arg[2] !== 'add') {

    // We want to show time last built on nodes, promos and alerts.
    if (!empty($form['#entity_type']) && ($form['#entity_type'] === 'node'
    || $form['#entity_type'] === 'block_content')) {

      // Every value in this column is the same, so just get the last one.
      $query = \Drupal::database()->select('node__field_page_last_built', 'nf')
        ->fields('nf', ['field_page_last_built_value'])
        ->execute()->fetchField();

      // Convert it to unixtime.
      $time1 = strtotime($query);
      $time2 = strtotime('+1 day', $time1);
      // Here's our last published formatted date.
      $date1 = date('M d, Y', $time1);
      // 24 hours later.
      $date2 = date('M d, Y', $time2);

      // Append it to the top of the workflow fieldset.
      $form['moderation_state']['widget'][0]['#prefix'] = t('The published
    version of this content was last built on va.gov on <b>:date1</b>.<br />
    The next build will be triggered on <b>:date2</b>.',
      [':date1' => $date1, ':date2' => $date2]);
    }
  }
  if ($form_id === 'node_full_width_banner_alert_edit_form') {
    // Hide send email field because this form will only send an email once.
    // @todo Consider disabling it instead of hiding it. And/or:
    // @todo Check node revisions and disable this field if node has ever been published.
    $form['field_operating_status_sendemail']['#attributes']['class'] = 'hidden';
  }
  if ($form_id === 'node_vamc_operating_status_and_alerts_edit_form') {
    // Hide field_office for existing operating statuses: they won't be moved.
    // @todo Consider disabling it instead of hiding it.
    $form['field_office']['#attributes']['class'] = 'hidden';
  }
}

/**
 * Redirect form alter submit handler to store redirect Match Type.
 */
function va_gov_backend_form_alter_redirect_submit($form, FormStateInterface $form_state) {
  $connection = \Drupal::database();
  $src_path = reset($form_state->getValue('redirect_source', 'path'));
  $match_type = $form_state->getValue('redirect_match_type', 'path');
  $type = ['matchType' => $match_type];
  $converted = serialize($type);
  $connection->update('redirect')
    ->fields(['redirect_redirect__options' => $converted])
    ->condition('redirect_source__path', $src_path, '=')
    ->execute();
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function va_gov_backend_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Hide Trigger Text in Alert paragraph form unless Alert Type is "Expanding".
  $field_definition = $context['items']->getFieldDefinition();
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_content_block') {
    $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);

    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    if ($paragraph_type == 'alert') {
      $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], 'field_alert_type');

      $element['subform']['field_alert_trigger_text']['#states'] = [
        'visible' => [
          $selector => ['value' => 'expanding'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_inline_entity_form_alter().
 */
function va_gov_backend_inline_entity_form_entity_form_alter(&$entity_form, $form_state) {
  // Show the facility name so that the editor knows what they're editing,
  // but don't let the editor change it. It's driven by Facility API.
  if ($entity_form['#bundle'] === 'health_care_local_facility') {
    $entity_form['title']['widget'][0]['value']['#attributes']['disabled'] = 'disabled';
  }
}

/**
 * Implements hook_page_attachments().
 */
function va_gov_backend_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'va_gov_backend/alert_form';

  // Add custom css for paragraph browser.
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin) {
    $attachments['#attached']['library'][] = 'va_gov_backend/admin_styles';
    return;
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function va_gov_backend_menu_local_tasks_alter(&$local_tasks) {
  // Replace the View Json tab with the node view.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $nid = $node->id();
    $local_tasks['tabs'][0]['entity.node.canonical']['#link']['title'] = 'View';
    $local_tasks['tabs'][0]['entity.node.canonical']['#link']['url'] = Url::fromUri('internal:/node/' . $nid);
  }
}

/**
 * Implements hook_mail_alter().
 */
function va_gov_backend_mail_alter(&$message) {
  $message['headers']['Sender'] = $message['headers']['From'];
}

/**
 * Implements hook_rebuild().
 */
function va_gov_backend_rebuild() {
  // Update the drupal state to display git info in admin toolbar.
  $branch = mb_strimwidth(exec('git rev-parse --abbrev-ref HEAD'), 0, 35, '...') ?? 'git unknown';
  $tag_hash = trim(exec('git describe --tags')) ?? '--';
  if ($branch === 'HEAD') {
    // In BRD environment or checked out a tag/commit directly, show no branch.
    $indicator = $tag_hash;
  }
  else {
    // We are in not in BRD environment, so display branch.
    $indicator = "Branch: {$branch} Tag-SHA: {$tag_hash}";
  }

  \Drupal::state()->set("environment_indicator.current_release", $indicator);
}

/**
 * Implements computed_field_compute for field_banner_alert_computdvalues.
 */
function computed_field_field_banner_alert_computdvalues_compute($entity_type_manager, $entity, $fields, $delta) {
  // Set values in VAMC banner alert nodes, according to values in VAMC system,
  // for passing values into Granicus bulletins and email notifications, and
  // for determining the alert visibility on VAMC system pages.
  // For each VAMC Operating status referenced in field_banner_alert_vamcs, get:
  // - $vamc_system_name (Name of VAMC, via field_office)
  // - $vamc_system_path (via field_office)
  // - $vamc_system_operating_status_url (URL of Operating status page)
  // - $vamc_system_emerg_topicid (Granicus topic id, via
  // field_office->field_link_facility_emerg_list).
  //
  // Store each array as a value in multivalue field_banner_alert_computdvalues
  // field on the full_width_banner_alert content type, eg:
  // 'Pittsburgh VA health care, /pittsburgh-health-care,
  // https://www.va.gov/pittsburgh-health-care/operating-status,  USVHA_396'.
}
