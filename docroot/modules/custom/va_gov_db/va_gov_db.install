<?php

/**
 * @file
 * Install file for Va Gov DB.
 */

use Drupal\Core\Utility\UpdateException;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Psr\Log\LogLevel;

/**
 * Uninstalls requested modules.
 *
 * @param array $modules
 *   An array of module machine names to uninstall.
 * @param bool $uninstall_dependents
 *   TRUE if dependent modules should also be uninstalled, FALSE otherwise.
 *
 * @return string
 *   A message about what requested modules were uninstalled.
 *
 * @throws Drupal\Core\Utility\UpdateException
 */
function _va_gov_db_uninstall_modules(array $modules, $uninstall_dependents = TRUE) {
  $success = \Drupal::service('module_installer')->uninstall($modules, $uninstall_dependents);
  $modules_list = implode(', ', $modules);
  if ($success) {
    return "Uninstalled the following modules: $modules_list";
  }
  else {
    // Something went wrong. Throw exception.
    throw new UpdateException(
      t("Failed to uninstall the requested modules: @modules", ['@modules' => $modules_list])
    );
  }
}

/**
 * Utility to change the max length of a text field.
 *
 * @param string $field_name
 *   Field name.
 * @param int $new_length
 *   Field length in characters.
 *
 * @throws \DrupalUpdateException
 */
function _va_gov_db_change_text_field_max_length($field_name, $new_length) {
  // The transaction opens here.
  $database = \Drupal::database();

  try {
    // Update field content tables with new max length.
    foreach (['node__', 'node_revision__'] as $prefix) {
      $database->query('
      ALTER TABLE {' . $prefix . $field_name . '}
        MODIFY ' . $field_name . '_value VARCHAR( ' . $new_length . ' )
      ');
    }

    // Update drupal storage schema.
    $storage_key = "node.field_schema_data.{$field_name}";
    $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
    $field_schema = $storage_schema->get($storage_key);
    $field_schema["node__{$field_name}"]['fields']["{$field_name}_value"]['length'] = $new_length;
    $field_schema["node_revision__{$field_name}"]['fields']["{$field_name}_value"]['length'] = $new_length;
    $storage_schema->set($storage_key, $field_schema);

    // Update field config record with new max length.
    $config = \Drupal::configFactory()
      ->getEditable("field.storage.node.{$field_name}");
    $config->set('settings.max_length', $new_length);
    $config->save(TRUE);

    // Update field storage configuration.
    // This needs to happen in the config yml.
  }
  catch (Exception $e) {
    // Something went wrong somewhere, so roll back now.
    $database->rollback();
    // Allow update to be re-run when errors are fixed.
    throw new UpdateException(
      "Failed to change $field_name field max length: " . $e->getMessage(),
      $e->getCode(), $e
    );
  }
  return "Updated field $field_name to the new size of $new_length Be sure to update vagov/config/sync/field.storage.node.{$field_name}.yml to match.";
}

/**
 * Modify field_facility_locator_api_id field to be longer.
 */
function va_gov_db_update_8001(&$sandbox) {
  $message = _va_gov_db_change_text_field_max_length('field_facility_locator_api_id', 12);

  return $message;
}

/**
 * Uninstall json_content module.
 */
function va_gov_db_update_8002(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['json_content']);

  return $messages;
}

/**
 * Switch to Drupal minimal profile.
 */
function va_gov_db_update_8003(&$sandbox) {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.extension');
  $config->set('profile', 'minimal');
  $config->save(TRUE);
  $messages = "Update the install profile to use minimal.";

  return $messages;
}

/**
 * Uninstall lightning media modules.
 */
function va_gov_db_update_8004(&$sandbox) {
  $unistall_modules = [
    'lightning_media_document',
    'lightning_media_image',
    'lightning_media_video',
    'lightning_media_bulk_upload',
    'lightning_media',
  ];

  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall health_check.
 */
function va_gov_db_update_8005(&$sandbox) {
  $unistall_modules = [
    'health_check',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall slick modules.
 */
function va_gov_db_update_8006(&$sandbox) {
  $unistall_modules = [
    'slick_entityreference',
    'slick',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Remove dateless revisions.
 */
function va_gov_db_update_8007(&$sandbox) {
  // These nodes have some revisions without timestamps.
  $subject_nids = [68, 71, 72, 73, 74, 77, 78, 79];
  // Load up our node storage object for reuse.
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $vids = [];
  foreach ($subject_nids as $nid) {
    $loaded_node = Node::load($nid);
    // Once our node is loaded, we can get all revisions.
    if (!empty($loaded_node)) {
      $vids[] = $node_storage->revisionIds($loaded_node);
    }
  }
  foreach ($vids as $vid_collection) {
    // Iterate through all of our vid groups.
    foreach ($vid_collection as $vid) {
      // Load up our revisions to start our checks.
      $storage = $node_storage->loadRevision($vid);
      if (!empty($storage)) {
        // Look for a timestamp.
        $timestamp = $storage->get('revision_timestamp')->value;
        if ($timestamp === NULL) {
          // If we don't have one, dump the revision.
          $node_storage->deleteRevision($vid);
        }
      }
    }
  }

}

/**
 * Fix node revisions which have 'approved_by_reviewer' state.
 */
function va_gov_db_update_8008() {
  // These nid / revision ids are the ones in `approved_by_reviewer` status.
  // 841 / 9646.
  // 992 / 11407.
  // 2587 / 15111.
  $revisions_ids_to_draft = [
    841 => 9646,
    992 => 11407,
    2587 => 15111,
  ];

  foreach ($revisions_ids_to_draft as $nid => $vid) {
    $log_message = t('Deleting vid :vid from :nid', [':vid' => $vid, ':nid' => $nid]);
    \Drupal::logger('va_gov_db')->info($log_message);

    node_revision_delete($vid);
  }

  \Drupal::logger('va_gov_db')->info('Update state of vid 15132 to "draft".');
  // Only 2628 / 15165 is node which needs to be set to draft.
  \Drupal::database()
    ->update('content_moderation_state_field_revision')
    ->condition('content_entity_id', 2628)
    ->condition('content_entity_revision_id', 15132)
    ->condition('content_entity_type_id', 'node')
    ->fields([
      'moderation_state' => 'draft',
    ])
    ->execute();
}

/**
 * Uninstall hide_revision_field.
 */
function va_gov_db_update_8011(&$sandbox) {
  $unistall_modules = [
    'hide_revision_field',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Move field_intro_text to field_intro_text_limited_html wysiwyg field.
 */
function va_gov_db_update_8015(&$sandbox) {
  // Grab our nodes and set the count.
  if (empty($sandbox['total'])) {
    $sandbox['nids_process'] = \Drupal::entityQuery('node')
      ->condition('type', 'page')
      ->execute();
    $sandbox['total'] = count($sandbox['nids_process']);
    $sandbox['current'] = 0;
  }

  // Run through a batch of 25.
  $i = 0;
  $nids = '';
  foreach ($sandbox['nids_process'] as $revision => $nid) {
    if ($i == 25) {
      break;
    }
    $node = Node::load($nid);
    // Make this change a new revision.
    $node->setNewRevision(TRUE);
    // Set revision author to uid 1317.
    $node->setRevisionAuthorId(1317);
    $node->setChangedTime(time());
    $node->setRevisionCreationTime(time());
    $node->setOwnerId(1317);
    // Set revision log message.
    $node->setRevisionLogMessage('Automated move of text from intro_text to intro_text_limited_html');
    $node->save();
    unset($sandbox['nids_process'][$revision]);
    $i++;

    $nids .= $nid . ', ';
    $sandbox['current']++;
  }

  // Tell drupal we processed some nodes.
  Drupal::logger('va_gov_db')
    ->log(LogLevel::INFO, 'Page nodes %current nodes saved to populate the html intro field. Nodes processed: %nids', [
      '%current' => $sandbox['current'],
      '%nids' => $nids,
    ]);

  // Determine when to stop batching.
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  // Log the all finsished notice.
  if ($sandbox['#finished'] == 1) {
    Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'RE-saving all %count page nodes completed by va_gov_db_update_8015.', [
      '%count' => $sandbox['total'],
    ]);
    return "Process complete.";
  }

  return "Processing page nodes...";
}

/**
 * Uninstall redirect_after_login modules.
 */
function va_gov_db_update_8016(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['redirect_after_login']);

  return $messages;
}

/**
 * Uninstall workflow_participants modules.
 */
function va_gov_db_update_8017(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['workflow_participants']);

  return $messages;
}

/**
 * Uninstall node_revisions_autoclean modules.
 */
function va_gov_db_update_8018(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['node_revisions_autoclean']);

  return $messages;
}

/**
 * Uninstall moderation_sidebar module.
 */
function va_gov_db_update_8019(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['moderation_sidebar']);

  return $messages;
}

/**
 * Clear Drupal status report mis-matched entity/field errors.
 */
function va_gov_db_update_8020() {
  $messages = [];

  $missing_entity_types = [
    'environment_indicator',
    'migration',
    'migration_group',
  ];
  foreach ($missing_entity_types as $missing_entity_type) {
    $type_manager = \Drupal::entityTypeManager();
    $entity_type = $type_manager->getDefinition($missing_entity_type);
    \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
    \Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Installed missing entity type %missing_entity_type.', [
      '%missing_entity_type' => $missing_entity_type,
    ]);
  }

  $out_of_date_fields = ['field_benefits', 'field_facility_locator_api_id'];
  foreach ($out_of_date_fields as $out_of_date_field) {
    // Load and re-save field storage config to clear error.
    if ($field_storage = FieldStorageConfig::loadByName('node', $out_of_date_field)) {
      $field_storage->save();
      \Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Updated field storage configuration for %field_name.', [
        '%field_name' => $out_of_date_field,
      ]);
    }
  }

  $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $previous_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions('node');
  if (!empty($previous_storage_definitions['field_health_services_local_info'])) {
    $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
    $definition_update_manager->uninstallFieldStorageDefinition(
      $previous_storage_definitions['field_health_services_local_info']
    );
    \Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Deleted field storage configuration for field_health_services_local_info.');
  }

  return "Cleared mis-matched entity/field errors.";
}

/**
 * Uninstall markdown module.
 */
function va_gov_db_update_8021(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['markdown']);
  return $messages;
}

/**
 * Uninstall cms export modules modules.
 */
function va_gov_db_update_8022(&$sandbox) {
  $unistall_modules = [
    'tome',
    'tome_sync',
    'va_gov_content_export',
    'zippylib',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall tome modules.
 */
function va_gov_db_update_8023(&$sandbox) {
  $unistall_modules = [
    'tome_static',
    'tome_base',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall tome modules, again.
 */
function va_gov_db_update_8024(&$sandbox) {
  $unistall_modules = [
    'tome_static',
    'tome_base',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall OpenAPI, OpenAPI UI, ReDoc for OpenAPI UI,
 * and Swagger UI for OpenAPI UI.
 */
function va_gov_db_update_8025(&$sandbox) {
  $unistall_modules = [
    'openapi',
    'openapi_ui',
    'openapi_ui_redoc',
    'openapi_ui_swagger',
  ];

  return _va_gov_db_uninstall_modules($unistall_modules);
}
