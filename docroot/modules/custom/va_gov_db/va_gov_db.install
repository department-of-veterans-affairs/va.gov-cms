<?php

/**
 * @file
 * Install file for Va Gov DB.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Utility\UpdateException;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\redirect\Entity\Redirect;
use Psr\Log\LogLevel;

/**
 * Uninstalls requested modules.
 *
 * @param array $modules
 *   An array of module machine names to uninstall.
 * @param bool $uninstall_dependents
 *   TRUE if dependent modules should also be uninstalled, FALSE otherwise.
 *
 * @return string
 *   A message about what requested modules were uninstalled.
 *
 * @throws Drupal\Core\Utility\UpdateException
 */
function _va_gov_db_uninstall_modules(array $modules, $uninstall_dependents = TRUE) {
  $success = \Drupal::service('module_installer')->uninstall($modules, $uninstall_dependents);
  $modules_list = implode(', ', $modules);
  if ($success) {
    return "Uninstalled the following modules: $modules_list";
  }
  else {
    // Something went wrong. Throw exception.
    throw new UpdateException(
      "Failed to uninstall the requested modules: " . implode(',', $modules_list)
    );
  }
}

/**
 * Installs requested modules.
 *
 * @param array $modules
 *   An array of module machine names to install.
 * @param bool $install_dependents
 *   TRUE if dependent modules should also be installed, FALSE otherwise.
 *
 * @return string
 *   A message about what requested modules were uninstalled.
 *
 * @throws Drupal\Core\Utility\UpdateException
 */
function _va_gov_db_install_modules(array $modules, $install_dependents = TRUE) {
  $success = \Drupal::service('module_installer')->install($modules, $install_dependents);
  $modules_list = implode(', ', $modules);
  if ($success) {
    return "Installed the following modules: $modules_list";
  }
  else {
    // Something went wrong. Throw exception.
    throw new UpdateException(
      "Failed to install the requested modules: " . implode(',', $modules_list)
    );
  }
}

/**
 * Utility to change the max length of a text field.
 *
 * @param string $field_name
 *   Field name.
 * @param int $new_length
 *   Field length in characters.
 *
 * @throws \DrupalUpdateException
 */
function _va_gov_db_change_text_field_max_length($field_name, $new_length) {
  // The transaction opens here.
  $database = \Drupal::database();

  try {
    // Update field content tables with new max length.
    foreach (['node__', 'node_revision__'] as $prefix) {
      $database->query('
      ALTER TABLE {' . $prefix . $field_name . '}
        MODIFY ' . $field_name . '_value VARCHAR( ' . $new_length . ' )
      ');
    }

    // Update drupal storage schema.
    $storage_key = "node.field_schema_data.{$field_name}";
    $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
    $field_schema = $storage_schema->get($storage_key);
    $field_schema["node__{$field_name}"]['fields']["{$field_name}_value"]['length'] = $new_length;
    $field_schema["node_revision__{$field_name}"]['fields']["{$field_name}_value"]['length'] = $new_length;
    $storage_schema->set($storage_key, $field_schema);

    // Update field config record with new max length.
    $config = \Drupal::configFactory()
      ->getEditable("field.storage.node.{$field_name}");
    $config->set('settings.max_length', $new_length);
    $config->save(TRUE);

    // Update field storage configuration.
    // This needs to happen in the config yml.
  }
  catch (Exception $e) {
    // Something went wrong somewhere, so roll back now.
    $database->rollback();
    // Allow update to be re-run when errors are fixed.
    throw new UpdateException(
      "Failed to change $field_name field max length: " . $e->getMessage(),
      $e->getCode(), $e
    );
  }
  return "Updated field $field_name to the new size of $new_length Be sure to update vagov/config/sync/field.storage.node.{$field_name}.yml to match.";
}

/**
 * Renames a taxonomy term.
 *
 * @param string $oldname
 *   The original name of the taxonomy term.
 * @param string $newname
 *   The new name of the taxonomy term.
 * @param string|null $vocabulary_name
 *   The machine name of the vocabulary to search.  NULL results in all vocab.
 *
 * @return string
 *   A string of messages of what happened, separated with carriage returns.
 */
function _va_gov_rename_vocab_term($oldname, $newname, $vocabulary_name = NULL) {
  $messages = '';
  $vars = [
    ':oldname' => $oldname,
    ':newname' => $newname,
  ];
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'name' => $oldname,
    'vid' => $vocabulary_name,
  ]);
  if (empty($terms)) {
    $vars[':vocabulary'] = $vocabulary_name;
    $message = t("Found no term ':oldname' in vocabulary ':vocabulary'.", $vars);
    // This is not serious enough to throw an exception, because it may already
    // have been renamed by hand.  Just warn and move on.
    \Drupal::logger('va_gov_db')->warning($message);
    $messages .= $message . PHP_EOL;
  }
  else {
    foreach ($terms as $term) {
      /** @var Drupal\taxonomy\TermInterface $term */
      $term->setName($newname);
      $term->save();
      $vars[':tid'] = $term->id();
      $vars[':vocabulary'] = $term->bundle();
      $message = t("Vocabulary::vocabulary Term::tid was renamed from ':oldname' to ':newname'.", $vars);
      \Drupal::logger('va_gov_db')->info($message);
      $messages .= $message . PHP_EOL;
    }
  }

  return $messages;
}

/**
 * Creates a redirect and logs it.
 *
 * @param string $old_path
 *   The original path (source) of the redirect.
 * @param Drupal\Core\Entity\EntityInterface $entity
 *   The entity to redirect to.
 *
 * @return string
 *   A message to be returned.
 */
function _va_gov_db_create_redirect($old_path, EntityInterface $entity) {
  $old_path = trim($old_path, '/');
  $message = '';
  Redirect::create([
    'redirect_source' => $old_path,
    'redirect_redirect' => "internal:/{$entity->toUrl()->getInternalPath()}",
    'language' => 'en',
    'status_code' => '301',
  ])->save();
  $message = t("Redirect created from :old to :new.", [
    ':old' => "/{$old_path}",
    ':new' => "/{$entity->toUrl()->getInternalPath()}}",
  ]);
  \Drupal::logger('va_gov_db')->info($message);

  return $message . PHP_EOL;
}

/**
 * Creates a redirect and logs it.
 *
 * @param string $old_path
 *   The original path (source) of the redirect.
 * @param string $new_path
 *   The new path (target) of the redirect.
 *
 * @return string
 *   A message to be returned.
 */
function _va_gov_db_create_redirect_by_path($old_path, $new_path) {
  $old_path = trim($old_path, '/');
  $new_path = trim($new_path, '/');
  $message = '';
  Redirect::create([
    'redirect_source' => $old_path,
    'redirect_redirect' => "internal:/{$new_path}",
    'language' => 'en',
    'status_code' => '301',
  ])->save();
  $message = t("Redirect created from :old to :new.", [
    ':old' => "/{$old_path}",
    ':new' => "/{$new_path}",
  ]);
  \Drupal::logger('va_gov_db')->info($message);

  return $message . PHP_EOL;
}

/**
 * Publishes latest node revision.
 *
 * @param array $nids
 *   An array of node ids to publish.
 *
 * @return string
 *   A message of confirmation of node titles published.
 *
 * @throws Drupal\Core\Utility\UpdateException
 */
function _va_gov_db_publish_nodes(array $nids) {
  $nodes_published = [];
  foreach ($nids as $nid) {
    // Get latest revision ID.
    $node_storage = \Drupal::entityTypeManager()
      ->getStorage('node');
    $latest_vid = $node_storage->getLatestRevisionId($nid);
    if (empty($latest_vid)) {
      throw new UpdateException("Failed to find nid: {$nid}");
    }
    // Load latest revision.
    /** @var \Drupal\node\Entity\Node $latest_vid_loaded */
    $latest_vid_loaded = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadRevision($latest_vid);
    // Create a new revision and publish.
    $latest_vid_loaded->status = 1;
    $latest_vid_loaded->revision_log = t("Automatically published by code update.");
    $latest_vid_loaded->set('moderation_state', "published");
    $latest_vid_loaded->setNewRevision();
    $latest_vid_loaded->isDefaultRevision(TRUE);
    $latest_vid_loaded->setRevisionUserId(1317);
    $latest_vid_loaded->setOwnerId(1317);
    $latest_vid_loaded->setRevisionCreationTime(time());
    $latest_vid_loaded->save();
    $nodes_published[] = "{$nid} - {$latest_vid_loaded->getTitle()}";

  }
  $nids_list = implode(', ', $nodes_published);
  return "Published these nodes: {$nids_list}";
}

/**
 * Modify field_facility_locator_api_id field to be longer.
 */
function va_gov_db_update_8001(&$sandbox) {
  $message = _va_gov_db_change_text_field_max_length('field_facility_locator_api_id', 12);

  return $message;
}

/**
 * Uninstall json_content module.
 */
function va_gov_db_update_8002(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['json_content']);

  return $messages;
}

/**
 * Switch to Drupal minimal profile.
 */
function va_gov_db_update_8003(&$sandbox) {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.extension');
  $config->set('profile', 'minimal');
  $config->save(TRUE);
  $messages = "Update the install profile to use minimal.";

  return $messages;
}

/**
 * Uninstall lightning media modules.
 */
function va_gov_db_update_8004(&$sandbox) {
  $unistall_modules = [
    'lightning_media_document',
    'lightning_media_image',
    'lightning_media_video',
    'lightning_media_bulk_upload',
    'lightning_media',
  ];

  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall health_check.
 */
function va_gov_db_update_8005(&$sandbox) {
  $unistall_modules = [
    'health_check',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall slick modules.
 */
function va_gov_db_update_8006(&$sandbox) {
  $unistall_modules = [
    'slick_entityreference',
    'slick',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Remove dateless revisions.
 */
function va_gov_db_update_8007(&$sandbox) {
  // These nodes have some revisions without timestamps.
  $subject_nids = [68, 71, 72, 73, 74, 77, 78, 79];
  // Load up our node storage object for reuse.
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $vids = [];
  foreach ($subject_nids as $nid) {
    $loaded_node = Node::load($nid);
    // Once our node is loaded, we can get all revisions.
    if (!empty($loaded_node)) {
      $vids[] = $node_storage->revisionIds($loaded_node);
    }
  }
  foreach ($vids as $vid_collection) {
    // Iterate through all of our vid groups.
    foreach ($vid_collection as $vid) {
      // Load up our revisions to start our checks.
      $storage = $node_storage->loadRevision($vid);
      if (!empty($storage)) {
        // Look for a timestamp.
        $timestamp = $storage->get('revision_timestamp')->value;
        if ($timestamp === NULL) {
          // If we don't have one, dump the revision.
          $node_storage->deleteRevision($vid);
        }
      }
    }
  }

}

/**
 * Fix node revisions which have 'approved_by_reviewer' state.
 */
function va_gov_db_update_8008() {
  // These nid / revision ids are the ones in `approved_by_reviewer` status.
  // 841 / 9646.
  // 992 / 11407.
  // 2587 / 15111.
  $revisions_ids_to_draft = [
    841 => 9646,
    992 => 11407,
    2587 => 15111,
  ];

  foreach ($revisions_ids_to_draft as $nid => $vid) {
    $log_message = t(
      'Deleting vid :vid from :nid',
      [':vid' => $vid, ':nid' => $nid]
    );
    \Drupal::logger('va_gov_db')->info($log_message);

    node_revision_delete($vid);
  }

  \Drupal::logger('va_gov_db')->info('Update state of vid 15132 to "draft".');
  // Only 2628 / 15165 is node which needs to be set to draft.
  \Drupal::database()
    ->update('content_moderation_state_field_revision')
    ->condition('content_entity_id', 2628)
    ->condition('content_entity_revision_id', 15132)
    ->condition('content_entity_type_id', 'node')
    ->fields([
      'moderation_state' => 'draft',
    ])
    ->execute();
}

/**
 * Uninstall hide_revision_field.
 */
function va_gov_db_update_8011(&$sandbox) {
  $unistall_modules = [
    'hide_revision_field',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Move field_intro_text to field_intro_text_limited_html wysiwyg field.
 */
function va_gov_db_update_8015(&$sandbox) {
  // Grab our nodes and set the count.
  if (empty($sandbox['total'])) {
    $sandbox['nids_process'] = \Drupal::entityQuery('node')
      ->condition('type', 'page')
      ->accessCheck(FALSE)
      ->execute();
    $sandbox['total'] = count($sandbox['nids_process']);
    $sandbox['current'] = 0;
  }

  // Run through a batch of 25.
  $i = 0;
  $nids = '';
  foreach ($sandbox['nids_process'] as $revision => $nid) {
    if ($i == 25) {
      break;
    }
    $node = Node::load($nid);
    // Make this change a new revision.
    $node->setNewRevision(TRUE);
    // Set revision author to uid 1317.
    $node->setRevisionAuthorId(1317);
    $node->setChangedTime(time());
    $node->setRevisionCreationTime(time());
    $node->setOwnerId(1317);
    // Set revision log message.
    $node->setRevisionLogMessage('Automated move of text from intro_text to intro_text_limited_html');
    $node->save();
    unset($sandbox['nids_process'][$revision]);
    $i++;

    $nids .= $nid . ', ';
    $sandbox['current']++;
  }

  // Tell drupal we processed some nodes.
  Drupal::logger('va_gov_db')
    ->log(LogLevel::INFO, 'Page nodes %current nodes saved to populate the html intro field. Nodes processed: %nids', [
      '%current' => $sandbox['current'],
      '%nids' => $nids,
    ]);

  // Determine when to stop batching.
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  // Log the all finsished notice.
  if ($sandbox['#finished'] == 1) {
    Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'RE-saving all %count page nodes completed by va_gov_db_update_8015.', [
      '%count' => $sandbox['total'],
    ]);
    return "Process complete.";
  }

  return "Processing page nodes...";
}

/**
 * Uninstall redirect_after_login modules.
 */
function va_gov_db_update_8016(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['redirect_after_login']);

  return $messages;
}

/**
 * Uninstall workflow_participants modules.
 */
function va_gov_db_update_8017(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['workflow_participants']);

  return $messages;
}

/**
 * Uninstall node_revisions_autoclean modules.
 */
function va_gov_db_update_8018(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['node_revisions_autoclean']);

  return $messages;
}

/**
 * Uninstall moderation_sidebar module.
 */
function va_gov_db_update_8019(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['moderation_sidebar']);

  return $messages;
}

/**
 * Clear Drupal status report mis-matched entity/field errors.
 */
function va_gov_db_update_8020() {

  $missing_entity_types = [
    'environment_indicator',
    'migration',
    'migration_group',
  ];
  foreach ($missing_entity_types as $missing_entity_type) {
    $type_manager = \Drupal::entityTypeManager();
    $entity_type = $type_manager->getDefinition($missing_entity_type);
    \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
    \Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Installed missing entity type %missing_entity_type.', [
      '%missing_entity_type' => $missing_entity_type,
    ]);
  }

  $out_of_date_fields = ['field_benefits', 'field_facility_locator_api_id'];
  foreach ($out_of_date_fields as $out_of_date_field) {
    // Load and re-save field storage config to clear error.
    if ($field_storage = FieldStorageConfig::loadByName('node', $out_of_date_field)) {
      $field_storage->save();
      \Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Updated field storage configuration for %field_name.', [
        '%field_name' => $out_of_date_field,
      ]);
    }
  }

  $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $previous_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions('node');
  if (!empty($previous_storage_definitions['field_health_services_local_info'])) {
    $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
    $definition_update_manager->uninstallFieldStorageDefinition(
      $previous_storage_definitions['field_health_services_local_info']
    );
    \Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Deleted field storage configuration for field_health_services_local_info.');
  }

  return "Cleared mis-matched entity/field errors.";
}

/**
 * Uninstall markdown module.
 */
function va_gov_db_update_8021(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['markdown']);
  return $messages;
}

/**
 * Uninstall cms export modules modules.
 */
function va_gov_db_update_8022(&$sandbox) {
  $unistall_modules = [
    'tome',
    'tome_sync',
    'va_gov_content_export',
    'zippylib',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall tome modules.
 */
function va_gov_db_update_8023(&$sandbox) {
  $unistall_modules = [
    'tome_static',
    'tome_base',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall tome modules, again.
 */
function va_gov_db_update_8024(&$sandbox) {
  $unistall_modules = [
    'tome_static',
    'tome_base',
  ];
  $messages = _va_gov_db_uninstall_modules($unistall_modules);

  return $messages;
}

/**
 * Uninstall OpenAPI based modules.
 */
function va_gov_db_update_8025(&$sandbox) {
  $unistall_modules = [
    'openapi',
    'openapi_ui',
    'openapi_ui_redoc',
    'openapi_ui_swagger',
  ];

  return _va_gov_db_uninstall_modules($unistall_modules);
}

/**
 * Update intro text for vet center nodes.
 */
function va_gov_db_update_8026(&$sandbox) {
  // Grab our nodes and set the count.
  if (empty($sandbox['total'])) {
    $sandbox['nids_process'] = \Drupal::entityQuery('node')
      ->condition('type', 'vet_center')
      ->accessCheck(FALSE)
      ->execute();
    $sandbox['total'] = count($sandbox['nids_process']);
    $sandbox['current'] = 0;
  }

  // Run through a batch of 25.
  $i = 0;
  $nids = '';
  foreach ($sandbox['nids_process'] as $revision => $nid) {
    if ($i == 25) {
      break;
    }
    $node = Node::load($nid);
    // Make this change a new revision.
    $node->setNewRevision(TRUE);
    // Set revision author to uid 1317.
    $node->setRevisionAuthorId(1317);
    $node->setChangedTime(time());
    $node->setRevisionCreationTime(time());
    $node->setOwnerId(1317);
    // Set revision log message.
    $node->setRevisionLogMessage('Update intro text.');
    // Set our intro text field value.
    $node->set('field_intro_text', 'We offer confidential help for Veterans, service members, and their families at no cost in a non-medical setting. Our services include counseling for needs such as depression, post traumatic stress disorder (PTSD), and the psychological effects of military sexual trauma (MST). We can also connect you with more support in VA and your community.');
    $node->save();
    unset($sandbox['nids_process'][$revision]);
    $i++;

    $nids .= $nid . ', ';
    $sandbox['current']++;
  }

  // Tell drupal we processed some nodes.
  Drupal::logger('va_gov_db')
    ->log(LogLevel::INFO, 'Vet center nodes %current nodes saved to update intro field. Nodes processed: %nids', [
      '%current' => $sandbox['current'],
      '%nids' => $nids,
    ]);

  // Determine when to stop batching.
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  // Log the all finsished notice.
  if ($sandbox['#finished'] == 1) {
    Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'RE-saving all %count Vet center nodes completed by va_gov_db_update_8026.', [
      '%count' => $sandbox['total'],
    ]);
    return "Process complete.";
  }

  return "Processing vet center nodes...";
}

/**
 * Enable  pathauto for detail page nodes.
 */
function va_gov_db_update_8027(&$sandbox) {
  $key_value = \Drupal::keyValue('pathauto_state.node');
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'health_care_region_detail_page')
    ->accessCheck(FALSE)
    ->execute();
  $count = 0;
  foreach ($nids as $nid) {
    if ($key_value->get($nid) == 0) {
      $key_value->set($nid, 1);
      $count++;
    }
  }
  Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Enabled pathauto auto alias for %count Detail page nodes completed by va_gov_db_update_8027.', [
    '%count' => $count,
  ]);
}

/**
 * Set vamc term children to 0 weight for proper sorting.
 */
function va_gov_db_update_8028(&$sandbox) {
  // Grab our terms and set the count.
  $vamc_items = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('administration', 8, NULL, TRUE);
  foreach ($vamc_items as $vamc_term) {
    $vamc_term->set('weight', 0);
    $vamc_term->save();

  }

  // Tell drupal we processed vamc terms.
  Drupal::logger('va_gov_db')
    ->log(LogLevel::INFO, 'VAMC terms processed: %count', [
      '%count' => count($vamc_items),
    ]);

}

/**
 * Set vc term children to 0 weight for proper sorting.
 */
function va_gov_db_update_8029(&$sandbox) {
  // Grab our terms and set the count.
  $vc_items = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('administration', 190, NULL, TRUE);

  foreach ($vc_items as $vc_term) {
    $vc_term->set('weight', 0);
    $vc_term->save();

  }

  // Tell drupal we processed vc terms.
  Drupal::logger('va_gov_db')
    ->log(LogLevel::INFO, 'VC terms processed: %count', [
      '%count' => count($vc_items),
    ]);
}

/**
 * Enable pathauto for vamc leadership_listing node types.
 */
function va_gov_db_update_8030(&$sandbox) {
  $key_value = \Drupal::keyValue('pathauto_state.node');
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'leadership_listing')
    ->accessCheck(FALSE)
    ->execute();
  $count = 0;
  foreach ($nids as $nid) {
    if ($key_value->get($nid) == 0) {
      $key_value->set($nid, 1);
      $count++;
    }
  }
  Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Enabled pathauto auto alias for %count Leadership listing page nodes completed by va_gov_db_update_8028.', [
    '%count' => $count,
  ]);
}

/**
 * Create locations listing pages for all remaining vet centers.
 */
function va_gov_db_update_8031(&$sandbox) {
  // Get all of our existing vc locations listings.
  $vc_list_nids = \Drupal::entityQuery('node')->condition('type', 'vet_center_locations_list')->accessCheck(FALSE)->execute();
  $vc_list_nodes = Node::loadMultiple($vc_list_nids);
  $vcs_with_lists_ids = [];
  // Get their vc associations.
  foreach ($vc_list_nodes as $vc_list_node) {
    $vcs_with_lists_ids[$vc_list_node->get('field_office')->getString()] = $vc_list_node->get('field_office')->getString();
  }

  // Get all of the vet centers.
  $vc_nids = \Drupal::entityQuery('node')->condition('type', 'vet_center')->execute();
  $vc_nodes = Node::loadMultiple($vc_nids);
  $vcs_ids = [];
  $vc_term_loader = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  // Run through our vc's, and grab their corresponding term ids.
  foreach ($vc_nodes as $vc_node) {
    $vc_title = $vc_node->getTitle();
    $vc_term_raw = $vc_term_loader->loadByProperties([
      'name' => $vc_title,
      'vid' => 'administration',
    ]);
    $vc_term = reset($vc_term_raw);
    $vcs_ids[$vc_node->id()] = [
      'vc_title' => $vc_title,
      'node_id' => $vc_node->id(),
      'term_id' => $vc_term->id(),
    ];
  }
  // Get all vc's that don't have a vc locations listing.
  $vcs_ids = array_diff_key($vcs_ids, $vcs_with_lists_ids);

  // Create our vc locations listings.
  // This operation is fast, so no need to batch.
  foreach ($vcs_ids as $vcs_id) {
    $new_vc_listing = Node::create(['type' => 'vet_center_locations_list']);
    $new_vc_listing->setOwnerId(1317);
    $new_vc_listing->set('title', 'Locations');
    $new_vc_listing->set('field_intro_text', 'We provide all of our counseling, outreach, and support services at our main location.');
    $new_vc_listing->set('field_administration', $vcs_id['term_id']);
    $new_vc_listing->set('field_office', $vcs_id['node_id']);
    $new_vc_listing->save();
    Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'Created a locations listing page for %vc_title by va_gov_db_update_8031.', [
      '%vc_title' => $vcs_id['vc_title'],
    ]);
  }
}

/**
 * Uninstall va_gov_user_guide module.
 */
function va_gov_db_update_8032(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['va_gov_user_guide']);

  return $messages;
}

/**
 * Rename four key section names.
 */
function va_gov_db_update_8033(&$sandbox) {
  $messages = '';
  $section_terms = [
    'National Cemetery Administration' => 'NCA',
    'Veterans Affairs' => 'VACO',
    'Veterans Benefits Administration' => 'VBA',
    'Veterans Health Administration' => 'VHA',
  ];
  foreach ($section_terms as $oldname => $newname) {
    $messages .= _va_gov_rename_vocab_term($oldname, $newname, 'administration');
  }

  return $messages;
}

/**
 * Add redirects for restructured facility views.
 */
function va_gov_db_update_8034(&$sandbox) {
  $messages = '';
  $redirects = [
    'admin/content/facility-status' => 'admin/content/facilities/facility-status',
    'admin/content/audit/vamc-system-service-audit' => 'admin/content/facilities/vamc-system-service-audit',
    'admin/content/audit/vamc-ehr' => 'admin/content/facilities/vamc-systems',
  ];
  foreach ($redirects as $oldpath => $newpath) {
    $messages .= _va_gov_db_create_redirect_by_path($oldpath, $newpath);
  }

  return $messages;
}

/**
 * Uninstall Entity Embed module.
 */
function va_gov_db_update_9002(&$sandbox) {
  $messages = _va_gov_db_uninstall_modules(['entity_embed']);

  return $messages;
}

/**
 * Set field_error_message text_format value on paragraph 4102.
 */
function va_gov_db_update_9003() {

  \Drupal::database()
    ->update('paragraph__field_error_message')
    ->condition('entity_id', 4102)
    ->fields([
      'field_error_message_format' => 'rich_text',
    ])
    ->execute();
  \Drupal::logger('va_gov_db')->info('Update field_error_message to full_html');

  \Drupal::database()
    ->update('paragraph_revision__field_error_message')
    ->condition('entity_id', 4102)
    ->fields([
      'field_error_message_format' => 'rich_text',
    ])
    ->execute();
  \Drupal::logger('va_gov_db')->info('Update field_error_message revision to full_html');

  return 'Set field_error_message text_format value on paragraph 4102.';

}

/**
 * Add redirects for VHA services taxonomy view.
 */
function va_gov_db_update_9004(&$sandbox) {
  $messages = '';
  $redirects = [
    '/vha-health-services' => '/va-services',
  ];
  foreach ($redirects as $oldpath => $newpath) {
    $messages .= _va_gov_db_create_redirect_by_path($oldpath, $newpath);
  }

  return $messages;
}

/**
 * Uninstall next  and related modules.
 */
function va_gov_db_update_9005(&$sandbox) {
  $modules = [
    'decoupled_router',
    'next_jsonapi',
    'next',
    'simple_oauth',
    'subrequests',
  ];

  $messages = _va_gov_db_uninstall_modules($modules);

  return $messages;
}

/**
 * Remove field_facility_hours from facilities.
 */
function va_gov_db_update_9006() {
  $field = FieldConfig::loadByName('node', 'health_care_local_facility', 'field_facility_hours');
  if ($field) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();
  }

  return 'Removed field_facility_hours from facilities.';
}

/**
 * Remove field_meta_title.
 */
function va_gov_db_update_9007() {
  $field = FieldConfig::loadByName('node', 'page', 'field_meta_title');
  if ($field) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();
  }

  $field2 = FieldConfig::loadByName('node', 'landing_page', 'field_meta_title');
  if ($field2) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();
  }

  $field3 = FieldConfig::loadByName('node', 'basic_landing_page', 'field_meta_title');
  if ($field3) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();
  }

  $field4 = FieldConfig::loadByName('node', 'office', 'field_meta_title');
  if ($field4) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();
  }

  $field5 = FieldConfig::loadByName('node', 'publication_listing', 'field_meta_title');
  if ($field5) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();
  }

  return 'Removed field_meta_title from Benefits hubs (detail and landing), Landing pages, Offices and Publication Listing nodes.';
}

/**
 * Resave billing pages to capture EFF paragraph text.
 */
function va_gov_db_update_9008(&$sandbox) {
  // Grab our nodes and set the count.
  if (empty($sandbox['total'])) {
    $sandbox['nids_process'] = \Drupal::entityQuery('node')
      ->condition('type', 'vamc_system_billing_insurance')
      ->accessCheck(FALSE)
      ->execute();
    $sandbox['total'] = count($sandbox['nids_process']);
    $sandbox['current'] = 0;
  }

  // Run through a batch of 25.
  $i = 0;
  $nids = '';
  foreach ($sandbox['nids_process'] as $revision => $nid) {
    if ($i == 25) {
      break;
    }
    $node = Node::load($nid);
    // Set the top of page eff value.
    $node->field_cc_above_top_of_page->value = "0";
    // Make this change a new revision.
    $node->setNewRevision(TRUE);
    // Set revision author to uid 1317.
    $node->setRevisionUserId(1317);
    $node->setChangedTime(time());
    $node->isDefaultRevision(TRUE);
    $node->setRevisionCreationTime(time());
    $node->setOwnerId(1317);
    // Set revision log message.
    $node->setRevisionLogMessage('Add centralized copay content.');
    $node->save();
    unset($sandbox['nids_process'][$revision]);
    $i++;

    $nids .= $nid . ', ';
    $sandbox['current']++;
  }

  // Tell drupal we processed some nodes.
  Drupal::logger('va_gov_db')
    ->log(LogLevel::INFO, 'Billing nodes %current nodes saved to update copay text. Nodes processed: %nids', [
      '%current' => $sandbox['current'],
      '%nids' => $nids,
    ]);

  // Determine when to stop batching.
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  // Log the all finsished notice.
  if ($sandbox['#finished'] == 1) {
    Drupal::logger('va_gov_db')->log(LogLevel::INFO, 'RE-saving all %count Billing nodes completed by va_gov_db_update_9007.', [
      '%count' => $sandbox['total'],
    ]);
    return "Process complete.";
  }

  return "Processing billing nodes...";
}

/**
 * Remove field_hours_for_copay_inquiries_ from billing.
 */
function va_gov_db_update_9009() {
  $field = FieldConfig::loadByName('node', 'vamc_system_billing_insurance', 'field_hours_for_copay_inquiries_');
  if ($field) {
    /** @var Drupal\field\FieldConfigInterface $field */
    $field->delete();
  }

  return 'Removed field_hours_for_copay_inquiries_ from billing.';
}

/**
 * Create redirect for flagged content.
 */
function va_gov_db_update_9010(&$sandbox) {
  return _va_gov_db_create_redirect_by_path('/admin/content/flagged', '/admin/content/facilities/flagged');
}

/**
 * Create redirects for rich text search View displays.
 */
function va_gov_db_update_9011(&$sandbox) {
  $mesages = _va_gov_db_create_redirect_by_path('/admin/content/audit/rich-text-field-audit.csv', '/admin/content/audit/search/export');
  $mesages .= _va_gov_db_create_redirect_by_path('/admin/content/audit/rich-text-field-audit', '/admin/content/audit/search');
  return $mesages;
}

/**
 * Remove a number of old tables from the database.
 */
function va_gov_db_update_9012(&$sandbox) {
  $logger = \Drupal::logger('va_gov_db_update_9012');
  $schema = \Drupal::database()->schema();
  $tables = $schema->findTables("old_%");
  $table_names = array_keys($tables);
  $count = count($tables);
  $logger->info("Found $count tables: " . json_encode($table_names));
  foreach ($table_names as $table_name) {
    $removed = $schema->dropTable($table_name);
    if ($removed) {
      $logger->info("Table $table_name successfully dropped.");
    }
    else {
      $logger->warning("Table $table_name not found.");
    }
  }
  $tables = $schema->findTables("old_%");
  $table_names = array_keys($tables);
  $count = count($tables);
  if (!$count) {
    $logger->info("Successfully removed all old tables.");
  }
  else {
    $logger->warning("Found $count tables after update: " . json_encode($table_names));
  }
}

/**
 * Toggle content_model_documentation off so config import can fully reinstall.
 */
function va_gov_db_update_9013(&$sandbox) {
  $messages = '';
  $schema = Database::getConnection()->schema();

  // Because the content_model_documentation module now has a content type,
  // the module needs to be uninstalled and then re-installed.  The problem is
  // the cleanup tries to remove content type fields that do not exist and
  // throws a fatal error.  So we have to create fake tables with the right
  // fields so the cleanup on module uninstall can proceed.
  $table = [
    'fields' => [
      'id' => [
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'normal',
        'default' => '0',
      ],
      'vid' => [
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'normal',
        'default' => '0',
      ],
    ],
  ];
  if (!$schema->tableExists('cm_document')) {
    $schema->createTable('cm_document', $table);
    $messages .= "Added cm_document table to prevent uninstall from erroring.\n";
  }
  if (!$schema->tableExists('cm_document_field_data')) {
    $schema->createTable('cm_document_field_data', $table);
    $messages .= "Added cm_document_field_data table to prevent uninstall from erroring.\n";
  }
  $messages .= _va_gov_db_uninstall_modules(['content_model_documentation']);

  return $messages;
}

/**
 * Publish latest revision of KB related to required revision log messages.
 */
function va_gov_db_update_9014(&$sandbox) {
  return _va_gov_db_publish_nodes([35029]);
}

/**
 * Enable the `va_gov_github` module.
 */
function va_gov_db_update_9015(&$sandbox) {
  _va_gov_db_install_modules([
    'va_gov_github',
  ]);
}
