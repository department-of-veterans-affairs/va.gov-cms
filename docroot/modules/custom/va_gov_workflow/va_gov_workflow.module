<?php

/**
 * @file
 * Contains va_gov_workflow.module.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\OpenModalDialogCommand;

/**
 * Implements hook_help().
 */
function va_gov_workflow_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_workflow module.
    case 'help.page.va_gov_workflow':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides customizations for publishing workflow.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Adds Validation to check for presence of revision log message.
 *
 * @param array $form
 *   The exposed widget form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _va_gov_workflow_validate_required_revision_message(array $form, FormStateInterface &$form_state) {
  // Add revision log validation.
  if ($form_state->isValueEmpty(['revision_log', '0', 'value'])) {
    $form_state->setErrorByName('revision_log][0][value', t('Revision log message is required'));
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * {@inheritdoc}
 */
function va_gov_workflow_entity_base_field_info_alter(&$fields, ContentEntityTypeInterface $entity_type) {
  // Display the revision_log_message field.
  if ($entity_type->id() == 'taxonomy_term' && isset($fields['revision_log_message'])) {
    // Grab the existing options so we don't stomp them without intent.
    $form_options = $fields['revision_log_message']->getDisplayOptions('form');
    // For some reason the field defaults to region = hidden.
    $form_options['region'] = 'content';
    $fields['revision_log_message']
      ->setRequired(TRUE)
      ->setDisplayOptions('form', $form_options);
  }
}

/**
 * AJAX callback for moderation state changes.
 */
function va_gov_workflow_moderation_state_ajax_callback(
  array &$form,
  FormStateInterface $form_state,
) {
  $response = new AjaxResponse();
  try {
    // Try to detect the moderation state value from form_state or the form
    // structure. The widget value can be nested; extract the first string we
    // find.
    $value = NULL;
    if ($form_state->hasValue('moderation_state')) {
      $selected_value = $form_state->getValue('moderation_state');
    }
    elseif (isset($form['moderation_state'])) {
      $selected_value = $form['moderation_state'];
    }
    else {
      $selected_value = NULL;
    }

    // Get the selected moderation state.
    $value = NULL;
    if ($selected_value !== NULL
        && is_array($selected_value)
        && !empty($selected_value[0]['value'])) {
      $value = $selected_value[0]['value'];
    }

    if ($value !== NULL && strtolower($value) === 'archived') {
      // If this form has an entity and that entity has linked content, show
      // a warning modal with a link to the usage tab so the user can review
      // related items before archiving.
      $title = \Drupal::translation()->translate('Address related content');
      $entity = NULL;
      try {
        /** @var \Drupal\Core\Entity\ContentEntityForm|null $form_object */
        $form_object = $form_state->getFormObject();
        if ($form_object && method_exists($form_object, 'getEntity')) {
          $entity = $form_object->getEntity();
        }
      }
      catch (\Throwable $e) {
        // Ignore — we'll treat as no entity found.
        $entity = NULL;
      }

      $show_usage_warning = FALSE;
      $usage_link_html = '';
      if ($entity) {
        // Use the workflow content control service which knows about linked
        // entities.
        try {
          $workflow_control = \Drupal::service('va_gov_workflow.workflow_content_control');
          if (
            method_exists($workflow_control, 'hasLinkedEntities')
            && $workflow_control->hasLinkedEntities($entity)
          ) {
            $show_usage_warning = TRUE;
            // Build a link to the entity usage page (entity_usage_addons
            // exposes a route like entity.{entity_type}.entity_usage).
            $entity_type = $entity->getEntityTypeId();
            $entity_id = $entity->id();
            $route = "entity.{$entity_type}.entity_usage";
            try {
              // Get the usage total for display.
              $usage_total = 0;
              try {
                $usage_service = \Drupal::service('entity_usage_addons.usage');
                $usage_total = (int) $usage_service->getUsageTotal(
                  $entity_type,
                  $entity_id
                );
              }
              catch (\Throwable $e) {
                $usage_total = 0;
              }
              // Build a URL to the usage page and ensure it opens in a new tab.
              $url = Url::fromRoute(
                $route,
                [$entity_type => $entity_id]
              )->setOptions([
                'attributes' => [
                  'target' => '_blank',
                  'rel' => 'noopener',
                  'class' => ['button', 'button--primary'],
                ],
              ]);
              $usage_link_html = Link::fromTextAndUrl(\Drupal::translation()->translate('View related content'), $url)->toString();
            }
            catch (\Throwable $e) {
              // If route generation fails, fallback to a simple path link.
              $path = '/' . $entity_type . '/' . $entity_id . '/usage';
              $usage_link_html = '<a href="' . $path . '" target="_blank" rel="noopener" class="button button--primary">' . \Drupal::translation()->translate('View related content') . '</a>';
            }
          }
        }
        catch (\Throwable $e) {
          // If the service isn't available or throws, don't block archive
          // behavior — fall through to the normal confirm modal below.
          $show_usage_warning = FALSE;
        }
      }

      if ($show_usage_warning) {
        // Build pluralized usage text and include it inline in the warning.
        $usage_text = \Drupal::translation()->formatPlural($usage_total, '1 related item', '@count related items', ['@count' => $usage_total]);

        // Build a render array for the modal content so we can attach a
        // library that provides safe behaviors instead of inline JS handlers.
        $modal_build = [
          '#type' => 'container',
          'message' => [
            '#type' => 'markup',
            '#markup' => '<p>' . \Drupal::translation()->translate('This content has @usage. Review and address the related content before archiving.', ['@usage' => $usage_text]) . '</p>',
          ],
          'actions' => [
            '#type' => 'container',
            '#attributes' => ['class' => ['va-gov-workflow-modal-actions']],
            'usage_link' => [
              '#type' => 'markup',
              '#markup' => $usage_link_html,
            ],
          ],
          '#attached' => [
            'library' => ['va_gov_workflow/modal'],
          ],
        ];

        $rendered = \Drupal::service('renderer')->renderRoot($modal_build);
        $response->addCommand(new OpenModalDialogCommand($title, $rendered, ['width' => '600']));
      }
    }
    else {
      if (isset($form['moderation_state'])) {
        // Prefer re-rendering the full form when possible so that attached
        // libraries and drupalSettings are included and Drupal behaviors are
        // re-applied. This prevents AJAX handlers from only working once.
        if (!empty($form['#id'])) {
          try {
            $rendered_form = \Drupal::service('renderer')->renderRoot($form);
            $response->addCommand(new ReplaceCommand('#' . $form['#id'], $rendered_form));
          }
          catch (\Throwable $e) {
            // Fallback to rendering only the moderation element.
            if (isset($form['moderation_state']['widget'][0]['state'])) {
              $to_render = $form['moderation_state']['widget'][0]['state'];
            }
            else {
              $to_render = $form['moderation_state'];
            }
            $rendered = \Drupal::service('renderer')->renderRoot($to_render);
            $response->addCommand(new ReplaceCommand('#moderation-state-wrapper', $rendered));
          }
        }
        else {
          if (isset($form['moderation_state']['widget'][0]['state'])) {
            $to_render = $form['moderation_state']['widget'][0]['state'];
          }
          else {
            $to_render = $form['moderation_state'];
          }
          $rendered = \Drupal::service('renderer')->renderRoot($to_render);
          $response->addCommand(new ReplaceCommand('#moderation-state-wrapper', $rendered));
        }
      }
    }
  }
  catch (\Throwable $e) {
    // Swallow exceptions to avoid breaking AJAX responses. Consider logging
    // during development to help debug issues.
    \Drupal::logger('va_gov_workflow')->error($e->getMessage());
  }
  return $response;
}
