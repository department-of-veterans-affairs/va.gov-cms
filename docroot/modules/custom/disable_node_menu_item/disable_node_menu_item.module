<?php

/**
 * @file
 * @defgroup disable_node_menu_item Disable Node Menu Item
 */

/**
 * Adds the ability to disable a nodes menu item from the node add/edit page.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function disable_node_menu_item_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the block module.
    case 'disable_node_menu_item.settings':
      return '<p>' . t('Use this configuration form to determine which content types will allow node menu items to be disabled/enabled from the node add/edit form') . '</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function disable_node_menu_item_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $default = 1;
  $node = $form_state->getFormObject()->getEntity();
  $nodeBundle = $node->bundle();
  $types = array_values(\Drupal::config('disable_node_menu_item.settings')->get('node_types'));

  // Check if we are adding a new node or editing an existing node.
  if ($node->id()) {
    // Since we have a node id value we are editing a node
    // Determine if this menu item is hidden or not and
    // make the checkboxes default reflect that.
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    $menu_links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $node->id()]);
    if (count($menu_links)) {
      foreach ($menu_links as $menu_link) {
        $definition = $menu_link->getPluginDefinition();
        $default = $definition['enabled'];
      }
    }
  }

  // Only add our toggle if this node can be placed in a menu.
  if (isset($form['menu']['link'])) {
    // Only add our toggle if this node is of a content
    // type selected in the configuration.
    $flag = in_array($node->bundle(), $types, $strict = TRUE);
    if ($flag) {
      // Add a checkbox toggle control to the node form.
      $form['menu']['link']['link_enabled'] = [
        '#type' => 'checkbox',
        '#title' => t('Enable in menu'),
        '#description' => t('Uncheck this option to create the menu item, but hide it from the menu tree. This may be useful to keep your content structured without cluttering the menu for site visitors.'),
        '#default_value' => $default,
      ];
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'disable_node_menu_item_submit';
        }
      }
    }
  }
}

/**
 * Implements hook_submit().
 */
function disable_node_menu_item_submit(array $form, FormStateInterface $form_state) {
  if ($node = $form_state->getFormObject()->getEntity()) {
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    $menu_links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $node->id()]);
    if (count($menu_links)) {
      foreach ($menu_links as $menu_link) {
        $definition = $menu_link->getPluginDefinition();
        $definition['enabled'] = $form_state->getValue(['menu', 'link_enabled']);
        $menu_link_manager->updateDefinition($menu_link->getPluginId(), $definition);
      }
    }
  }

}
