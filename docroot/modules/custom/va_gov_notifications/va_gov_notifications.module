<?php

/**
 * @file
 * Contains va_gov_notifications.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\va_gov_notifications\WorkflowChangeEmail;

/**
 * Implements hook_help().
 */
function va_gov_notifications_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_notifications module.
    case 'help.page.va_gov_notifications':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Sends emails to workflow participants on node change.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function va_gov_notifications_form_workflow_participants_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Editors and reviewers aren't restricted in functionality
  // by workflow_participants module, so having both is confusing.
  unset($form['editors']);
}

/**
 * Implements hook_mail().
 */
function va_gov_notifications_mail($key, &$message, $params) {
  // This allows us to translate to users selected lalnguage.
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    // Define our email type.
    case 'workflow_status_change':
      // Base formatting.
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', ['@title' => $params['title']], $options);
      $message['body'][] = Html::escape($params['message']);
      break;
  }
}

/**
 * Implements hook_entity_presave().
 */
function va_gov_notifications_entity_presave(EntityInterface $entity) {
  // Make sure it's a node.
  if ($entity instanceof NodeInterface) {

    // Make sure we have an original for revision comparison.
    if (!empty($entity->original)) {
      // Check if workflow state has changed.
      $original_workflow_state_raw = $entity->original->get('moderation_state')->getValue();
      $original_workflow_state = reset($original_workflow_state_raw);
      $new_workflow_state_raw = $entity->get('moderation_state')->getValue();
      $new_workflow_state = reset($new_workflow_state_raw);
      if ($new_workflow_state['value'] !== $original_workflow_state['value']) {

        // Check if there are workflow participants.
        $participants = \Drupal::entityTypeManager()->getStorage('workflow_participants')->loadForModeratedEntity($entity);
        // Editors field is removed via alter above, but let's leave the check
        // in place just to be safe / for future functionality revisions.
        $editors = $participants->editors->getValue();
        $reviewers = $participants->reviewers->getValue();

        // Put all of our users into one array for multiple load op.
        $all_participants = array_merge($editors, $reviewers);
        $uids = array_column($all_participants, 'target_id');
        $mail = [];
        if (!empty($uids)) {
          $users = User::loadMultiple($uids);
          foreach ($users as $user) {

            // Get our emails, names, and language.
            if (!empty($user->get('mail')->value)) {
              $date = new DateTime('now', new DateTimeZone($user->getTimeZone()));
              $mail['users'][$user->id()]['email'] = $user->get('mail')->value;
              $mail['users'][$user->id()]['name'] = $user->get('name')->value;
              $mail['users'][$user->id()]['lang'] = $user->getPreferredLangcode();
              $mail['users'][$user->id()]['time'] = $date->format('Y-m-d H:i:s');
            }
          }

          // Build info about the workflow change for our email.
          $change_author = $entity->getRevisionUser();
          $mail['node_title'] = $entity->get('title')->value;
          $mail['original_workflow_state'] = $original_workflow_state['value'];
          $mail['new_workflow_state'] = $new_workflow_state['value'];
          $mail['url'] = \Drupal::request()->getSchemeAndHttpHost() . \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $entity->id());
          $mail['log_message'] = $entity->get('revision_log')->value;
          $mail['change_author'] = [
            'name' => $change_author->get('name')->value,
            'email' => $change_author->get('mail')->value,
            'uid' => $change_author->id(),
          ];

          // Pass it to our send class.
          $mail_sender = new WorkflowChangeEmail();
          $mail_sender->sendEmail($mail);
        }
      }
    }
  }
}
