diff --git a/src/Plugin/migrate/process/StrReplace.php b/src/Plugin/migrate/process/StrReplace.php
index 08dece7..b8a5cd0 100644
--- a/src/Plugin/migrate/process/StrReplace.php
+++ b/src/Plugin/migrate/process/StrReplace.php
@@ -125,6 +125,14 @@ class StrReplace extends ProcessPluginBase {
     if ($this->configuration['regex']) {
       $function = 'preg_replace';
     }
+    if($this->multiple) {
+      foreach($value as $key => $item) {
+        $item = (string) $item;
+        $value[$key] = $function($this->configuration['search'], $this->configuration['replace'], $item);
+      }
+      return $value;
+    }
+    $value = (string) $value;
     return $function($this->configuration['search'], $this->configuration['replace'], $value);
   }

diff --git a/tests/src/Unit/process/StrReplaceTest.php b/tests/src/Unit/process/StrReplaceTest.php
index 320c4c9..5182568 100644
--- a/tests/src/Unit/process/StrReplaceTest.php
+++ b/tests/src/Unit/process/StrReplaceTest.php
@@ -29,8 +29,66 @@ final class StrReplaceTest extends MigrateProcessTestCase {

   }

+   /**
+   * Test for a simple str_replace given NULL.
+   */
+  public function testStrReplaceNull(): void {
+    $configuration = [];
+    $value = NULL;
+    $configuration['search'] = '';
+    $configuration['replace'] = 'that';
+    $plugin = new StrReplace($configuration, 'str_replace', []);
+    $actual = $plugin->transform($value, $this->migrateExecutable, $this->row, 'destinationproperty');
+    $this->assertSame('', $actual);
+
+  }
+
+   /**
+   * Test for a simple str_replace given int 1.
+   */
+  public function testStrReplaceInt(): void {
+    $configuration = [];
+    $value = 1;
+    $configuration['search'] = '1';
+    $configuration['replace'] = 'that';
+    $plugin = new StrReplace($configuration, 'str_replace', []);
+    $actual = $plugin->transform($value, $this->migrateExecutable, $this->row, 'destinationproperty');
+    $this->assertSame('that', $actual);
+
+  }
+
+
+   /**
+   * Test for a simple str_replace given TRUE.
+   */
+  public function testStrReplaceTrue(): void {
+    $configuration = [];
+    $value = TRUE;
+    $configuration['search'] = '1';
+    $configuration['replace'] = 'that';
+    $plugin = new StrReplace($configuration, 'str_replace', []);
+    $actual = $plugin->transform($value, $this->migrateExecutable, $this->row, 'destinationproperty');
+    $this->assertSame('that', $actual);
+
+  }
+
+
+   /**
+   * Test for a simple str_replace given FALSE.
+   */
+  public function testStrReplaceFalse(): void {
+    $configuration = [];
+    $value = FALSE;
+    $configuration['search'] = '';
+    $configuration['replace'] = 'that';
+    $plugin = new StrReplace($configuration, 'str_replace', []);
+    $actual = $plugin->transform($value, $this->migrateExecutable, $this->row, 'destinationproperty');
+    $this->assertSame('', $actual);
+
+  }
+
   /**
-   * Test for case insensitive searches.
+   * Test for case-insensitive searches.
    */
   public function testStrIreplace(): void {
     $configuration = [];
