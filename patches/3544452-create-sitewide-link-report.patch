diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 0000000000000000000000000000000000000000..d159169d1050894d3ea3b98e1c965c4058208fe1
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/drush.services.yml b/drush.services.yml
new file mode 100644
index 0000000000000000000000000000000000000000..4020b18ab12e9c86e2bfabc17dd3c645bf75e5c5
--- /dev/null
+++ b/drush.services.yml
@@ -0,0 +1,6 @@
+services:
+  node_link_report.drush_command:
+    class: 'Drupal\node_link_report\Command\NodeLinkReportCommand'
+    arguments: ['@node_link_report.link_checker', '@entity_type.manager']
+    tags:
+      - { name: drush.command }
diff --git a/node_link_report.info.yml b/node_link_report.info.yml
index a914504ad338af119b316aabd7f773b3a9a1ad6c..dd4e32966f784cbc7f8e34f0fafb201435e2adb1 100644
--- a/node_link_report.info.yml
+++ b/node_link_report.info.yml
@@ -6,3 +6,8 @@ core_version_requirement: ^9.3 || ^10 || ^11
 package: 'Content'
 dependencies:
   - 'drupal:path_alias'
+
+# Information added by Drupal.org packaging script on 2025-07-30
+version: '8.x-1.21'
+project: 'node_link_report'
+datestamp: 1753888614
diff --git a/node_link_report.services.yml b/node_link_report.services.yml
new file mode 100644
index 0000000000000000000000000000000000000000..71bcdb9afb3435b7900bd1aa105534ff8c4f4bb6
--- /dev/null
+++ b/node_link_report.services.yml
@@ -0,0 +1,17 @@
+services:
+  node_link_report.link_checker:
+    class: 'Drupal\node_link_report\Service\LinkCheckerService'
+    arguments:
+      - '@entity_type.manager'
+      - '@renderer'
+      - '@http_client'
+      - '@file_system'
+      - '@logger.factory'
+
+  node_link_report.command:
+    class: 'Drupal\node_link_report\Command\NodeLinkReportCommand'
+    arguments:
+      - '@node_link_report.link_checker'
+      - '@entity_type.manager'
+    tags:
+      - { name: 'console.command' }
diff --git a/src/Command/NodeLinkReportCommand.php b/src/Command/NodeLinkReportCommand.php
new file mode 100644
index 0000000000000000000000000000000000000000..b37183d748f0f3f36bca785ee730889f41f4523d
--- /dev/null
+++ b/src/Command/NodeLinkReportCommand.php
@@ -0,0 +1,78 @@
+<?php
+
+namespace Drupal\node_link_report\Command;
+
+use Drupal\node_link_report\Service\LinkCheckerService;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Symfony\Component\Console\Command\Command;
+use Symfony\Component\Console\Input\InputInterface;
+use Symfony\Component\Console\Input\InputOption;
+use Symfony\Component\Console\Output\OutputInterface;
+
+/**
+ * Drush/Console command to run link checks and produce CSV.
+ */
+class NodeLinkReportCommand extends Command {
+
+  protected static $defaultName = 'node_link_report:check';
+
+  protected LinkCheckerService $linkChecker;
+  protected EntityTypeManagerInterface $entityTypeManager;
+
+  public function __construct(LinkCheckerService $link_checker, EntityTypeManagerInterface $entity_type_manager) {
+    parent::__construct();
+    $this->linkChecker = $link_checker;
+    $this->entityTypeManager = $entity_type_manager;
+  }
+
+  protected function configure() {
+    $this
+      ->setDescription('Scan published nodes for links and write a CSV report of HTTP responses.')
+      ->addOption('limit', NULL, InputOption::VALUE_OPTIONAL, 'Maximum nodes to process (for testing).')
+      ->addOption('timeout', NULL, InputOption::VALUE_OPTIONAL, 'HTTP client timeout in seconds.', 10)
+      ->addOption('concurrency', NULL, InputOption::VALUE_OPTIONAL, 'Parallel requests to issue.', 10)
+  ->addOption('base-url', NULL, InputOption::VALUE_OPTIONAL, 'Base URL to resolve site-root relative links (example: https://www.va.gov).')
+      ->addOption('output', NULL, InputOption::VALUE_OPTIONAL, 'CSV output URI (stream wrapper).');
+  }
+
+  protected function execute(InputInterface $input, OutputInterface $output) {
+    $limit = $input->getOption('limit');
+    $timeout = (float) $input->getOption('timeout');
+    $concurrency = (int) $input->getOption('concurrency');
+    $output_uri = $input->getOption('output');
+    $base_url = $input->getOption('base-url');
+
+    $query = $this->entityTypeManager->getStorage('node')->getQuery()
+      ->condition('status', 1)
+      ->sort('nid', 'ASC')
+      ->accessCheck('FALSE');
+    if ($limit) {
+      $query->range(0, (int) $limit);
+    }
+    $nids = $query->execute();
+
+    $report = $this->linkChecker->generateReportForNids(array_values($nids), [
+      'timeout' => $timeout,
+      'concurrency' => $concurrency,
+      'output' => $output_uri,
+      'base_url' => $base_url,
+    ]);
+
+    // Resolve the real filesystem path if possible and print it for easy access.
+    $real = NULL;
+    try {
+      $real = \Drupal::service('file_system')->realpath($report);
+    }
+    catch (\Exception $e) {
+      // ignore
+    }
+    if ($real) {
+      $output->writeln("Report written to: $report (realpath: $real)");
+    }
+    else {
+      $output->writeln("Report written to: $report");
+    }
+    return Command::SUCCESS;
+  }
+
+}
diff --git a/src/Plugin/Block/NodeLinkReport.php b/src/Plugin/Block/NodeLinkReport.php
index 06b1c9bbf8d4cb4a7c755f1ad43e61a4f252c533..2455ba092c76b5ca2ee2b6013fde0ca820751cca 100644
--- a/src/Plugin/Block/NodeLinkReport.php
+++ b/src/Plugin/Block/NodeLinkReport.php
@@ -1021,7 +1021,7 @@ class NodeLinkReport extends BlockBase implements ContainerFactoryPluginInterfac
   private function getDomains($type) {
     if (!isset($this->$type)) {
       // This has not been built yet, so build it.
-      $domain_list = $this->nlrConfig->get($type) ?? '';
+      $domain_list = $this->nlrConfig->get($type);
       // Clean up any bad data by converting all separators into ','.
       $domain_list = str_replace(["\r\n", "\n", "\r", ', ', ' ,', " "], ',', $domain_list);
       // Clean up by removing any scheme.
diff --git a/src/Service/LinkCheckerService.php b/src/Service/LinkCheckerService.php
new file mode 100644
index 0000000000000000000000000000000000000000..89619880312a9aa9ddd5c607ab06d91f6ff5344a
--- /dev/null
+++ b/src/Service/LinkCheckerService.php
@@ -0,0 +1,266 @@
+<?php
+
+namespace Drupal\node_link_report\Service;
+
+use Drupal\Component\Utility\UrlHelper;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use GuzzleHttp\ClientInterface;
+use GuzzleHttp\Promise\Utils;
+
+/**
+ * Service that checks links and writes CSV reports.
+ */
+class LinkCheckerService {
+
+  protected EntityTypeManagerInterface $entityTypeManager;
+  protected RendererInterface $renderer;
+  protected ClientInterface $httpClient;
+  protected FileSystemInterface $fileSystem;
+  protected $logger;
+
+  public function __construct(EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer, ClientInterface $http_client, FileSystemInterface $file_system, LoggerChannelFactoryInterface $logger_factory) {
+    $this->entityTypeManager = $entityTypeManager;
+    $this->renderer = $renderer;
+    $this->httpClient = $http_client;
+    $this->fileSystem = $file_system;
+    $this->logger = $logger_factory->get('node_link_report');
+  }
+
+  /**
+   * Generate a CSV report for the provided node IDs.
+   *
+   * @param int[] $nids
+   *   Node IDs to scan.
+   * @param array $options
+   *   Options: timeout (seconds), concurrency (int), output (stream wrapper URI).
+   *
+   * @return string
+   *   The path/URI to the generated CSV file.
+   */
+  public function generateReportForNids(array $nids, array $options = []): string {
+    $timeout = $options['timeout'] ?? 10;
+    $concurrency = $options['concurrency'] ?? 10;
+    $output = $options['output'] ?? NULL;
+
+  $dir = 'private://node_link_report';
+    // prepareDirectory expects the directory by reference in some file system
+    // implementations (eg. s3fs). Pass a variable.
+    $this->fileSystem->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
+    $ts = date('Ymd-His');
+    if (empty($output)) {
+      $output = rtrim($dir, '/') . '/report-' . $ts . '.csv';
+    }
+    else {
+      // If output looks like a directory (ends with '/'), write a timestamped
+      // file into that directory. Otherwise, insert the timestamp before the
+      // file extension of the provided filename.
+      if (substr($output, -1) === '/') {
+        $output = rtrim($output, '/') . '/report-' . $ts . '.csv';
+      }
+      else {
+        $last_slash = strrpos($output, '/');
+        if ($last_slash === FALSE) {
+          $dir_part = '';
+          $file_part = $output;
+        }
+        else {
+          $dir_part = substr($output, 0, $last_slash + 1);
+          $file_part = substr($output, $last_slash + 1);
+        }
+        $dot = strrpos($file_part, '.');
+        if ($dot === FALSE) {
+          $new_file = $file_part . '-' . $ts;
+        }
+        else {
+          $name = substr($file_part, 0, $dot);
+          $ext = substr($file_part, $dot);
+          $new_file = $name . '-' . $ts . $ext;
+        }
+        $output = $dir_part . $new_file;
+      }
+    }
+
+    $fh = fopen($output, 'w');
+    if ($fh === FALSE) {
+      throw new \RuntimeException("Unable to open output path $output for writing.");
+    }
+
+    fputcsv($fh, ['node_id', 'node_title', 'node_path', 'link_url', 'link_text', 'http_status', 'final_url', 'response_time_ms', 'notes']);
+
+    if (empty($nids)) {
+      fclose($fh);
+      return $output;
+    }
+
+    $base_url_option = $options['base_url'] ?? NULL;
+
+    $storage = $this->entityTypeManager->getStorage('node');
+    // Process in chunks to reduce memory pressure.
+    $chunks = array_chunk($nids, 25);
+    foreach ($chunks as $chunk) {
+      $nodes = $storage->loadMultiple($chunk);
+      // Collect link tasks keyed by a unique id to map back to node/link data.
+      $tasks = [];
+      foreach ($nodes as $node) {
+        $nid = $node->id();
+        $title = $node->label();
+        $node_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
+        $view_builder = $this->entityTypeManager->getViewBuilder('node');
+        $build = $view_builder->view($node, 'full');
+        $html = $this->renderer->renderRoot($build);
+        $dom = new \DOMDocument();
+        @$dom->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));
+        $anchors = $dom->getElementsByTagName('a');
+        foreach ($anchors as $a) {
+          $href = trim($a->getAttribute('href'));
+          $text = trim($a->textContent);
+          if ($href === '' || $href === '#' || strpos($href, 'javascript:') === 0) {
+            continue;
+          }
+          // Resolve protocol-relative and site-root relative URLs.
+          if (strpos($href, '//') === 0) {
+            // Default to https for protocol relative links.
+            $href = 'https:' . $href;
+          }
+
+          // If the href starts with '/', resolve to site base if possible; skip if not resolvable.
+          if (strpos($href, '/') === 0) {
+            // Use provided base_url option if present.
+            if (!empty($base_url_option)) {
+              $base = rtrim($base_url_option, '/');
+            }
+            else {
+              // Try to build an absolute URL from internal node URL when possible.
+              $node_scheme = parse_url($node_url, PHP_URL_SCHEME) ?: 'https';
+              $node_host = parse_url($node_url, PHP_URL_HOST) ?: '';
+              // If host looks like a placeholder (eg. 'default' or localhost),
+              // fall back to va.gov.
+              if (in_array($node_host, ['default', '127.0.0.1', 'localhost', '::1', ''], TRUE)) {
+                $base = 'https://www.va.gov';
+              }
+              else {
+                $base = $node_scheme . '://' . $node_host;
+              }
+            }
+            $href = rtrim($base, '/') . $href;
+          }
+
+          $scheme = parse_url($href, PHP_URL_SCHEME);
+          if ($scheme !== NULL && !in_array(strtolower($scheme), ['http', 'https'], TRUE)) {
+            continue;
+          }
+
+          // If the href is absolute and its host is a placeholder like 'default'
+          // or localhost, rewrite it to use the va.gov domain so checks target
+          // the public site instead of the backend placeholder host.
+          $host = parse_url($href, PHP_URL_HOST);
+          if ($host !== NULL && in_array(strtolower($host), ['default', 'localhost', '127.0.0.1', '::1', ''], TRUE)) {
+            $path = parse_url($href, PHP_URL_PATH) ?: '/';
+            $query = parse_url($href, PHP_URL_QUERY);
+            $fragment = parse_url($href, PHP_URL_FRAGMENT);
+            $new = 'https://www.va.gov' . $path;
+            if ($query) {
+              $new .= '?' . $query;
+            }
+            if ($fragment) {
+              $new .= '#' . $fragment;
+            }
+            $href = $new;
+          }
+
+          $tasks[] = [
+            'nid' => $nid,
+            'title' => $title,
+            'node_url' => $node_url,
+            'href' => $href,
+            'text' => $text,
+          ];
+        }
+      }
+
+      if (empty($tasks)) {
+        continue;
+      }
+
+      // Dispatch async GET requests in parallel for speed. We use GET to avoid
+      // servers that block HEAD; this is simple and effective. For HEAD+fallback
+      // logic a second pass could be added.
+      $promises = [];
+      foreach ($tasks as $key => $task) {
+        $promises[$key] = $this->httpClient->requestAsync('GET', $task['href'], [
+          'timeout' => $timeout,
+          'connect_timeout' => $timeout,
+          'allow_redirects' => TRUE,
+          'http_errors' => FALSE,
+        ]);
+      }
+
+      $results = Utils::settle($promises)->wait();
+
+      foreach ($results as $key => $result) {
+        $task = $tasks[$key];
+        $status = 0;
+        $final_url = $task['href'];
+        $dt = 0;
+        $note = '';
+        $start = microtime(TRUE);
+        if ($result['state'] === 'fulfilled') {
+          $response = $result['value'];
+          $status = $response->getStatusCode();
+          $final_url = (string) $response->getHeaderLine('X-Guzzle-Effective-URL') ?: (string) $response->getHeaderLine('Location') ?: $task['href'];
+        }
+        else {
+          $reason = $result['reason'];
+          $note = 'error: ' . $reason->getMessage();
+          $this->logger->error('Error checking @url for node @nid: @msg', ['@url' => $task['href'], '@nid' => $task['nid'], '@msg' => $reason->getMessage()]);
+        }
+        $dt = (int) round((microtime(TRUE) - $start) * 1000);
+
+        // Only write rows for non-200 responses (including errors/status 0).
+        if ($status !== 200) {
+          fputcsv($fh, [
+            $task['nid'],
+            $task['title'],
+            $task['node_url'],
+            $task['href'],
+            $task['text'],
+            $status,
+            $final_url,
+            $dt,
+            $note,
+          ]);
+        }
+      }
+    }
+
+    fclose($fh);
+
+    // For developer convenience, attempt to copy the generated report into the
+    // Drupal root tmp/ directory (if writable) so it is easy to inspect from
+    // the workspace.
+    try {
+  $drupal_root = \Drupal::root();
+      if ($drupal_root) {
+        $target_dir = rtrim($drupal_root, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . 'tmp';
+        if (!is_dir($target_dir)) {
+          @mkdir($target_dir, 0775, TRUE);
+        }
+        $real = $this->fileSystem->realpath($output);
+        if ($real && file_exists($real)) {
+          $basename = basename($real);
+          @copy($real, $target_dir . DIRECTORY_SEPARATOR . $basename);
+        }
+      }
+    }
+    catch (\Throwable $e) {
+      // Non-fatal; ignore copy errors.
+      $this->logger->warning('Could not copy report to tmp/: @msg', ['@msg' => $e->getMessage()]);
+    }
+
+    return $output;
+  }
+
+}
diff --git a/tests/src/Kernel/LinkCheckerKernelTest.php b/tests/src/Kernel/LinkCheckerKernelTest.php
new file mode 100644
index 0000000000000000000000000000000000000000..0652dbc4c5703a9c137720f4245bc4e93b8ebb8b
--- /dev/null
+++ b/tests/src/Kernel/LinkCheckerKernelTest.php
@@ -0,0 +1,84 @@
+<?php
+
+namespace Drupal\node_link_report\Tests\Kernel;
+
+use Drupal\KernelTests\KernelTestBase;
+use GuzzleHttp\Handler\MockHandler;
+use GuzzleHttp\HandlerStack;
+use GuzzleHttp\Client;
+use GuzzleHttp\Psr7\Response;
+
+/**
+ * Kernel tests for the LinkCheckerService.
+ *
+ * This test creates a node with a link and verifies a CSV is produced.
+ */
+class LinkCheckerKernelTest extends KernelTestBase {
+
+  public static $modules = ['node', 'system', 'file', 'node_link_report'];
+
+  protected function setUp(): void {
+    parent::setUp();
+    // Install schemas required for node and file.
+    $this->installEntitySchema('node');
+    $this->installEntitySchema('user');
+    $this->installSchema('system', ['sequences']);
+    $this->installConfig(['node_link_report']);
+    // Ensure a simple 'page' content type exists for nodes created in tests.
+    if (!\Drupal::entityTypeManager()->getStorage('node_type')->load('page')) {
+      $type = \Drupal\node\Entity\NodeType::create(['type' => 'page', 'name' => 'Page']);
+      $type->save();
+    }
+  }
+
+  public function testGenerateReport() {
+    // Create a node with a link in the body field.
+    $user = \Drupal\user\Entity\User::create([
+      'name' => 'testuser',
+      'mail' => 'test@example.com',
+      'status' => 1,
+    ]);
+    $user->save();
+
+    $node = \Drupal\node\Entity\Node::create([
+      'type' => 'page',
+      'title' => 'Link Checker Test',
+      'status' => 1,
+      'uid' => $user->id(),
+      'body' => [
+        'value' => '<p>See <a href="https://example.com/ok">OK</a> and <a href="https://example.com/notfound">Broken</a></p>',
+        'format' => 'basic_html',
+      ],
+    ]);
+    $node->save();
+
+    // Prepare a mocked HTTP client with two responses.
+    $mock = new MockHandler([
+      new Response(200),
+      new Response(404),
+    ]);
+    $handler = HandlerStack::create($mock);
+    $client = new Client(['handler' => $handler]);
+
+    // Instantiate the LinkCheckerService with the mocked client so we don't
+    // need to replace services in the container.
+    $service = new \Drupal\node_link_report\Service\LinkCheckerService(
+      $this->container->get('entity_type.manager'),
+      $this->container->get('renderer'),
+      $client,
+      $this->container->get('file_system'),
+      $this->container->get('logger.channel.factory')
+    );
+
+    $report = $service->generateReportForNids([$node->id()], ['timeout' => 5, 'concurrency' => 5]);
+
+    $this->assertStringContainsString('private://', $report);
+    // Ensure the file exists and contains the two links.
+    $realpath = \Drupal::service('file_system')->realpath($report);
+    $this->assertFileExists($realpath);
+    $contents = file_get_contents($realpath);
+    $this->assertStringContainsString('https://example.com/ok', $contents);
+    $this->assertStringContainsString('https://example.com/notfound', $contents);
+  }
+
+}
