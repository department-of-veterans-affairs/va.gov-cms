diff --git a/config/schema/entity_browser.schema.yml b/config/schema/entity_browser.schema.yml
index 67a1d79cc7c9a07dd5db72908cfefb46584d9a9a..ccb446d739903d5ff5dde6dce8357aa67bc1c195 100644
--- a/config/schema/entity_browser.schema.yml
+++ b/config/schema/entity_browser.schema.yml
@@ -190,6 +190,9 @@ field.widget.settings.entity_browser_entity_reference:
     selection_mode:
       type: string
       label: 'Selection mode'
+    show_latest_revision:
+      type: boolean
+      label: 'Show latest revision'

 entity_browser.field_widget_display.label:
   type: mapping
diff --git a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
index 13df19e50ae44393a651c46a0524065d0c29c921..d3636c6ea24bc448e604cf7ee05f3cf235938e5f 100644
--- a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
+++ b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
@@ -96,21 +96,23 @@ class EntityReferenceBrowserWidget extends WidgetBase {
    */
   public static function defaultSettings() {
     return [
-      'entity_browser' => NULL,
-      'open' => FALSE,
-      'field_widget_display' => 'label',
-      'field_widget_edit' => TRUE,
-      'field_widget_remove' => TRUE,
-      'field_widget_replace' => FALSE,
-      'field_widget_display_settings' => [],
-      'selection_mode' => EntityBrowserElement::SELECTION_MODE_APPEND,
-    ] + parent::defaultSettings();
+        'entity_browser' => NULL,
+        'open' => FALSE,
+        'field_widget_display' => 'label',
+        'field_widget_edit' => TRUE,
+        'field_widget_remove' => TRUE,
+        'field_widget_replace' => FALSE,
+        'field_widget_display_settings' => [],
+        'selection_mode' => EntityBrowserElement::SELECTION_MODE_APPEND,
+        'show_latest_revision' => FALSE,
+      ] + parent::defaultSettings();
   }

   /**
    * {@inheritdoc}
    */
-  public function settingsForm(array $form, FormStateInterface $form_state) {
+  public function settingsForm(array $form, FormStateInterface $form_state)
+  {
     $element = parent::settingsForm($form, $form_state);

     $browsers = [];
@@ -220,6 +222,13 @@ class EntityReferenceBrowserWidget extends WidgetBase {
       '#default_value' => $this->getSetting('open'),
     ];

+    $element['show_latest_revision'] = [
+      '#title' => $this->t('Show the latest revision of the entity.'),
+      '#description' => $this->t('If marked, latest revision will be shown in the edit form.'),
+      '#type' => 'checkbox',
+      '#default_value' => $this->getSetting('show_latest_revision'),
+    ];
+
     $element['selection_mode'] = [
       '#title' => $this->t('Selection mode'),
       '#description' => $this->t('Determines how selection in entity browser will be handled. Will selection be appended/prepended or it will be replaced in case of editing.'),
@@ -270,6 +279,7 @@ class EntityReferenceBrowserWidget extends WidgetBase {
   public function settingsSummary() {
     $summary = $this->summaryBase();
     $field_widget_display = $this->getSetting('field_widget_display');
+    $show_latest_revision = $this->getSetting('show_latest_revision');

     if (!empty($field_widget_display)) {
       $pluginDefinition = $this->fieldDisplayManager->getDefinition($field_widget_display);
@@ -283,6 +293,8 @@ class EntityReferenceBrowserWidget extends WidgetBase {
         $view_mode_label = $plugin->getViewModeLabel();
         $summary[] = $this->t('View Mode: @view_mode', ['@view_mode' => $view_mode_label]);
       }
+      $latest_revision_label = $show_latest_revision ? $this->t('Showing latest revisions.') : $this->t('Showing default revisions.');
+      $summary[] = $latest_revision_label;
     }
     return $summary;
   }
@@ -750,13 +762,14 @@ class EntityReferenceBrowserWidget extends WidgetBase {
    * @param \Drupal\Core\Form\FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return \Drupal\Core\Entity\EntityInterface[]|\Drupal\Core\Entity\RevisionableStorageInterface[]
    *   The list of entities for the form element.
    */
   protected function formElementEntities(FieldItemListInterface $items, array $element, FormStateInterface $form_state) {
     $entities = [];
     $entity_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');
     $entity_storage = $this->entityTypeManager->getStorage($entity_type);
+    $show_latest_revision = $this->getSetting('show_latest_revision');

     // Find IDs from target_id element (it stores selected entities in form).
     // This was added to help solve a really edge casey bug in IEF.
@@ -796,6 +809,17 @@ class EntityReferenceBrowserWidget extends WidgetBase {

       if (isset($parents) && $value = $form_state->getValue($parents)) {
         $entities = EntityBrowserElement::processEntityIds($value);
+        if ($show_latest_revision) {
+          $latest_entities = [];
+          foreach ($entities as $entity) {
+            $latest_revision_id = $entity_storage->getLatestRevisionId($entity->id());
+            $entity = $entity_storage->loadRevision($latest_revision_id);
+            if (!empty($entity)) {
+              $latest_entities[] = $entity;
+            }
+          }
+          return $latest_entities;
+        }
         return $entities;
       }
       return $entities;
@@ -822,6 +846,10 @@ class EntityReferenceBrowserWidget extends WidgetBase {
       }
       return $entities;
     }
+    // If we intend to show the latest revisions, we need to get them.
+    elseif ($show_latest_revision) {
+      return $this->getEntitiesLatestRevision($items);
+    }
     // We are loading for for the first time so we need to load any existing
     // values that might already exist on the entity. Also, remove any leftover
     // data from removed entity references.
@@ -838,6 +866,35 @@ class EntityReferenceBrowserWidget extends WidgetBase {
     }
   }

+  /**
+   * Get the latest revision of the referenced entities.
+   *
+   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   *   The field items.
+   *
+   * @return \Drupal\Core\Entity\RevisionableStorageInterface[]
+   *   The list of referenced entities with the latest revision.
+   */
+  protected function getEntitiesLatestRevision(FieldItemListInterface $items) {
+    $entities = [];
+    $entity_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');
+    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $entity_storage */
+    $entity_storage = $this->entityTypeManager->getStorage($entity_type);
+
+    foreach ($items as $item) {
+      if (isset($item->target_id)) {
+        $entity = $entity_storage->load($item->target_id);
+        $latest_revision_id = $entity_storage->getLatestRevisionId($item->target_id);
+        $entity = $entity_storage->loadRevision($latest_revision_id);
+        if (!empty($entity)) {
+          $entities[] = $entity;
+        }
+      }
+    }
+
+    return $entities;
+  }
+
   /**
    * {@inheritdoc}
    */
