diff --git a/decoupled_router/decoupled_router.services.yml b/decoupled_router/decoupled_router.services.yml
index 90e959ca..fe2f5365 100644
--- a/decoupled_router/decoupled_router.services.yml
+++ b/decoupled_router/decoupled_router.services.yml
@@ -4,7 +4,7 @@ services:
     arguments: ['decoupled_router']
   decoupled_router.router_path_translator.subscriber:
     class: Drupal\decoupled_router\EventSubscriber\RouterPathTranslatorSubscriber
-    arguments: ['@service_container', '@logger.channel.decoupled_router', '@router.no_access_checks', '@module_handler', '@config.factory', '@path_alias.manager']
+    arguments: ['@service_container', '@logger.channel.decoupled_router', '@router.no_access_checks', '@module_handler', '@config.factory', '@path_alias.manager', '@language_manager', '@entity.repository']
     tags:
       - { name: event_subscriber }
   decoupled_router.redirect_path_translator.subscriber:
diff --git a/decoupled_router/src/EventSubscriber/RedirectPathTranslatorSubscriber.php b/decoupled_router/src/EventSubscriber/RedirectPathTranslatorSubscriber.php
index 8d5e8f90..b3a3ac6d 100644
--- a/decoupled_router/src/EventSubscriber/RedirectPathTranslatorSubscriber.php
+++ b/decoupled_router/src/EventSubscriber/RedirectPathTranslatorSubscriber.php
@@ -5,8 +5,10 @@
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\GeneratedUrl;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Url;
 use Drupal\decoupled_router\PathTranslatorEvent;
+use Symfony\Component\HttpFoundation\Request;

 /**
  * Event subscriber that processes a path translation with the redirect info.
@@ -46,13 +48,32 @@ public function onPathTranslation(PathTranslatorEvent $event) {
     $redirects_trace = [];
     while (TRUE) {
       $destination = $this->cleanSubdirInPath($destination, $event->getRequest());
+      $path_without_prefix = $destination;
+      $langcodes = [];
+      if ($this->languageManager->isMultilingual()) {
+        $langcodes = [LanguageInterface::LANGCODE_NOT_SPECIFIED];
+        $language_negotiation_url = $this->languageManager->getNegotiator()
+          ->getNegotiationMethodInstance('language-url');
+        $router_request = Request::create($destination);
+        $langcode = $language_negotiation_url->getLangcode($router_request);
+        $language_prefixes = $this->configFactory->get('language.negotiation')->get('url.prefixes');
+        $lang_prefix = $language_prefixes[$langcode] ?? '';
+        if ($langcode && ($destination === "/$lang_prefix" || strpos($destination, "/$lang_prefix/") === 0)) {
+          $langcodes[] = $langcode;
+          $path_without_prefix = $language_negotiation_url->processInbound($destination, $router_request);
+        }
+      }
       // Find if there is a redirect for this path.
-      $results = $redirect_storage
+      $query = $redirect_storage
         ->getQuery()
         ->accessCheck(TRUE)
         // Redirects are stored without the leading slash :-(.
-        ->condition('redirect_source.path', ltrim($destination, '/'))
+        ->condition('redirect_source__path', ltrim($path_without_prefix, '/'))
         ->execute();
+      if (!empty($langcodes)) {
+        $query->condition('language', $langcodes, 'IN');
+      }
+      $results = $query->execute();
       $rid = reset($results);
       if (!$rid) {
         break;
diff --git a/decoupled_router/src/EventSubscriber/RouterPathTranslatorSubscriber.php b/decoupled_router/src/EventSubscriber/RouterPathTranslatorSubscriber.php
index cc20fad8..fa2416d9 100644
--- a/decoupled_router/src/EventSubscriber/RouterPathTranslatorSubscriber.php
+++ b/decoupled_router/src/EventSubscriber/RouterPathTranslatorSubscriber.php
@@ -9,7 +9,10 @@
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Routing\RouteObjectInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ -73,6 +76,27 @@ class RouterPathTranslatorSubscriber implements EventSubscriberInterface {
    */
   protected $aliasManager;

+  /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
+   * The entity repository service.
+   *
+   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   */
+  protected $entityRepository;
+
+  /**
+   * The langcode if added as a prefix to the path.
+   *
+   * @var string
+   */
+  protected $langcode;
+
   /**
    * RouterPathTranslatorSubscriber constructor.
    *
@@ -88,6 +112,10 @@ class RouterPathTranslatorSubscriber implements EventSubscriberInterface {
    *   The config factory.
    * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
    *   The alias manager.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   *   The language manager.
+   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   *   The entity repository.
    */
   public function __construct(
     ContainerInterface $container,
@@ -96,6 +124,8 @@ public function __construct(
     ModuleHandlerInterface $module_handler,
     ConfigFactoryInterface $config_factory,
     AliasManagerInterface $aliasManager,
+    LanguageManagerInterface $language_manager,
+    EntityRepositoryInterface $entity_repository
   ) {
     $this->container = $container;
     $this->logger = $logger;
@@ -103,6 +133,8 @@ public function __construct(
     $this->moduleHandler = $module_handler;
     $this->configFactory = $config_factory;
     $this->aliasManager = $aliasManager;
+    $this->languageManager = $language_manager;
+    $this->entityRepository = $entity_repository;
   }

   /**
@@ -116,6 +148,9 @@ public function onPathTranslation(PathTranslatorEvent $event) {
     }
     $path = $event->getPath();
     $path = $this->cleanSubdirInPath($path, $event->getRequest());
+    if ($this->languageManager->isMultilingual()) {
+      $path = $this->getPathFromAlias($path);
+    }
     try {
       $match_info = $this->router->match($path);
     }
@@ -145,6 +180,14 @@ public function onPathTranslation(PathTranslatorEvent $event) {
       $this->logger->notice('A route has been found but it has no entity information.');
       return;
     }
+    elseif (!empty($this->langcode)) {
+      if ($entity->hasTranslation($this->langcode)) {
+        $entity = $entity->getTranslation($this->langcode);
+      }
+      else {
+        $entity = $this->entityRepository->getTranslationFromContext($entity, $this->langcode);
+      }
+    }
     $response->addCacheableDependency($entity);
     if ($entity->getEntityType() instanceof ContentEntityType) {
       $can_view = $entity->access('view', NULL, TRUE);
@@ -181,9 +224,14 @@ public function onPathTranslation(PathTranslatorEvent $event) {
       return;
     }
     $entity_param = $param_uses_uuid ? $entity->id() : $entity->uuid();
-    $resolved_url = Url::fromRoute($match_info[RouteObjectInterface::ROUTE_NAME], [
-      $route_parameter_entity_key => $entity_param,
-    ], ['absolute' => TRUE])->toString(TRUE);
+    $resolved_url = Url::fromRoute(
+      $match_info[RouteObjectInterface::ROUTE_NAME],
+      [$route_parameter_entity_key => $entity_param],
+      [
+        'absolute' => TRUE,
+        'language' => $entity->language(),
+      ]
+    )->toString(TRUE);
     $response->addCacheableDependency($canonical_url);
     $response->addCacheableDependency($resolved_url);
     $is_home_path = $this->resolvedPathIsHomePath($resolved_url->getGeneratedUrl());
@@ -193,6 +241,10 @@ public function onPathTranslation(PathTranslatorEvent $event) {

     $label_accessible = $entity->access('view label', NULL, TRUE);
     $response->addCacheableDependency($label_accessible);
+    $langcode = NULL;
+    if ($entity instanceof TranslatableInterface) {
+      $langcode = $entity->language()->getId();
+    }
     $output = [
       'resolved' => $resolved_url->getGeneratedUrl(),
       'isHomePath' => $is_home_path,
@@ -202,6 +254,7 @@ public function onPathTranslation(PathTranslatorEvent $event) {
         'bundle' => $entity->bundle(),
         'id' => $entity->id(),
         'uuid' => $entity->uuid(),
+        'langcode' => $langcode,
       ],
     ];
     if ($label_accessible->isAllowed()) {
@@ -219,23 +272,23 @@ public function onPathTranslation(PathTranslatorEvent $event) {
       $rt_repo = $this->container->get('jsonapi.resource_type.repository');
       $rt = $rt_repo->get($entity_type_id, $entity->bundle());
       $type_name = $rt->getTypeName();
-      $jsonapi_base_path = $this->container->getParameter('jsonapi.base_path');
-      $entry_point_url = Url::fromRoute('jsonapi.resource_list', [], ['absolute' => TRUE])->toString(TRUE);
+      $jsonapi_base_path = Url::fromRoute('jsonapi.entry_point', [], ['absolute' => TRUE, 'language' => $entity->language()]);
+      $entry_point_url = Url::fromRoute('jsonapi.resource_list', [], ['absolute' => TRUE, 'language' => $entity->language()])->toString(TRUE);
       $route_name = sprintf('jsonapi.%s.individual', $type_name);
       $individual = Url::fromRoute(
         $route_name,
         [
           static::getEntityRouteParameterName($route_name, $entity_type_id) => $entity->uuid(),
         ],
-        ['absolute' => TRUE]
+        ['absolute' => TRUE, 'language' => $entity->language()]
       )->toString(TRUE);
       $response->addCacheableDependency($entry_point_url);
       $response->addCacheableDependency($individual);
       $output['jsonapi'] = [
         'individual' => $individual->getGeneratedUrl(),
         'resourceName' => $type_name,
-        'pathPrefix' => trim($jsonapi_base_path, '/'),
-        'basePath' => $jsonapi_base_path,
+        'pathPrefix' => $jsonapi_base_path->getGeneratedUrl(),
+        'basePath' => $jsonapi_base_path->getGeneratedUrl(),
         'entryPoint' => $entry_point_url->getGeneratedUrl(),
       ];
       $output['meta'] = [
@@ -385,6 +438,22 @@ protected function cleanSubdirInPath($path, Request $request) {
     return preg_replace(sprintf('/^%s/', $regexp), '', $path);
   }

+  protected function getPathFromAlias($path) {
+    $config = $this->configFactory->get('language.negotiation')->get('url');
+    $language_negotiation_url = $this->languageManager->getNegotiator()
+      ->getNegotiationMethodInstance('language-url');
+    $router_request = Request::create($path);
+    $langcode = $language_negotiation_url->getLangcode($router_request);
+    $prefix = $config['prefixes'][$langcode] ?? NULL;
+    if ($prefix && ($path == "/$prefix" || strpos($path, "/$prefix/") === 0)) {
+      $this->langcode = $langcode;
+      $path_without_prefix = $language_negotiation_url->processInbound($path, $router_request);
+      $path = $this->aliasManager->getPathByAlias($path_without_prefix, $langcode);
+      $path = "/$prefix" . $path;
+    }
+    return $path;
+  }
+
   /**
    * Checks if the resolved path is the home path.
    *