name: Continuous Integration
on: [pull_request]
jobs:

  # Check whether certain fields exist in the CMS configuration.
  check-fields:
    name: Check Fields
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check Corresponding Entity Reference Fields
        run: ./tests/scripts/check-cer.sh
      - name: Check Revision Log fields
        run: ./tests/scripts/check-revision-logs.sh

  # Validate that the `composer.lock` hash is up-to-date.
  composer-validate:
    name: Composer Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: composer validate

  # Analyze the codebase with GitHub's CodeQL tool.
  codeql-analyze:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: github/codeql-action/init@v2
    - uses: github/codeql-action/analyze@v2

  # Check style of ES/JS files with ESLint and ReviewDog.
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-eslint@v1
        with:
          reporter: github-pr-review
          eslint_flags: '--max-warnings 0 -c .eslintrc.json --no-eslintrc docroot/modules/custom/**/*.es6.js docroot/themes/custom/**/*.es6.js'
          fail_on_error: true

  # Check for common PHP code smells with PHP_CodeSniffer.
  php_codesniffer:
    name: PHP_CodeSniffer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/post-checkout
      - name: Run PHP_CodeSniffer and ReviewDog
        run: |
          export REVIEWDOG_GITHUB_API_TOKEN="${GITHUB_TOKEN}"
          bin/phpcs \
            --standard="${STANDARD}" \
            --extensions="${EXTENSIONS}" \
            --report="${REPORT}" \
            --ignore="${IGNORE}" \
            -q \
            ${DIRECTORIES} \
            | reviewdog \
              -name="PHP_CodeSniffer" \
              -f=checkstyle \
              -reporter=github-pr-review \
              -diff='git diff'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          STANDARD: './phpcs.xml.dist'
          EXTENSIONS: 'php,module,inc,install,profile,engine,theme,css'
          REPORT: 'checkstyle'
          IGNORE: '*.md,*.min.css,styles.css,wysiwyg.css,proofing.css,user_guides.css,whats_new.css,*/node_modules/*,*/simplesaml*/*,graphiql.css'
          DIRECTORIES: 'docroot/modules/custom docroot/themes/custom tests'

  # Analyze the codebase for programming errors with PHPStan.
  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/post-checkout
      - name: Run PHPStan and ReviewDog
        run: |
          export REVIEWDOG_GITHUB_API_TOKEN="${GITHUB_TOKEN}"
          bin/phpstan analyze \
            --no-progress \
            --no-interaction \
            --error-format=raw \
            --memory-limit=1G \
            -q \
            ${DIRECTORIES} \
            | reviewdog \
              -name="PHPStan" \
              -f=phpstan \
              -reporter=github-pr-review \
              -diff='git diff'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          STANDARD: './phpcs.xml.dist'
          EXTENSIONS: 'php,module,inc,install,profile,engine,theme,css'
          REPORT: 'checkstyle'
          IGNORE: '*.md,*.min.css,styles.css,wysiwyg.css,proofing.css,user_guides.css,whats_new.css,*/node_modules/*,*/simplesaml*/*,graphiql.css'
          DIRECTORIES: 'docroot/modules/custom docroot/themes/custom tests'

  # Run unit tests against codebase with PHPUnit.
  phpunit:
    name: PHPUnit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/post-checkout
      - name: Run PHPUnit (Unit Tests only)
        run: bin/phpunit --group unit --exclude-group disabled tests/phpunit

  # Check styles of modules and themes with Stylelint.
  stylelint:
    name: Stylelint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-stylelint@v1
        with:
          fail_on_error: true
          github_token: ${{ secrets.github_token }}
          packages: 'stylelint-config-sass-guidelines stylelint-order'
          reporter: github-pr-review
          stylelint_config: '.stylelintrc'
          stylelint_input: 'docroot/modules/custom/**/*.css'
      - uses: reviewdog/action-stylelint@v1
        with:
          fail_on_error: true
          github_token: ${{ secrets.github_token }}
          packages: 'stylelint-config-sass-guidelines stylelint-order'
          reporter: github-pr-review
          stylelint_config: '.stylelintrc'
          stylelint_input: 'docroot/themes/custom/**/*.scss'

  # Tugboat tests are not automatically set pending, even though they are
  # required in branch protection rules (see #10553).
  #
  # Therefore, a PR can inappropriately appear to be ready to merge if,
  # for instance, a composer.lock merge conflict prevents the Tugboat
  # preview from successfully building.
  #
  # This action sets these tests pending from an immediate GitHub Action
  # so that we can trust our automated code review processes more.
  set-tugboat-tests-pending:
    name: Set Tugboat Tests Pending
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Get the initial AWS IAM User credentials. Only has basic permissions for sts:assumeRole
      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      # Get credentials from our SSM role. Least privilege method for AWS IAM.
      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.AWS_VAGOV_CMS_PROD_READ_SSM_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-vagov-cms-githubaction
          
      # Get VA_CMS_BOT Github token from SSM.
      # This will be used to set the commit status.
      - name: Get Parameter
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /cms/va-cms-bot/github_token
          env_variable_name: VA_CMS_BOT_TOKEN

      # Per Workflow secrets.GITHUB_TOKEN can't set commit status.
      # Instead lookup and use VA CMS BOT Token to do so.    
      - name: Set status for Tugboat tasks.
        run: |
          test_names=(
            va/tests/behat
            va/tests/cypress
            va/tests/phplint
            va/tests/phpunit
            va/tests/status-error
            va/tests/content-build-gql
          )
          for test_name in "${test_names[@]}"; do 
            gh api
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}" \
              -f state='pending' \
              -f context="${test_name}";
          done;
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ env.VA_CMS_BOT_TOKEN }}
