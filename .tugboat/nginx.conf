upstream server {
    least_conn;
    server server:4000 max_fails=3 fail_timeout=30s;
}



server {
    listen 80 default_server;
    listen [::]:80 default_server;

    location / {
      {% if REPLACE_NEXT_URL | default(false) %}
        try_files /dev/null @nextcontent;
      {% else %}
        try_files /dev/null @content;
      {% endif %}
    }

    location @nextcontent {
      add_header X-AP-Debug-Message "Processed by @nextcontent location";
      proxy_set_header X-Forwarded-Proto $scheme;
      # Redirect block added to catch multiple slashes in URL
      access_by_lua_block {
        if ngx.re.match(ngx.var.request_uri, "^//+$")
        then
          return ngx.redirect("/")
        end
      }
      proxy_intercept_errors on;
      set $application website;
      include proxy-headers-s3.conf;

      add_header Content-Security-Policy-Report-Only "";
      add_header Content-Security-Policy "";
      add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;
      add_header X-Frame-Options SAMEORIGIN always;


      proxy_pass {{ REPLACE_NEXT_URL }}$request_uri;

      recursive_error_pages on;

      # If @nextcontent produces anything in the 4xx or 5xx range, fall back to @content.
      error_page 400 401 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 428 429 431 500 501 502 503 504 505 506 511 = @content;
    }

    location @content {
      add_header X-AP-Debug-Message "Processed by @content location";
      # Redirect block added to catch multiple slashes in URL
      access_by_lua_block {
        if ngx.re.match(ngx.var.request_uri, "^//+$")
        then
          return ngx.redirect("/")
        end
      }
      proxy_intercept_errors on;
      set $application website;
      include proxy-headers-s3.conf;

      add_header Content-Security-Policy-Report-Only "";
      add_header Content-Security-Policy "";
      add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;
      add_header X-Frame-Options SAMEORIGIN always;


      proxy_pass {{ REPLACE_CONTENT_URL }}$request_uri;

      recursive_error_pages on;

      error_page 403 =404 @notfound;
    }

}